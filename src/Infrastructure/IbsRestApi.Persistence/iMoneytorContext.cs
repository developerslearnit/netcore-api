using IbsRestApi.Entities.iMoneytor;
using Microsoft.EntityFrameworkCore;

namespace IbsRestApi.Persistence;

public partial class iMoneytorContext : DbContext
{

    public iMoneytorContext(DbContextOptions<iMoneytorContext> options)
        : base(options)
    {
    }


    public virtual DbSet<ActLog> ActLogs { get; set; } = null!;
    public virtual DbSet<ActLogM> ActLogMs { get; set; } = null!;
    public virtual DbSet<ActualIncome> ActualIncomes { get; set; } = null!;
    public virtual DbSet<AiicoDataReportTb> AiicoDataReportTbs { get; set; } = null!;
    public virtual DbSet<AllInvestmentType> AllInvestmentTypes { get; set; } = null!;
    public virtual DbSet<AnReport> AnReports { get; set; } = null!;
    public virtual DbSet<AnReportOld> AnReportOlds { get; set; } = null!;
    public virtual DbSet<AppendSignature> AppendSignatures { get; set; } = null!;
    public virtual DbSet<AppendSignatureSave> AppendSignatureSaves { get; set; } = null!;
    public virtual DbSet<AssetClassCompliance> AssetClassCompliances { get; set; } = null!;
    public virtual DbSet<AssetClassComplianceMaster> AssetClassComplianceMasters { get; set; } = null!;
    public virtual DbSet<AuditChangeLog> AuditChangeLogs { get; set; } = null!;
    public virtual DbSet<AuditLog> AuditLogs { get; set; } = null!;
    public virtual DbSet<BalanceBandFactor> BalanceBandFactors { get; set; } = null!;
    public virtual DbSet<Bank> Banks { get; set; } = null!;
    public virtual DbSet<BankingSoftware> BankingSoftwares { get; set; } = null!;
    public virtual DbSet<BiinvestmentType> BiinvestmentTypes { get; set; } = null!;
    public virtual DbSet<BivaluationHistory> BivaluationHistories { get; set; } = null!;
    public virtual DbSet<BondAmortStraightLine> BondAmortStraightLines { get; set; } = null!;
    public virtual DbSet<BondInv> BondInvs { get; set; } = null!;
    public virtual DbSet<BondPriceAlert> BondPriceAlerts { get; set; } = null!;
    public virtual DbSet<BondResult> BondResults { get; set; } = null!;
    public virtual DbSet<BondRptAiico> BondRptAiicos { get; set; } = null!;
    public virtual DbSet<Bondrecon> Bondrecons { get; set; } = null!;
    public virtual DbSet<BorrowAmortSchedule> BorrowAmortSchedules { get; set; } = null!;
    public virtual DbSet<BorrowBalance> BorrowBalances { get; set; } = null!;
    public virtual DbSet<BorrowCashMgtAccount> BorrowCashMgtAccounts { get; set; } = null!;
    public virtual DbSet<BorrowCashMgtDateUpdate> BorrowCashMgtDateUpdates { get; set; } = null!;
    public virtual DbSet<BorrowInternalTransfer> BorrowInternalTransfers { get; set; } = null!;
    public virtual DbSet<BorrowMaster> BorrowMasters { get; set; } = null!;
    public virtual DbSet<BorrowRateTable> BorrowRateTables { get; set; } = null!;
    public virtual DbSet<BorrowReceipt> BorrowReceipts { get; set; } = null!;
    public virtual DbSet<BorrowRequisition> BorrowRequisitions { get; set; } = null!;
    public virtual DbSet<BorrowTempAmortSchedule> BorrowTempAmortSchedules { get; set; } = null!;
    public virtual DbSet<BorrowTerminate> BorrowTerminates { get; set; } = null!;
    public virtual DbSet<BorrowTmpPayoutSchedule> BorrowTmpPayoutSchedules { get; set; } = null!;
    public virtual DbSet<BorrowType> BorrowTypes { get; set; } = null!;
    public virtual DbSet<BorrowingTransactionFee> BorrowingTransactionFees { get; set; } = null!;
    public virtual DbSet<Branch> Branches { get; set; } = null!;
    public virtual DbSet<BranchReturn> BranchReturns { get; set; } = null!;
    public virtual DbSet<Broker> Brokers { get; set; } = null!;
    public virtual DbSet<BuildTreasury> BuildTreasuries { get; set; } = null!;
    public virtual DbSet<CapitalisationIndex> CapitalisationIndices { get; set; } = null!;
    public virtual DbSet<Cart> Carts { get; set; } = null!;
    public virtual DbSet<CheckScriptRun> CheckScriptRuns { get; set; } = null!;
    public virtual DbSet<CliType> CliTypes { get; set; } = null!;
    public virtual DbSet<CommOnTbils4aiico> CommOnTbils4aiicos { get; set; } = null!;
    public virtual DbSet<Company> Companies { get; set; } = null!;
    public virtual DbSet<CompanyProfile> CompanyProfiles { get; set; } = null!;
    public virtual DbSet<ComplianceBreakCode> ComplianceBreakCodes { get; set; } = null!;
    public virtual DbSet<ComplianceOverRideMaster> ComplianceOverRideMasters { get; set; } = null!;
    public virtual DbSet<ComplianceOverrideDetail> ComplianceOverrideDetails { get; set; } = null!;
    public virtual DbSet<ContCount> ContCounts { get; set; } = null!;
    public virtual DbSet<CorporateClientSignatory> CorporateClientSignatories { get; set; } = null!;
    public virtual DbSet<CounterPartyComplance> CounterPartyComplances { get; set; } = null!;
    public virtual DbSet<CounterPartyGuarantee> CounterPartyGuarantees { get; set; } = null!;
    public virtual DbSet<Cpas2Gl> Cpas2Gls { get; set; } = null!;
    public virtual DbSet<CpasCcvlf> CpasCcvlves { get; set; } = null!;
    public virtual DbSet<Currency> Currencies { get; set; } = null!;
    public virtual DbSet<CurrencyAccountMapping> CurrencyAccountMappings { get; set; } = null!;
    public virtual DbSet<Customer> Customers { get; set; } = null!;
    public virtual DbSet<CustomerBranch> CustomerBranches { get; set; } = null!;
    public virtual DbSet<CustomerRating> CustomerRatings { get; set; } = null!;
    public virtual DbSet<CustomerRatingMaster> CustomerRatingMasters { get; set; } = null!;
    public virtual DbSet<CustomerRelationOffice> CustomerRelationOffices { get; set; } = null!;
    public virtual DbSet<D272e84aFbe84e4b8357686562ab4758> D272e84aFbe84e4b8357686562ab4758s { get; set; } = null!;
    public virtual DbSet<DataBridge> DataBridges { get; set; } = null!;
    public virtual DbSet<Dbd33fa938cf4611B893F204de2f25c7> Dbd33fa938cf4611B893F204de2f25c7s { get; set; } = null!;
    public virtual DbSet<DboTmpNoDisplaytable> DboTmpNoDisplaytables { get; set; } = null!;
    public virtual DbSet<Deal2Gl> Deal2Gls { get; set; } = null!;
    public virtual DbSet<DealAccountStatement> DealAccountStatements { get; set; } = null!;
    public virtual DbSet<DealAllocation> DealAllocations { get; set; } = null!;
    public virtual DbSet<DealAmortSchedule> DealAmortSchedules { get; set; } = null!;
    public virtual DbSet<DealBalance> DealBalances { get; set; } = null!;
    public virtual DbSet<DealBalances4Valuation> DealBalances4Valuations { get; set; } = null!;
    public virtual DbSet<DealMaster> DealMasters { get; set; } = null!;
    public virtual DbSet<DealPostDateCheque> DealPostDateCheques { get; set; } = null!;
    public virtual DbSet<DealTermTemTable> DealTermTemTables { get; set; } = null!;
    public virtual DbSet<DealTerminate> DealTerminates { get; set; } = null!;
    public virtual DbSet<DealType> DealTypes { get; set; } = null!;
    public virtual DbSet<Diary> Diaries { get; set; } = null!;
    public virtual DbSet<Dieaccount> Dieaccounts { get; set; } = null!;
    public virtual DbSet<DirectInvestment> DirectInvestments { get; set; } = null!;
    public virtual DbSet<DirectorProfile> DirectorProfiles { get; set; } = null!;
    public virtual DbSet<DismissalReport> DismissalReports { get; set; } = null!;
    public virtual DbSet<DocumentMaster> DocumentMasters { get; set; } = null!;
    public virtual DbSet<EconomicSector> EconomicSectors { get; set; } = null!;
    public virtual DbSet<Employer> Employers { get; set; } = null!;
    public virtual DbSet<EnpowerLink> EnpowerLinks { get; set; } = null!;
    public virtual DbSet<Eq2Gl> Eq2Gls { get; set; } = null!;
    public virtual DbSet<EqAssetTransfer> EqAssetTransfers { get; set; } = null!;
    public virtual DbSet<EqAssetTransferDetail> EqAssetTransferDetails { get; set; } = null!;
    public virtual DbSet<EqBonRef> EqBonRefs { get; set; } = null!;
    public virtual DbSet<EqBonusBf> EqBonusBfs { get; set; } = null!;
    public virtual DbSet<EqCerImm> EqCerImms { get; set; } = null!;
    public virtual DbSet<EqCert> EqCerts { get; set; } = null!;
    public virtual DbSet<EqChangeInShareValue> EqChangeInShareValues { get; set; } = null!;
    public virtual DbSet<EqChangeInShareValueEom> EqChangeInShareValueEoms { get; set; } = null!;
    public virtual DbSet<EqChargesRate> EqChargesRates { get; set; } = null!;
    public virtual DbSet<EqComm> EqComms { get; set; } = null!;
    public virtual DbSet<EqCscsid> EqCscsids { get; set; } = null!;
    public virtual DbSet<EqDep> EqDeps { get; set; } = null!;
    public virtual DbSet<EqDepAll> EqDepAlls { get; set; } = null!;
    public virtual DbSet<EqDepRef> EqDepRefs { get; set; } = null!;
    public virtual DbSet<EqDepRefAlloc> EqDepRefAllocs { get; set; } = null!;
    public virtual DbSet<EqDiv> EqDivs { get; set; } = null!;
    public virtual DbSet<EqDivAll> EqDivAlls { get; set; } = null!;
    public virtual DbSet<EqDivDec> EqDivDecs { get; set; } = null!;
    public virtual DbSet<EqDivDecOld> EqDivDecOlds { get; set; } = null!;
    public virtual DbSet<EqDivReceivableDetail> EqDivReceivableDetails { get; set; } = null!;
    public virtual DbSet<EqDivReceivableMaster> EqDivReceivableMasters { get; set; } = null!;
    public virtual DbSet<EqDividendBf> EqDividendBfs { get; set; } = null!;
    public virtual DbSet<EqGroupGrid> EqGroupGrids { get; set; } = null!;
    public virtual DbSet<EqInvAct> EqInvActs { get; set; } = null!;
    public virtual DbSet<EqIssTyp> EqIssTyps { get; set; } = null!;
    public virtual DbSet<EqMaster> EqMasters { get; set; } = null!;
    public virtual DbSet<EqParVal> EqParVals { get; set; } = null!;
    public virtual DbSet<EqPrice> EqPrices { get; set; } = null!;
    public virtual DbSet<EqPrtGrd> EqPrtGrds { get; set; } = null!;
    public virtual DbSet<EqRcpDetail> EqRcpDetails { get; set; } = null!;
    public virtual DbSet<EqRcpMaster> EqRcpMasters { get; set; } = null!;
    public virtual DbSet<EqReqDetail> EqReqDetails { get; set; } = null!;
    public virtual DbSet<EqReqMaster> EqReqMasters { get; set; } = null!;
    public virtual DbSet<EqRiSal> EqRiSals { get; set; } = null!;
    public virtual DbSet<EqRight> EqRights { get; set; } = null!;
    public virtual DbSet<EqRightAll> EqRightAlls { get; set; } = null!;
    public virtual DbSet<EqRsaAll> EqRsaAlls { get; set; } = null!;
    public virtual DbSet<EqSectorAllocation> EqSectorAllocations { get; set; } = null!;
    public virtual DbSet<EqSellTriger> EqSellTrigers { get; set; } = null!;
    public virtual DbSet<EqStockAllocation> EqStockAllocations { get; set; } = null!;
    public virtual DbSet<EqSwap> EqSwaps { get; set; } = null!;
    public virtual DbSet<EqTraAll> EqTraAlls { get; set; } = null!;
    public virtual DbSet<EqTrea> EqTreas { get; set; } = null!;
    public virtual DbSet<EqType> EqTypes { get; set; } = null!;
    public virtual DbSet<EqtSplit> EqtSplits { get; set; } = null!;
    public virtual DbSet<EquityBrokersDrCrRequisition> EquityBrokersDrCrRequisitions { get; set; } = null!;
    public virtual DbSet<EquityBrokersDreditCredit> EquityBrokersDreditCredits { get; set; } = null!;
    public virtual DbSet<EquityMandateDetail> EquityMandateDetails { get; set; } = null!;
    public virtual DbSet<EquityMandateExecution> EquityMandateExecutions { get; set; } = null!;
    public virtual DbSet<EquityMandateMaster> EquityMandateMasters { get; set; } = null!;
    public virtual DbSet<EquityMandateToBroker> EquityMandateToBrokers { get; set; } = null!;
    public virtual DbSet<EquityPurchaseAlertMaster> EquityPurchaseAlertMasters { get; set; } = null!;
    public virtual DbSet<EquityResult> EquityResults { get; set; } = null!;
    public virtual DbSet<EquitySalesTriger> EquitySalesTrigers { get; set; } = null!;
    public virtual DbSet<ExcRate> ExcRates { get; set; } = null!;
    public virtual DbSet<ExistingClientOrder> ExistingClientOrders { get; set; } = null!;
    public virtual DbSet<ExportLayout> ExportLayouts { get; set; } = null!;
    public virtual DbSet<ExportedCashBook> ExportedCashBooks { get; set; } = null!;
    public virtual DbSet<ExportedGlentry> ExportedGlentries { get; set; } = null!;
    public virtual DbSet<ExtTrialBalance> ExtTrialBalances { get; set; } = null!;
    public virtual DbSet<ExternalGlsetup> ExternalGlsetups { get; set; } = null!;
    public virtual DbSet<ExternalTransfer> ExternalTransfers { get; set; } = null!;
    public virtual DbSet<Fe54e72527864bc3Bf99Ebb14b7de7be> Fe54e72527864bc3Bf99Ebb14b7de7bes { get; set; } = null!;
    public virtual DbSet<FintrakBond> FintrakBonds { get; set; } = null!;
    public virtual DbSet<FixedIncome> FixedIncomes { get; set; } = null!;
    public virtual DbSet<FixedInterestPaymentDetail> FixedInterestPaymentDetails { get; set; } = null!;
    public virtual DbSet<FixedInterestPaymentMaster> FixedInterestPaymentMasters { get; set; } = null!;
    public virtual DbSet<ForexRevaluationDetail> ForexRevaluationDetails { get; set; } = null!;
    public virtual DbSet<ForexRevaluationMaster> ForexRevaluationMasters { get; set; } = null!;
    public virtual DbSet<FraudReport> FraudReports { get; set; } = null!;
    public virtual DbSet<FundManagerAccount> FundManagerAccounts { get; set; } = null!;
    public virtual DbSet<FundManagerAllocation> FundManagerAllocations { get; set; } = null!;
    public virtual DbSet<FundingDiary> FundingDiaries { get; set; } = null!;
    public virtual DbSet<GlOpen> GlOpens { get; set; } = null!;
    public virtual DbSet<GlopenBizUnit> GlopenBizUnits { get; set; } = null!;
    public virtual DbSet<Holiday> Holidays { get; set; } = null!;
    public virtual DbSet<HolidayMaster> HolidayMasters { get; set; } = null!;
    public virtual DbSet<ICashTransfer> ICashTransfers { get; set; } = null!;
    public virtual DbSet<IEventConfirmation> IEventConfirmations { get; set; } = null!;
    public virtual DbSet<IEventEntitlement> IEventEntitlements { get; set; } = null!;
    public virtual DbSet<IEventNotification> IEventNotifications { get; set; } = null!;
    public virtual DbSet<ISecurity> ISecurities { get; set; } = null!;
    public virtual DbSet<ISettledPosition> ISettledPositions { get; set; } = null!;
    public virtual DbSet<ISettlementConfirmation> ISettlementConfirmations { get; set; } = null!;
    public virtual DbSet<ISettlementInstruction> ISettlementInstructions { get; set; } = null!;
    public virtual DbSet<ISettlementPending> ISettlementPendings { get; set; } = null!;
    public virtual DbSet<ITradePosition> ITradePositions { get; set; } = null!;
    public virtual DbSet<Ibs2OtherGlmapping> Ibs2OtherGlmappings { get; set; } = null!;
    public virtual DbSet<IbsAccountClass> IbsAccountClasses { get; set; } = null!;
    public virtual DbSet<IbsAcode01> IbsAcode01s { get; set; } = null!;
    public virtual DbSet<IbsAcode02> IbsAcode02s { get; set; } = null!;
    public virtual DbSet<IbsAcode03> IbsAcode03s { get; set; } = null!;
    public virtual DbSet<IbsAcode04> IbsAcode04s { get; set; } = null!;
    public virtual DbSet<IbsAcode05> IbsAcode05s { get; set; } = null!;
    public virtual DbSet<IbsAcodesDefination> IbsAcodesDefinations { get; set; } = null!;
    public virtual DbSet<IbsActChartCompany> IbsActChartCompanies { get; set; } = null!;
    public virtual DbSet<IbsAnalysisCode> IbsAnalysisCodes { get; set; } = null!;
    public virtual DbSet<IbsApplication> IbsApplications { get; set; } = null!;
    public virtual DbSet<IbsBank> IbsBanks { get; set; } = null!;
    public virtual DbSet<IbsBankAccount> IbsBankAccounts { get; set; } = null!;
    public virtual DbSet<IbsBranch> IbsBranches { get; set; } = null!;
    public virtual DbSet<IbsCategoryClass> IbsCategoryClasses { get; set; } = null!;
    public virtual DbSet<IbsCountry> IbsCountries { get; set; } = null!;
    public virtual DbSet<IbsCurrency> IbsCurrencies { get; set; } = null!;
    public virtual DbSet<IbsExcRate> IbsExcRates { get; set; } = null!;
    public virtual DbSet<IbsGlentry> IbsGlentries { get; set; } = null!;
    public virtual DbSet<IbsIReport4Moneytor> IbsIReport4Moneytors { get; set; } = null!;
    public virtual DbSet<IbsIReport4MoneytorParameter> IbsIReport4MoneytorParameters { get; set; } = null!;
    public virtual DbSet<IbsIdentifyPeopleWith> IbsIdentifyPeopleWiths { get; set; } = null!;
    public virtual DbSet<IbsInterApplication> IbsInterApplications { get; set; } = null!;
    public virtual DbSet<IbsInterfaceManager> IbsInterfaceManagers { get; set; } = null!;
    public virtual DbSet<IbsMainCategory> IbsMainCategories { get; set; } = null!;
    public virtual DbSet<IbsOccupation> IbsOccupations { get; set; } = null!;
    public virtual DbSet<IbsPerson> IbsPeople { get; set; } = null!;
    public virtual DbSet<IbsPfa> IbsPfas { get; set; } = null!;
    public virtual DbSet<IbsPostCode> IbsPostCodes { get; set; } = null!;
    public virtual DbSet<IbsPostPeriod> IbsPostPeriods { get; set; } = null!;
    public virtual DbSet<IbsProduct> IbsProducts { get; set; } = null!;
    public virtual DbSet<IbsProductLine> IbsProductLines { get; set; } = null!;
    public virtual DbSet<IbsRegion> IbsRegions { get; set; } = null!;
    public virtual DbSet<IbsRequisitionDetail> IbsRequisitionDetails { get; set; } = null!;
    public virtual DbSet<IbsRequisitionEftdetail> IbsRequisitionEftdetails { get; set; } = null!;
    public virtual DbSet<IbsRequisitionMaster> IbsRequisitionMasters { get; set; } = null!;
    public virtual DbSet<IbsRequisitionSplitCheque> IbsRequisitionSplitCheques { get; set; } = null!;
    public virtual DbSet<IbsSignatory> IbsSignatories { get; set; } = null!;
    public virtual DbSet<IbsSourceOfFund> IbsSourceOfFunds { get; set; } = null!;
    public virtual DbSet<IbsState> IbsStates { get; set; } = null!;
    public virtual DbSet<IbsSubCategory> IbsSubCategories { get; set; } = null!;
    public virtual DbSet<IbsTransaction> IbsTransactions { get; set; } = null!;
    public virtual DbSet<IbsTransactionClass> IbsTransactionClasses { get; set; } = null!;
    public virtual DbSet<IbsVoucherNo> IbsVoucherNos { get; set; } = null!;
    public virtual DbSet<IfrsTbhfsHft> IfrsTbhfsHfts { get; set; } = null!;
    public virtual DbSet<IfrsTempBondHtm> IfrsTempBondHtms { get; set; } = null!;
    public virtual DbSet<IfrsTreasuryBill> IfrsTreasuryBills { get; set; } = null!;
    public virtual DbSet<IfrsTreasuryPlacement> IfrsTreasuryPlacements { get; set; } = null!;
    public virtual DbSet<Ifrstemp> Ifrstemps { get; set; } = null!;
    public virtual DbSet<IfrstempEquity> IfrstempEquities { get; set; } = null!;
    public virtual DbSet<ImpPrtContributor> ImpPrtContributors { get; set; } = null!;
    public virtual DbSet<ImpPrtContributorAccount> ImpPrtContributorAccounts { get; set; } = null!;
    public virtual DbSet<IntTradeEquity> IntTradeEquities { get; set; } = null!;
    public virtual DbSet<IntTradeEquitySecurityType> IntTradeEquitySecurityTypes { get; set; } = null!;
    public virtual DbSet<IntTradeEquityTradeType> IntTradeEquityTradeTypes { get; set; } = null!;
    public virtual DbSet<IntTradeEquityTransactionCode> IntTradeEquityTransactionCodes { get; set; } = null!;
    public virtual DbSet<IntegraToMoneytorTab> IntegraToMoneytorTabs { get; set; } = null!;
    public virtual DbSet<Interface2BankSystem> Interface2BankSystems { get; set; } = null!;
    public virtual DbSet<InternalTransfer> InternalTransfers { get; set; } = null!;
    public virtual DbSet<InvestmentModule> InvestmentModules { get; set; } = null!;
    public virtual DbSet<InvestmentType> InvestmentTypes { get; set; } = null!;
    public virtual DbSet<KinRelationship> KinRelationships { get; set; } = null!;
    public virtual DbSet<Ln2Gl> Ln2Gls { get; set; } = null!;
    public virtual DbSet<LnAcrInt> LnAcrInts { get; set; } = null!;
    public virtual DbSet<LnAdj> LnAdjs { get; set; } = null!;
    public virtual DbSet<LnBal> LnBals { get; set; } = null!;
    public virtual DbSet<LnChangeInBondValue> LnChangeInBondValues { get; set; } = null!;
    public virtual DbSet<LnInStop> LnInStops { get; set; } = null!;
    public virtual DbSet<LnIntRat> LnIntRats { get; set; } = null!;
    public virtual DbSet<LnIntRem> LnIntRems { get; set; } = null!;
    public virtual DbSet<LnIntSch> LnIntSches { get; set; } = null!;
    public virtual DbSet<LnIntTyp> LnIntTyps { get; set; } = null!;
    public virtual DbSet<LnInterestAccrualSchedule> LnInterestAccrualSchedules { get; set; } = null!;
    public virtual DbSet<LnIvcmandateDetail> LnIvcmandateDetails { get; set; } = null!;
    public virtual DbSet<LnIvcmandateMaster> LnIvcmandateMasters { get; set; } = null!;
    public virtual DbSet<LnMast> LnMasts { get; set; } = null!;
    public virtual DbSet<LnMstAll> LnMstAlls { get; set; } = null!;
    public virtual DbSet<LnOkay> LnOkays { get; set; } = null!;
    public virtual DbSet<LnPay> LnPays { get; set; } = null!;
    public virtual DbSet<LnPayAdjustment> LnPayAdjustments { get; set; } = null!;
    public virtual DbSet<LnPayAll> LnPayAlls { get; set; } = null!;
    public virtual DbSet<LnPrice> LnPrices { get; set; } = null!;
    public virtual DbSet<LnPrnRem> LnPrnRems { get; set; } = null!;
    public virtual DbSet<LnPrnSch> LnPrnSches { get; set; } = null!;
    public virtual DbSet<LnRepaySchedule> LnRepaySchedules { get; set; } = null!;
    public virtual DbSet<LnSalesProceed> LnSalesProceeds { get; set; } = null!;
    public virtual DbSet<LnStageredPrnSchedule> LnStageredPrnSchedules { get; set; } = null!;
    public virtual DbSet<LnSymbol> LnSymbols { get; set; } = null!;
    public virtual DbSet<LnSymbolReceipt> LnSymbolReceipts { get; set; } = null!;
    public virtual DbSet<LnSymbolReceiptDetail> LnSymbolReceiptDetails { get; set; } = null!;
    public virtual DbSet<LnTerminate> LnTerminates { get; set; } = null!;
    public virtual DbSet<LnTerminateAllocation> LnTerminateAllocations { get; set; } = null!;
    public virtual DbSet<LnTmpPrn> LnTmpPrns { get; set; } = null!;
    public virtual DbSet<LnTreatmentType> LnTreatmentTypes { get; set; } = null!;
    public virtual DbSet<LnType> LnTypes { get; set; } = null!;
    public virtual DbSet<LnWriteOff> LnWriteOffs { get; set; } = null!;
    public virtual DbSet<LnWriteOffSave> LnWriteOffSaves { get; set; } = null!;
    public virtual DbSet<LnYieldHistory> LnYieldHistories { get; set; } = null!;
    public virtual DbSet<Loan2Convert> Loan2Converts { get; set; } = null!;
    public virtual DbSet<Loan2Correct> Loan2Corrects { get; set; } = null!;
    public virtual DbSet<Loan2CovertAmortSchedule> Loan2CovertAmortSchedules { get; set; } = null!;
    public virtual DbSet<LoanBalance> LoanBalances { get; set; } = null!;
    public virtual DbSet<LoanBalances4Valuation> LoanBalances4Valuations { get; set; } = null!;
    public virtual DbSet<LoanMandateDetail> LoanMandateDetails { get; set; } = null!;
    public virtual DbSet<LoanMandateMaster> LoanMandateMasters { get; set; } = null!;
    public virtual DbSet<LoanPortfolioDistribution> LoanPortfolioDistributions { get; set; } = null!;
    public virtual DbSet<Location> Locations { get; set; } = null!;
    public virtual DbSet<LogFundImport> LogFundImports { get; set; } = null!;
    public virtual DbSet<LogMaster> LogMasters { get; set; } = null!;
    public virtual DbSet<LogSettlementConfirmation> LogSettlementConfirmations { get; set; } = null!;
    public virtual DbSet<Logging> Loggings { get; set; } = null!;
    public virtual DbSet<ManagementFeesRate> ManagementFeesRates { get; set; } = null!;
    public virtual DbSet<MergerLink> MergerLinks { get; set; } = null!;
    public virtual DbSet<MigrationHistory> MigrationHistories { get; set; } = null!;
    public virtual DbSet<MoneyDetail> MoneyDetails { get; set; } = null!;
    public virtual DbSet<MoneyMarketAlert> MoneyMarketAlerts { get; set; } = null!;
    public virtual DbSet<MoneyMarketExposureDealSlip> MoneyMarketExposureDealSlips { get; set; } = null!;
    public virtual DbSet<MoneyMarketExposureDetail> MoneyMarketExposureDetails { get; set; } = null!;
    public virtual DbSet<MoneyMarketExposureMaster> MoneyMarketExposureMasters { get; set; } = null!;
    public virtual DbSet<MoneyMarketQoutation2DealSlip> MoneyMarketQoutation2DealSlips { get; set; } = null!;
    public virtual DbSet<MoneyMarketResult> MoneyMarketResults { get; set; } = null!;
    public virtual DbSet<MoneyMarketTbillFairValue> MoneyMarketTbillFairValues { get; set; } = null!;
    public virtual DbSet<MoneyMaster> MoneyMasters { get; set; } = null!;
    public virtual DbSet<Myportfolioaccount> Myportfolioaccounts { get; set; } = null!;
    public virtual DbSet<NetBondValueAiico> NetBondValueAiicos { get; set; } = null!;
    public virtual DbSet<NetBondValueAiicoNew> NetBondValueAiicoNews { get; set; } = null!;
    public virtual DbSet<Nlmastm> Nlmastms { get; set; } = null!;
    public virtual DbSet<Nltranm> Nltranms { get; set; } = null!;
    public virtual DbSet<Notification2Log> Notification2Logs { get; set; } = null!;
    public virtual DbSet<Olddd> Olddds { get; set; } = null!;
    public virtual DbSet<OnlinePortfolio> OnlinePortfolios { get; set; } = null!;
    public virtual DbSet<Order> Orders { get; set; } = null!;
    public virtual DbSet<OrderDetail> OrderDetails { get; set; } = null!;
    public virtual DbSet<PencomChartOfAccount> PencomChartOfAccounts { get; set; } = null!;
    public virtual DbSet<PencomChartOfAccount02> PencomChartOfAccount02s { get; set; } = null!;
    public virtual DbSet<PencomChartOfAccount03> PencomChartOfAccount03s { get; set; } = null!;
    public virtual DbSet<PencomInstitutionCode> PencomInstitutionCodes { get; set; } = null!;
    public virtual DbSet<PencomMfr104> PencomMfr104s { get; set; } = null!;
    public virtual DbSet<PencomMfr105> PencomMfr105s { get; set; } = null!;
    public virtual DbSet<PencomMfr135> PencomMfr135s { get; set; } = null!;
    public virtual DbSet<PencomMfr141> PencomMfr141s { get; set; } = null!;
    public virtual DbSet<PencomMfr201> PencomMfr201s { get; set; } = null!;
    public virtual DbSet<PencomMfr202> PencomMfr202s { get; set; } = null!;
    public virtual DbSet<PencomMfr205> PencomMfr205s { get; set; } = null!;
    public virtual DbSet<PencomMfr206> PencomMfr206s { get; set; } = null!;
    public virtual DbSet<PencomQar100> PencomQar100s { get; set; } = null!;
    public virtual DbSet<PencomQar200> PencomQar200s { get; set; } = null!;
    public virtual DbSet<PencomQcfr100> PencomQcfr100s { get; set; } = null!;
    public virtual DbSet<PencomQcfr200> PencomQcfr200s { get; set; } = null!;
    public virtual DbSet<PencomQcr100> PencomQcr100s { get; set; } = null!;
    public virtual DbSet<PencomQcr200> PencomQcr200s { get; set; } = null!;
    public virtual DbSet<PencomState> PencomStates { get; set; } = null!;
    public virtual DbSet<Pfamfr144> Pfamfr144s { get; set; } = null!;
    public virtual DbSet<Portfolio> Portfolios { get; set; } = null!;
    public virtual DbSet<PortfolioAccount> PortfolioAccounts { get; set; } = null!;
    public virtual DbSet<PortfolioBenchmarkComputation> PortfolioBenchmarkComputations { get; set; } = null!;
    public virtual DbSet<PortfolioCashForeCastClass> PortfolioCashForeCastClasses { get; set; } = null!;
    public virtual DbSet<PortfolioCashForecastDetail> PortfolioCashForecastDetails { get; set; } = null!;
    public virtual DbSet<PortfolioCashForecastMaster> PortfolioCashForecastMasters { get; set; } = null!;
    public virtual DbSet<PortfolioClosure> PortfolioClosures { get; set; } = null!;
    public virtual DbSet<PortfolioContributor> PortfolioContributors { get; set; } = null!;
    public virtual DbSet<PortfolioContributorAccount> PortfolioContributorAccounts { get; set; } = null!;
    public virtual DbSet<PortfolioContributorAccruedProfit> PortfolioContributorAccruedProfits { get; set; } = null!;
    public virtual DbSet<PortfolioContributorAddress> PortfolioContributorAddresses { get; set; } = null!;
    public virtual DbSet<PortfolioContributorAgent> PortfolioContributorAgents { get; set; } = null!;
    public virtual DbSet<PortfolioContributorAgentComision> PortfolioContributorAgentComisions { get; set; } = null!;
    public virtual DbSet<PortfolioContributorBeneficiary> PortfolioContributorBeneficiaries { get; set; } = null!;
    public virtual DbSet<PortfolioContributorBiodataHistotry> PortfolioContributorBiodataHistotries { get; set; } = null!;
    public virtual DbSet<PortfolioContributorBulkAccount> PortfolioContributorBulkAccounts { get; set; } = null!;
    public virtual DbSet<PortfolioContributorCertficate> PortfolioContributorCertficates { get; set; } = null!;
    public virtual DbSet<PortfolioContributorDependant> PortfolioContributorDependants { get; set; } = null!;
    public virtual DbSet<PortfolioContributorDocumentation> PortfolioContributorDocumentations { get; set; } = null!;
    public virtual DbSet<PortfolioContributorJoinApplicant> PortfolioContributorJoinApplicants { get; set; } = null!;
    public virtual DbSet<PortfolioContributorLien> PortfolioContributorLiens { get; set; } = null!;
    public virtual DbSet<PortfolioContributorMandate> PortfolioContributorMandates { get; set; } = null!;
    public virtual DbSet<PortfolioContributorNetWorth> PortfolioContributorNetWorths { get; set; } = null!;
    public virtual DbSet<PortfolioContributorRedemption> PortfolioContributorRedemptions { get; set; } = null!;
    public virtual DbSet<PortfolioContributorType> PortfolioContributorTypes { get; set; } = null!;
    public virtual DbSet<PortfolioCsc> PortfolioCscs { get; set; } = null!;
    public virtual DbSet<PortfolioCurrencyBalance> PortfolioCurrencyBalances { get; set; } = null!;
    public virtual DbSet<PortfolioCustodian> PortfolioCustodians { get; set; } = null!;
    public virtual DbSet<PortfolioDirectGldetail> PortfolioDirectGldetails { get; set; } = null!;
    public virtual DbSet<PortfolioDirectGlmaster> PortfolioDirectGlmasters { get; set; } = null!;
    public virtual DbSet<PortfolioDirectGlposting> PortfolioDirectGlpostings { get; set; } = null!;
    public virtual DbSet<PortfolioDirector> PortfolioDirectors { get; set; } = null!;
    public virtual DbSet<PortfolioDividendAllocation> PortfolioDividendAllocations { get; set; } = null!;
    public virtual DbSet<PortfolioDividendMaster> PortfolioDividendMasters { get; set; } = null!;
    public virtual DbSet<PortfolioDocumentation> PortfolioDocumentations { get; set; } = null!;
    public virtual DbSet<PortfolioDrCrDetail> PortfolioDrCrDetails { get; set; } = null!;
    public virtual DbSet<PortfolioDrCrInvoice> PortfolioDrCrInvoices { get; set; } = null!;
    public virtual DbSet<PortfolioDrCrMaster> PortfolioDrCrMasters { get; set; } = null!;
    public virtual DbSet<PortfolioEquitySalesAdisor> PortfolioEquitySalesAdisors { get; set; } = null!;
    public virtual DbSet<PortfolioExpectedReturn> PortfolioExpectedReturns { get; set; } = null!;
    public virtual DbSet<PortfolioGroup> PortfolioGroups { get; set; } = null!;
    public virtual DbSet<PortfolioGroupClassification> PortfolioGroupClassifications { get; set; } = null!;
    public virtual DbSet<PortfolioGroupClassificationDetail> PortfolioGroupClassificationDetails { get; set; } = null!;
    public virtual DbSet<PortfolioGroupInvestmentSummary> PortfolioGroupInvestmentSummaries { get; set; } = null!;
    public virtual DbSet<PortfolioGroupValuation> PortfolioGroupValuations { get; set; } = null!;
    public virtual DbSet<PortfolioIdentifyWith> PortfolioIdentifyWiths { get; set; } = null!;
    public virtual DbSet<PortfolioIncentive> PortfolioIncentives { get; set; } = null!;
    public virtual DbSet<PortfolioIntCalculator> PortfolioIntCalculators { get; set; } = null!;
    public virtual DbSet<PortfolioInterestAllocation> PortfolioInterestAllocations { get; set; } = null!;
    public virtual DbSet<PortfolioInterestMaster> PortfolioInterestMasters { get; set; } = null!;
    public virtual DbSet<PortfolioInterestRate> PortfolioInterestRates { get; set; } = null!;
    public virtual DbSet<PortfolioInterestSharing> PortfolioInterestSharings { get; set; } = null!;
    public virtual DbSet<PortfolioInvestmentPolicy> PortfolioInvestmentPolicies { get; set; } = null!;
    public virtual DbSet<PortfolioInvoice> PortfolioInvoices { get; set; } = null!;
    public virtual DbSet<PortfolioJointDetail> PortfolioJointDetails { get; set; } = null!;
    public virtual DbSet<PortfolioManagementFee> PortfolioManagementFees { get; set; } = null!;
    public virtual DbSet<PortfolioMandate> PortfolioMandates { get; set; } = null!;
    public virtual DbSet<PortfolioModelBalancing> PortfolioModelBalancings { get; set; } = null!;
    public virtual DbSet<PortfolioMoneyMovement> PortfolioMoneyMovements { get; set; } = null!;
    public virtual DbSet<PortfolioMvMntTransType> PortfolioMvMntTransTypes { get; set; } = null!;
    public virtual DbSet<PortfolioNavBf> PortfolioNavBfs { get; set; } = null!;
    public virtual DbSet<PortfolioNavSummary> PortfolioNavSummaries { get; set; } = null!;
    public virtual DbSet<PortfolioNavvsIndex> PortfolioNavvsIndices { get; set; } = null!;
    public virtual DbSet<PortfolioOtherFeesDetail> PortfolioOtherFeesDetails { get; set; } = null!;
    public virtual DbSet<PortfolioOtherFeesMaster> PortfolioOtherFeesMasters { get; set; } = null!;
    public virtual DbSet<PortfolioProratedFeesDetail> PortfolioProratedFeesDetails { get; set; } = null!;
    public virtual DbSet<PortfolioProratedFeesMaster> PortfolioProratedFeesMasters { get; set; } = null!;
    public virtual DbSet<PortfolioRedemptionTracking> PortfolioRedemptionTrackings { get; set; } = null!;
    public virtual DbSet<PortfolioTransfer> PortfolioTransfers { get; set; } = null!;
    public virtual DbSet<PortfolioTransferAssetList> PortfolioTransferAssetLists { get; set; } = null!;
    public virtual DbSet<PortfolioTwr> PortfolioTwrs { get; set; } = null!;
    public virtual DbSet<PortfolioUnitHistory> PortfolioUnitHistories { get; set; } = null!;
    public virtual DbSet<PortfolioUnitSwap> PortfolioUnitSwaps { get; set; } = null!;
    public virtual DbSet<PortfolioValuationHistory> PortfolioValuationHistories { get; set; } = null!;
    public virtual DbSet<PortoflioCompliance> PortoflioCompliances { get; set; } = null!;
    public virtual DbSet<PostDate> PostDates { get; set; } = null!;
    public virtual DbSet<Preference> Preferences { get; set; } = null!;
    public virtual DbSet<PriceIndex> PriceIndices { get; set; } = null!;
    public virtual DbSet<Pricelist> Pricelists { get; set; } = null!;
    public virtual DbSet<ProfLossChange> ProfLossChanges { get; set; } = null!;
    public virtual DbSet<ProffService> ProffServices { get; set; } = null!;
    public virtual DbSet<QuartlyStatement> QuartlyStatements { get; set; } = null!;
    public virtual DbSet<QvCustomerMaster> QvCustomerMasters { get; set; } = null!;
    public virtual DbSet<RatingEngine> RatingEngines { get; set; } = null!;
    public virtual DbSet<RealEstateGlextract> RealEstateGlextracts { get; set; } = null!;
    public virtual DbSet<RealEstateGlextractList> RealEstateGlextractLists { get; set; } = null!;
    public virtual DbSet<Receipt> Receipts { get; set; } = null!;
    public virtual DbSet<Receipt18072008> Receipt18072008s { get; set; } = null!;
    public virtual DbSet<ReceiptAllocation> ReceiptAllocations { get; set; } = null!;
    public virtual DbSet<ReferedByList> ReferedByLists { get; set; } = null!;
    public virtual DbSet<Registra> Registras { get; set; } = null!;
    public virtual DbSet<RegistrarResponseCode> RegistrarResponseCodes { get; set; } = null!;
    public virtual DbSet<RegulatorCompliance> RegulatorCompliances { get; set; } = null!;
    public virtual DbSet<RelationshipManager> RelationshipManagers { get; set; } = null!;
    public virtual DbSet<Report2EmailDetail> Report2EmailDetails { get; set; } = null!;
    public virtual DbSet<Report2EmailLog> Report2EmailLogs { get; set; } = null!;
    public virtual DbSet<Report2EmailMaster> Report2EmailMasters { get; set; } = null!;
    public virtual DbSet<ReportBatchMaster> ReportBatchMasters { get; set; } = null!;
    public virtual DbSet<Requisition> Requisitions { get; set; } = null!;
    public virtual DbSet<RequisitionAllocation> RequisitionAllocations { get; set; } = null!;
    public virtual DbSet<RiskProfilerDetail> RiskProfilerDetails { get; set; } = null!;
    public virtual DbSet<RiskProfilerMaster> RiskProfilerMasters { get; set; } = null!;
    public virtual DbSet<RiskProfilerTest> RiskProfilerTests { get; set; } = null!;
    public virtual DbSet<RiskType> RiskTypes { get; set; } = null!;
    public virtual DbSet<RoaAlloc> RoaAllocs { get; set; } = null!;
    public virtual DbSet<RoaBondResult> RoaBondResults { get; set; } = null!;
    public virtual DbSet<RoaCaBnk> RoaCaBnks { get; set; } = null!;
    public virtual DbSet<RoaComp> RoaComps { get; set; } = null!;
    public virtual DbSet<RoaEquityResult> RoaEquityResults { get; set; } = null!;
    public virtual DbSet<RoaExAll> RoaExAlls { get; set; } = null!;
    public virtual DbSet<RoaExh01> RoaExh01s { get; set; } = null!;
    public virtual DbSet<RoaExh02> RoaExh02s { get; set; } = null!;
    public virtual DbSet<RoaExh05> RoaExh05s { get; set; } = null!;
    public virtual DbSet<RoaExh09> RoaExh09s { get; set; } = null!;
    public virtual DbSet<RoaExh10> RoaExh10s { get; set; } = null!;
    public virtual DbSet<RoaExh11> RoaExh11s { get; set; } = null!;
    public virtual DbSet<RoaExh12> RoaExh12s { get; set; } = null!;
    public virtual DbSet<RoaExh13> RoaExh13s { get; set; } = null!;
    public virtual DbSet<RoaExh14> RoaExh14s { get; set; } = null!;
    public virtual DbSet<RoaExh16> RoaExh16s { get; set; } = null!;
    public virtual DbSet<RoaExhib> RoaExhibs { get; set; } = null!;
    public virtual DbSet<RoaGainByAssetClass> RoaGainByAssetClasses { get; set; } = null!;
    public virtual DbSet<RoaImpar> RoaImpars { get; set; } = null!;
    public virtual DbSet<RoaIndex> RoaIndices { get; set; } = null!;
    public virtual DbSet<RoaMoneyMarketResult> RoaMoneyMarketResults { get; set; } = null!;
    public virtual DbSet<RoaStCal> RoaStCals { get; set; } = null!;
    public virtual DbSet<RoaStrat> RoaStrats { get; set; } = null!;
    public virtual DbSet<RoaSummary> RoaSummaries { get; set; } = null!;
    public virtual DbSet<RoaTimeWeightedDetail> RoaTimeWeightedDetails { get; set; } = null!;
    public virtual DbSet<RpDpSchd> RpDpSchds { get; set; } = null!;
    public virtual DbSet<RpDpTre> RpDpTres { get; set; } = null!;
    public virtual DbSet<RpEqExp> RpEqExps { get; set; } = null!;
    public virtual DbSet<RpEqGain> RpEqGains { get; set; } = null!;
    public virtual DbSet<RpEqSchd> RpEqSchds { get; set; } = null!;
    public virtual DbSet<RpLnSchd> RpLnSchds { get; set; } = null!;
    public virtual DbSet<RpLnTre> RpLnTres { get; set; } = null!;
    public virtual DbSet<RpLsSchd> RpLsSchds { get; set; } = null!;
    public virtual DbSet<RpLsTre> RpLsTres { get; set; } = null!;
    public virtual DbSet<RpMgSchd> RpMgSchds { get; set; } = null!;
    public virtual DbSet<RpMgTre> RpMgTres { get; set; } = null!;
    public virtual DbSet<RpStMent> RpStMents { get; set; } = null!;
    public virtual DbSet<SecRole> SecRoles { get; set; } = null!;
    public virtual DbSet<SecUser> SecUsers { get; set; } = null!;
    public virtual DbSet<SecUsersRole> SecUsersRoles { get; set; } = null!;
    public virtual DbSet<SentMail> SentMails { get; set; } = null!;
    public virtual DbSet<SettlementMode> SettlementModes { get; set; } = null!;
    public virtual DbSet<ShareMandateDetail> ShareMandateDetails { get; set; } = null!;
    public virtual DbSet<ShareMandatePortfolio> ShareMandatePortfolios { get; set; } = null!;
    public virtual DbSet<ShareholderProfile> ShareholderProfiles { get; set; } = null!;
    public virtual DbSet<Sheet1> Sheet1s { get; set; } = null!;
    public virtual DbSet<Signatory> Signatories { get; set; } = null!;
    public virtual DbSet<SignatoryOld> SignatoryOlds { get; set; } = null!;
    public virtual DbSet<SourceOfFund> SourceOfFunds { get; set; } = null!;
    public virtual DbSet<SqlExecutorDetail> SqlExecutorDetails { get; set; } = null!;
    public virtual DbSet<SqlExecutorMaster> SqlExecutorMasters { get; set; } = null!;
    public virtual DbSet<State> States { get; set; } = null!;
    public virtual DbSet<StokExch> StokExches { get; set; } = null!;
    public virtual DbSet<SubAssetClass> SubAssetClasses { get; set; } = null!;
    public virtual DbSet<SubTable> SubTables { get; set; } = null!;
    public virtual DbSet<Syncobj0x3044373133423143> Syncobj0x3044373133423143s { get; set; } = null!;
    public virtual DbSet<Syncobj0x3045313432333641> Syncobj0x3045313432333641s { get; set; } = null!;
    public virtual DbSet<Syncobj0x3133324630454143> Syncobj0x3133324630454143s { get; set; } = null!;
    public virtual DbSet<Syncobj0x3243444236374639> Syncobj0x3243444236374639s { get; set; } = null!;
    public virtual DbSet<Syncobj0x3343334331303741> Syncobj0x3343334331303741s { get; set; } = null!;
    public virtual DbSet<Syncobj0x3439303439303042> Syncobj0x3439303439303042s { get; set; } = null!;
    public virtual DbSet<Syncobj0x3630464542343044> Syncobj0x3630464542343044s { get; set; } = null!;
    public virtual DbSet<Syncobj0x3635423843373137> Syncobj0x3635423843373137s { get; set; } = null!;
    public virtual DbSet<Syncobj0x4146433536424535> Syncobj0x4146433536424535s { get; set; } = null!;
    public virtual DbSet<Syncobj0x4333343830413130> Syncobj0x4333343830413130s { get; set; } = null!;
    public virtual DbSet<Syncobj0x4442393134383637> Syncobj0x4442393134383637s { get; set; } = null!;
    public virtual DbSet<Tagsave> Tagsaves { get; set; } = null!;
    public virtual DbSet<TbillResult> TbillResults { get; set; } = null!;
    public virtual DbSet<TbillTreatmentType> TbillTreatmentTypes { get; set; } = null!;
    public virtual DbSet<Tbl> Tbls { get; set; } = null!;
    public virtual DbSet<TempBlotterTbillUpload> TempBlotterTbillUploads { get; set; } = null!;
    public virtual DbSet<TempTermInterestTable> TempTermInterestTables { get; set; } = null!;
    public virtual DbSet<Tmp103PortfolioInvestmentSummary> Tmp103PortfolioInvestmentSummaries { get; set; } = null!;
    public virtual DbSet<Tmp104PortfolioInvestmentSummary> Tmp104PortfolioInvestmentSummaries { get; set; } = null!;
    public virtual DbSet<Tmp106PortfolioInvestmentSummary> Tmp106PortfolioInvestmentSummaries { get; set; } = null!;
    public virtual DbSet<Tmp108PortfolioInvestmentSummary> Tmp108PortfolioInvestmentSummaries { get; set; } = null!;
    public virtual DbSet<Tmp109DealDistribution> Tmp109DealDistributions { get; set; } = null!;
    public virtual DbSet<Tmp109PortfolioInvestmentSummary> Tmp109PortfolioInvestmentSummaries { get; set; } = null!;
    public virtual DbSet<Tmp10DealDistribution> Tmp10DealDistributions { get; set; } = null!;
    public virtual DbSet<Tmp10NavVsIndex> Tmp10NavVsIndices { get; set; } = null!;
    public virtual DbSet<Tmp10PortfolioInvestmentSummary> Tmp10PortfolioInvestmentSummaries { get; set; } = null!;
    public virtual DbSet<Tmp10Sum2Return> Tmp10Sum2Returns { get; set; } = null!;
    public virtual DbSet<Tmp11NavVsIndex> Tmp11NavVsIndices { get; set; } = null!;
    public virtual DbSet<Tmp11PortfolioInvestmentSummary> Tmp11PortfolioInvestmentSummaries { get; set; } = null!;
    public virtual DbSet<Tmp11Sum2Return> Tmp11Sum2Returns { get; set; } = null!;
    public virtual DbSet<Tmp12NavVsIndex> Tmp12NavVsIndices { get; set; } = null!;
    public virtual DbSet<Tmp12PortfolioInvestmentSummary> Tmp12PortfolioInvestmentSummaries { get; set; } = null!;
    public virtual DbSet<Tmp12Sum2Return> Tmp12Sum2Returns { get; set; } = null!;
    public virtual DbSet<Tmp13NavVsIndex> Tmp13NavVsIndices { get; set; } = null!;
    public virtual DbSet<Tmp13Sum2Return> Tmp13Sum2Returns { get; set; } = null!;
    public virtual DbSet<Tmp14NavVsIndex> Tmp14NavVsIndices { get; set; } = null!;
    public virtual DbSet<Tmp14Sum2Return> Tmp14Sum2Returns { get; set; } = null!;
    public virtual DbSet<Tmp15Sum2Return> Tmp15Sum2Returns { get; set; } = null!;
    public virtual DbSet<Tmp16NavVsIndex> Tmp16NavVsIndices { get; set; } = null!;
    public virtual DbSet<Tmp16PortfolioInvestmentSummary> Tmp16PortfolioInvestmentSummaries { get; set; } = null!;
    public virtual DbSet<Tmp16Sum2Return> Tmp16Sum2Returns { get; set; } = null!;
    public virtual DbSet<Tmp17NavVsIndex> Tmp17NavVsIndices { get; set; } = null!;
    public virtual DbSet<Tmp17Sum2Return> Tmp17Sum2Returns { get; set; } = null!;
    public virtual DbSet<Tmp18Sum2Return> Tmp18Sum2Returns { get; set; } = null!;
    public virtual DbSet<Tmp19NavVsIndex> Tmp19NavVsIndices { get; set; } = null!;
    public virtual DbSet<Tmp19Sum2Return> Tmp19Sum2Returns { get; set; } = null!;
    public virtual DbSet<Tmp1NavVsIndex> Tmp1NavVsIndices { get; set; } = null!;
    public virtual DbSet<Tmp1Sum2Return> Tmp1Sum2Returns { get; set; } = null!;
    public virtual DbSet<Tmp20NavVsIndex> Tmp20NavVsIndices { get; set; } = null!;
    public virtual DbSet<Tmp20Sum2Return> Tmp20Sum2Returns { get; set; } = null!;
    public virtual DbSet<Tmp21PortfolioInvestmentSummary> Tmp21PortfolioInvestmentSummaries { get; set; } = null!;
    public virtual DbSet<Tmp21Sum2Return> Tmp21Sum2Returns { get; set; } = null!;
    public virtual DbSet<Tmp22NavVsIndex> Tmp22NavVsIndices { get; set; } = null!;
    public virtual DbSet<Tmp22Sum2Return> Tmp22Sum2Returns { get; set; } = null!;
    public virtual DbSet<Tmp23NavVsIndex> Tmp23NavVsIndices { get; set; } = null!;
    public virtual DbSet<Tmp23Sum2Return> Tmp23Sum2Returns { get; set; } = null!;
    public virtual DbSet<Tmp24NavVsIndex> Tmp24NavVsIndices { get; set; } = null!;
    public virtual DbSet<Tmp25Sum2Return> Tmp25Sum2Returns { get; set; } = null!;
    public virtual DbSet<Tmp26Sum2Return> Tmp26Sum2Returns { get; set; } = null!;
    public virtual DbSet<Tmp27PortfolioInvestmentSummary> Tmp27PortfolioInvestmentSummaries { get; set; } = null!;
    public virtual DbSet<Tmp27Sum2Return> Tmp27Sum2Returns { get; set; } = null!;
    public virtual DbSet<Tmp28PortfolioInvestmentSummary> Tmp28PortfolioInvestmentSummaries { get; set; } = null!;
    public virtual DbSet<Tmp2DealDistribution> Tmp2DealDistributions { get; set; } = null!;
    public virtual DbSet<Tmp2GLoanPortfolioDistribution> Tmp2GLoanPortfolioDistributions { get; set; } = null!;
    public virtual DbSet<Tmp2MmIntBuild> Tmp2MmIntBuilds { get; set; } = null!;
    public virtual DbSet<Tmp2NavVsIndex> Tmp2NavVsIndices { get; set; } = null!;
    public virtual DbSet<Tmp2PortfolioInvestmentSummary> Tmp2PortfolioInvestmentSummaries { get; set; } = null!;
    public virtual DbSet<Tmp2Sum2Return> Tmp2Sum2Returns { get; set; } = null!;
    public virtual DbSet<Tmp30Sum2Return> Tmp30Sum2Returns { get; set; } = null!;
    public virtual DbSet<Tmp31PortfolioInvestmentSummary> Tmp31PortfolioInvestmentSummaries { get; set; } = null!;
    public virtual DbSet<Tmp32Sum2Return> Tmp32Sum2Returns { get; set; } = null!;
    public virtual DbSet<Tmp33PortfolioInvestmentSummary> Tmp33PortfolioInvestmentSummaries { get; set; } = null!;
    public virtual DbSet<Tmp33Sum2Return> Tmp33Sum2Returns { get; set; } = null!;
    public virtual DbSet<Tmp34Sum2Return> Tmp34Sum2Returns { get; set; } = null!;
    public virtual DbSet<Tmp35PortfolioInvestmentSummary> Tmp35PortfolioInvestmentSummaries { get; set; } = null!;
    public virtual DbSet<Tmp35Sum2Return> Tmp35Sum2Returns { get; set; } = null!;
    public virtual DbSet<Tmp36PortfolioInvestmentSummary> Tmp36PortfolioInvestmentSummaries { get; set; } = null!;
    public virtual DbSet<Tmp38Sum2Return> Tmp38Sum2Returns { get; set; } = null!;
    public virtual DbSet<Tmp39DealDistribution> Tmp39DealDistributions { get; set; } = null!;
    public virtual DbSet<Tmp39Sum2Return> Tmp39Sum2Returns { get; set; } = null!;
    public virtual DbSet<Tmp3Sum2Return> Tmp3Sum2Returns { get; set; } = null!;
    public virtual DbSet<Tmp40Sum2Return> Tmp40Sum2Returns { get; set; } = null!;
    public virtual DbSet<Tmp42PortfolioInvestmentSummary> Tmp42PortfolioInvestmentSummaries { get; set; } = null!;
    public virtual DbSet<Tmp47Sum2Return> Tmp47Sum2Returns { get; set; } = null!;
    public virtual DbSet<Tmp48Sum2Return> Tmp48Sum2Returns { get; set; } = null!;
    public virtual DbSet<Tmp4DealDistribution> Tmp4DealDistributions { get; set; } = null!;
    public virtual DbSet<Tmp4NavVsIndex> Tmp4NavVsIndices { get; set; } = null!;
    public virtual DbSet<Tmp4PortfolioInvestmentSummary> Tmp4PortfolioInvestmentSummaries { get; set; } = null!;
    public virtual DbSet<Tmp4Sum2Return> Tmp4Sum2Returns { get; set; } = null!;
    public virtual DbSet<Tmp50Sum2Return> Tmp50Sum2Returns { get; set; } = null!;
    public virtual DbSet<Tmp52Sum2Return> Tmp52Sum2Returns { get; set; } = null!;
    public virtual DbSet<Tmp5NavVsIndex> Tmp5NavVsIndices { get; set; } = null!;
    public virtual DbSet<Tmp5Sum2Return> Tmp5Sum2Returns { get; set; } = null!;
    public virtual DbSet<Tmp60NavVsIndex> Tmp60NavVsIndices { get; set; } = null!;
    public virtual DbSet<Tmp60Sum2Return> Tmp60Sum2Returns { get; set; } = null!;
    public virtual DbSet<Tmp62NavVsIndex> Tmp62NavVsIndices { get; set; } = null!;
    public virtual DbSet<Tmp62PortfolioInvestmentSummary> Tmp62PortfolioInvestmentSummaries { get; set; } = null!;
    public virtual DbSet<Tmp62Sum2Return> Tmp62Sum2Returns { get; set; } = null!;
    public virtual DbSet<Tmp63PortfolioInvestmentSummary> Tmp63PortfolioInvestmentSummaries { get; set; } = null!;
    public virtual DbSet<Tmp63Sum2Return> Tmp63Sum2Returns { get; set; } = null!;
    public virtual DbSet<Tmp64Sum2Return> Tmp64Sum2Returns { get; set; } = null!;
    public virtual DbSet<Tmp65PortfolioInvestmentSummary> Tmp65PortfolioInvestmentSummaries { get; set; } = null!;
    public virtual DbSet<Tmp65Sum2Return> Tmp65Sum2Returns { get; set; } = null!;
    public virtual DbSet<Tmp66NavVsIndex> Tmp66NavVsIndices { get; set; } = null!;
    public virtual DbSet<Tmp66Sum2Return> Tmp66Sum2Returns { get; set; } = null!;
    public virtual DbSet<Tmp67NavVsIndex> Tmp67NavVsIndices { get; set; } = null!;
    public virtual DbSet<Tmp67Sum2Return> Tmp67Sum2Returns { get; set; } = null!;
    public virtual DbSet<Tmp68DealDistribution> Tmp68DealDistributions { get; set; } = null!;
    public virtual DbSet<Tmp69NavVsIndex> Tmp69NavVsIndices { get; set; } = null!;
    public virtual DbSet<Tmp6NavVsIndex> Tmp6NavVsIndices { get; set; } = null!;
    public virtual DbSet<Tmp6Sum2Return> Tmp6Sum2Returns { get; set; } = null!;
    public virtual DbSet<Tmp72Sum2Return> Tmp72Sum2Returns { get; set; } = null!;
    public virtual DbSet<Tmp73Sum2Return> Tmp73Sum2Returns { get; set; } = null!;
    public virtual DbSet<Tmp77PortfolioInvestmentSummary> Tmp77PortfolioInvestmentSummaries { get; set; } = null!;
    public virtual DbSet<Tmp79Sum2Return> Tmp79Sum2Returns { get; set; } = null!;
    public virtual DbSet<Tmp7PortfolioInvestmentSummary> Tmp7PortfolioInvestmentSummaries { get; set; } = null!;
    public virtual DbSet<Tmp7Sum2Return> Tmp7Sum2Returns { get; set; } = null!;
    public virtual DbSet<Tmp80PortfolioInvestmentSummary> Tmp80PortfolioInvestmentSummaries { get; set; } = null!;
    public virtual DbSet<Tmp80Sum2Return> Tmp80Sum2Returns { get; set; } = null!;
    public virtual DbSet<Tmp81Sum2Return> Tmp81Sum2Returns { get; set; } = null!;
    public virtual DbSet<Tmp82PortfolioInvestmentSummary> Tmp82PortfolioInvestmentSummaries { get; set; } = null!;
    public virtual DbSet<Tmp82Sum2Return> Tmp82Sum2Returns { get; set; } = null!;
    public virtual DbSet<Tmp83Sum2Return> Tmp83Sum2Returns { get; set; } = null!;
    public virtual DbSet<Tmp84PortfolioInvestmentSummary> Tmp84PortfolioInvestmentSummaries { get; set; } = null!;
    public virtual DbSet<Tmp84Sum2Return> Tmp84Sum2Returns { get; set; } = null!;
    public virtual DbSet<Tmp86PortfolioInvestmentSummary> Tmp86PortfolioInvestmentSummaries { get; set; } = null!;
    public virtual DbSet<Tmp87Sum2Return> Tmp87Sum2Returns { get; set; } = null!;
    public virtual DbSet<Tmp88Sum2Return> Tmp88Sum2Returns { get; set; } = null!;
    public virtual DbSet<Tmp8NavVsIndex> Tmp8NavVsIndices { get; set; } = null!;
    public virtual DbSet<Tmp8PortfolioInvestmentSummary> Tmp8PortfolioInvestmentSummaries { get; set; } = null!;
    public virtual DbSet<Tmp8Sum2Return> Tmp8Sum2Returns { get; set; } = null!;
    public virtual DbSet<Tmp90Sum2Return> Tmp90Sum2Returns { get; set; } = null!;
    public virtual DbSet<Tmp92PortfolioInvestmentSummary> Tmp92PortfolioInvestmentSummaries { get; set; } = null!;
    public virtual DbSet<Tmp92Sum2Return> Tmp92Sum2Returns { get; set; } = null!;
    public virtual DbSet<Tmp94PortfolioInvestmentSummary> Tmp94PortfolioInvestmentSummaries { get; set; } = null!;
    public virtual DbSet<Tmp9NavVsIndex> Tmp9NavVsIndices { get; set; } = null!;
    public virtual DbSet<Tmp9PortfolioInvestmentSummary> Tmp9PortfolioInvestmentSummaries { get; set; } = null!;
    public virtual DbSet<Tmp9Sum2Return> Tmp9Sum2Returns { get; set; } = null!;
    public virtual DbSet<TmpBrwBuildInt> TmpBrwBuildInts { get; set; } = null!;
    public virtual DbSet<TmpCpasValuation> TmpCpasValuations { get; set; } = null!;
    public virtual DbSet<TmpDailyGrsUnit> TmpDailyGrsUnits { get; set; } = null!;
    public virtual DbSet<TmpDocumentMaster> TmpDocumentMasters { get; set; } = null!;
    public virtual DbSet<TmpDvrExport> TmpDvrExports { get; set; } = null!;
    public virtual DbSet<TmpEqDep> TmpEqDeps { get; set; } = null!;
    public virtual DbSet<TmpEqreturn> TmpEqreturns { get; set; } = null!;
    public virtual DbSet<TmpEquityReturn> TmpEquityReturns { get; set; } = null!;
    public virtual DbSet<TmpErrordeal> TmpErrordeals { get; set; } = null!;
    public virtual DbSet<TmpLnMast> TmpLnMasts { get; set; } = null!;
    public virtual DbSet<TmpLnSymbol> TmpLnSymbols { get; set; } = null!;
    public virtual DbSet<TmpLnSymbolReceipt> TmpLnSymbolReceipts { get; set; } = null!;
    public virtual DbSet<TmpMmbuildInt> TmpMmbuildInts { get; set; } = null!;
    public virtual DbSet<TmpNoDisplaytable> TmpNoDisplaytables { get; set; } = null!;
    public virtual DbSet<TmpPortfolio1> TmpPortfolio1s { get; set; } = null!;
    public virtual DbSet<TmpPortfolioCashForecastMaster> TmpPortfolioCashForecastMasters { get; set; } = null!;
    public virtual DbSet<TmpPortfolioInvestmentSummary> TmpPortfolioInvestmentSummaries { get; set; } = null!;
    public virtual DbSet<TmpPortfolioNavvsIndex10> TmpPortfolioNavvsIndex10s { get; set; } = null!;
    public virtual DbSet<TmpPortfolioNavvsIndex104> TmpPortfolioNavvsIndex104s { get; set; } = null!;
    public virtual DbSet<TmpPortfolioNavvsIndex105> TmpPortfolioNavvsIndex105s { get; set; } = null!;
    public virtual DbSet<TmpPortfolioNavvsIndex106> TmpPortfolioNavvsIndex106s { get; set; } = null!;
    public virtual DbSet<TmpPortfolioNavvsIndex107> TmpPortfolioNavvsIndex107s { get; set; } = null!;
    public virtual DbSet<TmpPortfolioNavvsIndex11> TmpPortfolioNavvsIndex1s1 { get; set; } = null!;
    public virtual DbSet<TmpPortfolioNavvsIndex12> TmpPortfolioNavvsIndex12s { get; set; } = null!;
    public virtual DbSet<TmpPortfolioNavvsIndex120> TmpPortfolioNavvsIndex120s { get; set; } = null!;
    public virtual DbSet<TmpPortfolioNavvsIndex16> TmpPortfolioNavvsIndex16s { get; set; } = null!;
    public virtual DbSet<TmpPortfolioNavvsIndex17> TmpPortfolioNavvsIndex17s { get; set; } = null!;
    public virtual DbSet<TmpPortfolioNavvsIndex18> TmpPortfolioNavvsIndex18s { get; set; } = null!;
    public virtual DbSet<TmpPortfolioNavvsIndex19> TmpPortfolioNavvsIndex19s { get; set; } = null!;
    public virtual DbSet<TmpPortfolioNavvsIndex2> TmpPortfolioNavvsIndex2s { get; set; } = null!;
    public virtual DbSet<TmpPortfolioNavvsIndex21> TmpPortfolioNavvsIndex21s { get; set; } = null!;
    public virtual DbSet<TmpPortfolioNavvsIndex27> TmpPortfolioNavvsIndex27s { get; set; } = null!;
    public virtual DbSet<TmpPortfolioNavvsIndex3> TmpPortfolioNavvsIndex3s { get; set; } = null!;
    public virtual DbSet<TmpPortfolioNavvsIndex30> TmpPortfolioNavvsIndex30s { get; set; } = null!;
    public virtual DbSet<TmpPortfolioNavvsIndex32> TmpPortfolioNavvsIndex32s { get; set; } = null!;
    public virtual DbSet<TmpPortfolioNavvsIndex33> TmpPortfolioNavvsIndex33s { get; set; } = null!;
    public virtual DbSet<TmpPortfolioNavvsIndex34> TmpPortfolioNavvsIndex34s { get; set; } = null!;
    public virtual DbSet<TmpPortfolioNavvsIndex36> TmpPortfolioNavvsIndex36s { get; set; } = null!;
    public virtual DbSet<TmpPortfolioNavvsIndex4> TmpPortfolioNavvsIndex4s { get; set; } = null!;
    public virtual DbSet<TmpPortfolioNavvsIndex42> TmpPortfolioNavvsIndex42s { get; set; } = null!;
    public virtual DbSet<TmpPortfolioNavvsIndex47> TmpPortfolioNavvsIndex47s { get; set; } = null!;
    public virtual DbSet<TmpPortfolioNavvsIndex5> TmpPortfolioNavvsIndex5s { get; set; } = null!;
    public virtual DbSet<TmpPortfolioNavvsIndex6> TmpPortfolioNavvsIndex6s { get; set; } = null!;
    public virtual DbSet<TmpPortfolioNavvsIndex60> TmpPortfolioNavvsIndex60s { get; set; } = null!;
    public virtual DbSet<TmpPortfolioNavvsIndex62> TmpPortfolioNavvsIndex62s { get; set; } = null!;
    public virtual DbSet<TmpPortfolioNavvsIndex63> TmpPortfolioNavvsIndex63s { get; set; } = null!;
    public virtual DbSet<TmpPortfolioNavvsIndex65> TmpPortfolioNavvsIndex65s { get; set; } = null!;
    public virtual DbSet<TmpPortfolioNavvsIndex66> TmpPortfolioNavvsIndex66s { get; set; } = null!;
    public virtual DbSet<TmpPortfolioNavvsIndex69> TmpPortfolioNavvsIndex69s { get; set; } = null!;
    public virtual DbSet<TmpPortfolioNavvsIndex7> TmpPortfolioNavvsIndex7s { get; set; } = null!;
    public virtual DbSet<TmpPortfolioNavvsIndex72> TmpPortfolioNavvsIndex72s { get; set; } = null!;
    public virtual DbSet<TmpPortfolioNavvsIndex73> TmpPortfolioNavvsIndex73s { get; set; } = null!;
    public virtual DbSet<TmpPortfolioNavvsIndex78> TmpPortfolioNavvsIndex78s { get; set; } = null!;
    public virtual DbSet<TmpPortfolioNavvsIndex79> TmpPortfolioNavvsIndex79s { get; set; } = null!;
    public virtual DbSet<TmpPortfolioNavvsIndex8> TmpPortfolioNavvsIndex8s { get; set; } = null!;
    public virtual DbSet<TmpPortfolioNavvsIndex80> TmpPortfolioNavvsIndex80s { get; set; } = null!;
    public virtual DbSet<TmpPortfolioNavvsIndex81> TmpPortfolioNavvsIndex81s { get; set; } = null!;
    public virtual DbSet<TmpPortfolioNavvsIndex82> TmpPortfolioNavvsIndex82s { get; set; } = null!;
    public virtual DbSet<TmpPortfolioNavvsIndex84> TmpPortfolioNavvsIndex84s { get; set; } = null!;
    public virtual DbSet<TmpPortfolioNavvsIndex88> TmpPortfolioNavvsIndex88s { get; set; } = null!;
    public virtual DbSet<TmpPortfolioNavvsIndex89> TmpPortfolioNavvsIndex89s { get; set; } = null!;
    public virtual DbSet<TmpPortfolioNavvsIndex9> TmpPortfolioNavvsIndex9s { get; set; } = null!;
    public virtual DbSet<TmpPortfolioNavvsIndex90> TmpPortfolioNavvsIndex90s { get; set; } = null!;
    public virtual DbSet<TmpPortfolioNavvsIndex92> TmpPortfolioNavvsIndex92s { get; set; } = null!;
    public virtual DbSet<TmpPortfolioNavvsIndex93> TmpPortfolioNavvsIndex93s { get; set; } = null!;
    public virtual DbSet<TmpPortfolioNavvsIndex94> TmpPortfolioNavvsIndex94s { get; set; } = null!;
    public virtual DbSet<TmpPortfolioNavvsIndex99> TmpPortfolioNavvsIndex99s { get; set; } = null!;
    public virtual DbSet<TmpPortfolioNavvsindex1> TmpPortfolioNavvsindex1s { get; set; } = null!;
    public virtual DbSet<TmpRedemptionRequest> TmpRedemptionRequests { get; set; } = null!;
    public virtual DbSet<TmpSalesAdvisorReport> TmpSalesAdvisorReports { get; set; } = null!;
    public virtual DbSet<TmpSqlTable> TmpSqlTables { get; set; } = null!;
    public virtual DbSet<TmpUnBalancedPostingBizUnit> TmpUnBalancedPostingBizUnits { get; set; } = null!;
    public virtual DbSet<TmpValuation01> TmpValuation01s { get; set; } = null!;
    public virtual DbSet<TmpValuation02> TmpValuation02s { get; set; } = null!;
    public virtual DbSet<TmpValuation03> TmpValuation03s { get; set; } = null!;
    public virtual DbSet<TmpValuation04> TmpValuation04s { get; set; } = null!;
    public virtual DbSet<TmpValuation05> TmpValuation05s { get; set; } = null!;
    public virtual DbSet<TmpValuation06> TmpValuation06s { get; set; } = null!;
    public virtual DbSet<TmpValuation4AssetMgr01> TmpValuation4AssetMgr01s { get; set; } = null!;
    public virtual DbSet<TmpValuation4AssetMgr02> TmpValuation4AssetMgr02s { get; set; } = null!;
    public virtual DbSet<TmpValuation4AssetMgr03> TmpValuation4AssetMgr03s { get; set; } = null!;
    public virtual DbSet<TmpValuationBond> TmpValuationBonds { get; set; } = null!;
    public virtual DbSet<TmpValuationCash> TmpValuationCashes { get; set; } = null!;
    public virtual DbSet<TmpValuationEquity> TmpValuationEquities { get; set; } = null!;
    public virtual DbSet<TmpValuationMoneyMkt> TmpValuationMoneyMkts { get; set; } = null!;
    public virtual DbSet<TmpValuationSummary> TmpValuationSummaries { get; set; } = null!;
    public virtual DbSet<TopManagement> TopManagements { get; set; } = null!;
    public virtual DbSet<TrailBalance> TrailBalances { get; set; } = null!;
    public virtual DbSet<TransMarket> TransMarkets { get; set; } = null!;
    public virtual DbSet<TransactionTrail> TransactionTrails { get; set; } = null!;
    public virtual DbSet<UnPostedCashBook> UnPostedCashBooks { get; set; } = null!;
    public virtual DbSet<UpdateClientId> UpdateClientIds { get; set; } = null!;
    public virtual DbSet<ValuationCheck> ValuationChecks { get; set; } = null!;
    public virtual DbSet<ValuationHistory> ValuationHistories { get; set; } = null!;
    public virtual DbSet<ValuationHistorySave> ValuationHistorySaves { get; set; } = null!;
    public virtual DbSet<VariableAssetClass> VariableAssetClasses { get; set; } = null!;
    public virtual DbSet<VariableAssetClassMapping> VariableAssetClassMappings { get; set; } = null!;
    public virtual DbSet<ViewAiicoX> ViewAiicoXes { get; set; } = null!;
    public virtual DbSet<ViewBankBalance> ViewBankBalances { get; set; } = null!;
    public virtual DbSet<ViewFixedIncomeReminder> ViewFixedIncomeReminders { get; set; } = null!;
    public virtual DbSet<ViewInvestmentSummary4Grapgh> ViewInvestmentSummary4Grapghs { get; set; } = null!;
    public virtual DbSet<ViewPortfolioPerformance> ViewPortfolioPerformances { get; set; } = null!;
    public virtual DbSet<VofPropertyDetail> VofPropertyDetails { get; set; } = null!;
    public virtual DbSet<VofPropertyMaster> VofPropertyMasters { get; set; } = null!;
    public virtual DbSet<Vw104ValuationSummary> Vw104ValuationSummaries { get; set; } = null!;
    public virtual DbSet<Vw105ValuationSummary> Vw105ValuationSummaries { get; set; } = null!;
    public virtual DbSet<Vw106ValuationSummary> Vw106ValuationSummaries { get; set; } = null!;
    public virtual DbSet<Vw107ValuationSummary> Vw107ValuationSummaries { get; set; } = null!;
    public virtual DbSet<Vw10ValuationSummary> Vw10ValuationSummaries { get; set; } = null!;
    public virtual DbSet<Vw120ValuationSummary> Vw120ValuationSummaries { get; set; } = null!;
    public virtual DbSet<Vw12ValuationSummary> Vw12ValuationSummaries { get; set; } = null!;
    public virtual DbSet<Vw16ValuationSummary> Vw16ValuationSummaries { get; set; } = null!;
    public virtual DbSet<Vw17ValuationSummary> Vw17ValuationSummaries { get; set; } = null!;
    public virtual DbSet<Vw18ValuationSummary> Vw18ValuationSummaries { get; set; } = null!;
    public virtual DbSet<Vw19ValuationSummary> Vw19ValuationSummaries { get; set; } = null!;
    public virtual DbSet<Vw1ValuationSummary> Vw1ValuationSummaries { get; set; } = null!;
    public virtual DbSet<Vw21ValuationSummary> Vw21ValuationSummaries { get; set; } = null!;
    public virtual DbSet<Vw27ValuationSummary> Vw27ValuationSummaries { get; set; } = null!;
    public virtual DbSet<Vw2ValuationSummary> Vw2ValuationSummaries { get; set; } = null!;
    public virtual DbSet<Vw30ValuationSummary> Vw30ValuationSummaries { get; set; } = null!;
    public virtual DbSet<Vw32ValuationSummary> Vw32ValuationSummaries { get; set; } = null!;
    public virtual DbSet<Vw33ValuationSummary> Vw33ValuationSummaries { get; set; } = null!;
    public virtual DbSet<Vw34ValuationSummary> Vw34ValuationSummaries { get; set; } = null!;
    public virtual DbSet<Vw36ValuationSummary> Vw36ValuationSummaries { get; set; } = null!;
    public virtual DbSet<Vw3ValuationSummary> Vw3ValuationSummaries { get; set; } = null!;
    public virtual DbSet<Vw42ValuationSummary> Vw42ValuationSummaries { get; set; } = null!;
    public virtual DbSet<Vw47ValuationSummary> Vw47ValuationSummaries { get; set; } = null!;
    public virtual DbSet<Vw4ValuationSummary> Vw4ValuationSummaries { get; set; } = null!;
    public virtual DbSet<Vw5ValuationSummary> Vw5ValuationSummaries { get; set; } = null!;
    public virtual DbSet<Vw60ValuationSummary> Vw60ValuationSummaries { get; set; } = null!;
    public virtual DbSet<Vw62ValuationSummary> Vw62ValuationSummaries { get; set; } = null!;
    public virtual DbSet<Vw63ValuationSummary> Vw63ValuationSummaries { get; set; } = null!;
    public virtual DbSet<Vw65ValuationSummary> Vw65ValuationSummaries { get; set; } = null!;
    public virtual DbSet<Vw66ValuationSummary> Vw66ValuationSummaries { get; set; } = null!;
    public virtual DbSet<Vw69ValuationSummary> Vw69ValuationSummaries { get; set; } = null!;
    public virtual DbSet<Vw6ValuationSummary> Vw6ValuationSummaries { get; set; } = null!;
    public virtual DbSet<Vw72ValuationSummary> Vw72ValuationSummaries { get; set; } = null!;
    public virtual DbSet<Vw73ValuationSummary> Vw73ValuationSummaries { get; set; } = null!;
    public virtual DbSet<Vw78ValuationSummary> Vw78ValuationSummaries { get; set; } = null!;
    public virtual DbSet<Vw79ValuationSummary> Vw79ValuationSummaries { get; set; } = null!;
    public virtual DbSet<Vw7ValuationSummary> Vw7ValuationSummaries { get; set; } = null!;
    public virtual DbSet<Vw80ValuationSummary> Vw80ValuationSummaries { get; set; } = null!;
    public virtual DbSet<Vw81ValuationSummary> Vw81ValuationSummaries { get; set; } = null!;
    public virtual DbSet<Vw82ValuationSummary> Vw82ValuationSummaries { get; set; } = null!;
    public virtual DbSet<Vw84ValuationSummary> Vw84ValuationSummaries { get; set; } = null!;
    public virtual DbSet<Vw88ValuationSummary> Vw88ValuationSummaries { get; set; } = null!;
    public virtual DbSet<Vw89ValuationSummary> Vw89ValuationSummaries { get; set; } = null!;
    public virtual DbSet<Vw8ValuationSummary> Vw8ValuationSummaries { get; set; } = null!;
    public virtual DbSet<Vw90ValuationSummary> Vw90ValuationSummaries { get; set; } = null!;
    public virtual DbSet<Vw92ValuationSummary> Vw92ValuationSummaries { get; set; } = null!;
    public virtual DbSet<Vw93ValuationSummary> Vw93ValuationSummaries { get; set; } = null!;
    public virtual DbSet<Vw94ValuationSummary> Vw94ValuationSummaries { get; set; } = null!;
    public virtual DbSet<Vw99ValuationSummary> Vw99ValuationSummaries { get; set; } = null!;
    public virtual DbSet<Vw9ValuationSummary> Vw9ValuationSummaries { get; set; } = null!;
    public virtual DbSet<VwBizUnitTrialBalance> VwBizUnitTrialBalances { get; set; } = null!;
    public virtual DbSet<VwBondPortfolio> VwBondPortfolios { get; set; } = null!;
    public virtual DbSet<VwBrokerBalance> VwBrokerBalances { get; set; } = null!;
    public virtual DbSet<VwPreference> VwPreferences { get; set; } = null!;
    public virtual DbSet<VwTmpvaluation01> VwTmpvaluation01s { get; set; } = null!;
    public virtual DbSet<VwValuationSummary> VwValuationSummaries { get; set; } = null!;
    public virtual DbSet<WebFeedBack> WebFeedBacks { get; set; } = null!;
    public virtual DbSet<WebFeedBackType> WebFeedBackTypes { get; set; } = null!;
    public virtual DbSet<WebPortfolioContributorAccount> WebPortfolioContributorAccounts { get; set; } = null!;
    public virtual DbSet<WebPortfolioContributorRedemption> WebPortfolioContributorRedemptions { get; set; } = null!;
    public virtual DbSet<WebRca> WebRcas { get; set; } = null!;
    public virtual DbSet<WithholdingTax4Aiico> WithholdingTax4Aiicos { get; set; } = null!;
    public virtual DbSet<WalletTransaction> WalletTransactions { get; set; } = null!;



    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<ActLog>(entity =>
        {
            entity.HasKey(e => e.IdActLog);

            entity.ToTable("ActLog");

            entity.HasIndex(e => new { e.Date, e.Time }, "ACTL_K_DATE");

            entity.HasIndex(e => new { e.Procname, e.Date, e.Time }, "ACTL_K_PROCNAME");

            entity.HasIndex(e => new { e.Recordid, e.Filename, e.Date, e.Time }, "ACTL_K_RECORDID");

            entity.HasIndex(e => new { e.Userid, e.Date, e.Time }, "ACTL_K_USERID");

            entity.HasIndex(e => e.Memopointer, "Key_ActLog_Memopointer")
                .IsUnique();

            entity.Property(e => e.IdActLog).HasColumnName("ID_ActLog");

            entity.Property(e => e.ChangeTimeStamp).HasColumnType("datetime");

            entity.Property(e => e.Computername)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("COMPUTERNAME");

            entity.Property(e => e.Date).HasColumnName("DATE");

            entity.Property(e => e.Deletedfilename)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DELETEDFILENAME");

            entity.Property(e => e.Delpointer).HasColumnName("DELPOINTER");

            entity.Property(e => e.Fieldname)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("FIELDNAME");

            entity.Property(e => e.Filename)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("FILENAME");

            entity.Property(e => e.Memopointer).HasColumnName("MEMOPOINTER");

            entity.Property(e => e.Newvalue)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("NEWVALUE");

            entity.Property(e => e.Oldvalue)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("OLDVALUE");

            entity.Property(e => e.Primafield)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("PRIMAFIELD");

            entity.Property(e => e.Procname)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("PROCNAME");

            entity.Property(e => e.Recordid)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("RECORDID")
                .IsFixedLength();

            entity.Property(e => e.Recordid2)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("RECORDID2")
                .IsFixedLength();

            entity.Property(e => e.Time).HasColumnName("TIME");

            entity.Property(e => e.Type)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("TYPE")
                .IsFixedLength();

            entity.Property(e => e.User1)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("USER1");

            entity.Property(e => e.User2)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("USER2");

            entity.Property(e => e.User3)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("USER3");

            entity.Property(e => e.User4)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("USER4");

            entity.Property(e => e.Userid)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("USERID");
        });

        modelBuilder.Entity<ActLogM>(entity =>
        {
            entity.HasNoKey();

            entity.ToTable("ActLogM");

            entity.HasIndex(e => e.Memopointer, "ACTM_K_MEMOPOINTER");

            entity.Property(e => e.Memopointer).HasColumnName("MEMOPOINTER");

            entity.Property(e => e.Newmemo)
                .HasMaxLength(19)
                .IsUnicode(false)
                .HasColumnName("NEWMEMO");

            entity.Property(e => e.Oldmemo)
                .HasMaxLength(19)
                .IsUnicode(false)
                .HasColumnName("OLDMEMO");
        });

        modelBuilder.Entity<ActualIncome>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("Actual_Income");

            entity.Property(e => e.ActualIncome1)
                .HasColumnType("decimal(38, 2)")
                .HasColumnName("ActualIncome");

            entity.Property(e => e.Being)
                .HasMaxLength(150)
                .IsUnicode(false);

            entity.Property(e => e.Description)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.Property(e => e.IdInvestmentType)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("ID_InvestmentType");

            entity.Property(e => e.IdPortfolio).HasColumnName("id_portfolio");

            entity.Property(e => e.Portfolio)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.Valuedate).HasColumnType("datetime");
        });

        modelBuilder.Entity<AiicoDataReportTb>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("Aiico_Data_Report_TB");

            entity.Property(e => e.CostOfAsset).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.Description)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.Property(e => e.EffectiveDate).HasColumnType("datetime");

            entity.Property(e => e.FaceAmount).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.Id2link).HasColumnName("ID2Link");

            entity.Property(e => e.IdPortfolio).HasColumnName("ID_Portfolio");

            entity.Property(e => e.InterestRate).HasColumnType("decimal(18, 8)");

            entity.Property(e => e.MaturityDate).HasColumnType("datetime");

            entity.Property(e => e.Portfolio)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.ValuationDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<AllInvestmentType>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("AllInvestmentTypes");

            entity.Property(e => e.IdInv)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("ID_Inv");

            entity.Property(e => e.IdInvestmentType)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("ID_InvestmentType");

            entity.Property(e => e.InvestmentTitle)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<AnReport>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("AnReport");

            entity.Property(e => e.AnnualId)
                .ValueGeneratedOnAdd()
                .HasColumnName("AnnualID");

            entity.Property(e => e.BonusCloseDate).HasColumnType("datetime");

            entity.Property(e => e.BonusClosureDate).HasColumnType("datetime");

            entity.Property(e => e.BonusFor)
                .HasMaxLength(4)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.BonusRate)
                .HasMaxLength(4)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.Eps)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("EPS");

            entity.Property(e => e.FinYear)
                .HasMaxLength(4)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.IdCorporateActionMaster).HasColumnName("ID_CorporateActionMaster");

            ;

            entity.Property(e => e.PeRatio)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("PE_Ratio");

            entity.Property(e => e.ProfitAfterTax).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.ProfitAfterTaxQ1).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.ProfitAfterTaxQ2).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.ProfitAfterTaxQ3).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.Rating)
                .HasMaxLength(10)
                .IsUnicode(false);

            entity.Property(e => e.ShareId).HasColumnName("ShareID");

            entity.Property(e => e.ShareInIssue).HasColumnType("decimal(24, 0)");

            entity.Property(e => e.Symbol)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.TurnOver).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.TurnOverQ1).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.TurnOverQ2).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.TurnOverQ3).HasColumnType("decimal(18, 2)");
        });

        modelBuilder.Entity<AnReportOld>(entity =>
        {
            entity.HasKey(e => e.AnnualId)
                .HasName("KeyAnualReport");

            entity.ToTable("AnReport_OLD");

            entity.HasIndex(e => e.ShareId, "KeyShareID");

            entity.HasIndex(e => new { e.ShareId, e.FinYear }, "KeyYearEnd")
                .IsUnique();

            entity.Property(e => e.AnnualId).HasColumnName("AnnualID");

            entity.Property(e => e.BonusCloseDate).HasColumnType("datetime");

            entity.Property(e => e.BonusClosureDate).HasColumnType("datetime");

            entity.Property(e => e.BonusFor)
                .HasMaxLength(4)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.BonusRate)
                .HasMaxLength(4)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.Eps)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("EPS");

            entity.Property(e => e.FinYear)
                .HasMaxLength(4)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.IdCorporateActionMaster).HasColumnName("ID_CorporateActionMaster");

            
                
                

            entity.Property(e => e.PeRatio)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("PE_Ratio");

            entity.Property(e => e.ProfitAfterTax).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.ProfitAfterTaxQ1).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.ProfitAfterTaxQ2).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.ProfitAfterTaxQ3).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.Rating)
                .HasMaxLength(10)
                .IsUnicode(false);

            entity.Property(e => e.ShareId).HasColumnName("ShareID");

            entity.Property(e => e.ShareInIssue).HasColumnType("decimal(24, 0)");

            entity.Property(e => e.Symbol)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.TurnOver).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.TurnOverQ1).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.TurnOverQ2).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.TurnOverQ3).HasColumnType("decimal(18, 2)");
        });

        modelBuilder.Entity<AppendSignature>(entity =>
        {
            entity.HasKey(e => e.IdAppendSignature);

            entity.ToTable("AppendSignature");

            entity.Property(e => e.IdAppendSignature).HasColumnName("ID_AppendSignature");

            entity.Property(e => e.Amount).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.Comments).HasColumnType("text");

            entity.Property(e => e.CreationDate).HasColumnType("datetime");

            entity.Property(e => e.IdDealTerminate).HasColumnName("ID_DealTerminate");

            entity.Property(e => e.IdEquityMandateToBrokers).HasColumnName("ID_EquityMandateToBrokers");

            entity.Property(e => e.IdLoanMandateMaster).HasColumnName("ID_LoanMandateMaster");

            entity.Property(e => e.IdMatureDealMaster).HasColumnName("ID_MatureDealMaster");

            entity.Property(e => e.IdMoneyMarketExposureMaster).HasColumnName("ID_MoneyMarketExposureMaster");

            entity.Property(e => e.IdPortfolio).HasColumnName("ID_Portfolio");

            entity.Property(e => e.Sign1Date).HasColumnType("datetime");

            entity.Property(e => e.Sign1Id).HasColumnName("Sign1ID");

            entity.Property(e => e.Sign2Date).HasColumnType("datetime");

            entity.Property(e => e.Sign2Id).HasColumnName("Sign2ID");

            entity.Property(e => e.Status)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.TransactionNarration)
                .HasMaxLength(100)
                .IsUnicode(false);
        });

        modelBuilder.Entity<AppendSignatureSave>(entity =>
        {
            entity.HasNoKey();

            entity.ToTable("AppendSignature_Save");

            entity.Property(e => e.Amount).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.Comments).HasColumnType("text");

            entity.Property(e => e.CreationDate).HasColumnType("datetime");

            entity.Property(e => e.IdAppendSignature).HasColumnName("ID_AppendSignature");

            entity.Property(e => e.IdDealTerminate).HasColumnName("ID_DealTerminate");

            entity.Property(e => e.IdEquityMandateToBrokers).HasColumnName("ID_EquityMandateToBrokers");

            entity.Property(e => e.IdLoanMandateMaster).HasColumnName("ID_LoanMandateMaster");

            entity.Property(e => e.IdMatureDealMaster).HasColumnName("ID_MatureDealMaster");

            entity.Property(e => e.IdMoneyMarketExposureMaster).HasColumnName("ID_MoneyMarketExposureMaster");

            entity.Property(e => e.IdPortfolio).HasColumnName("ID_Portfolio");

            entity.Property(e => e.Sign1Date).HasColumnType("datetime");

            entity.Property(e => e.Sign1Id).HasColumnName("Sign1ID");

            entity.Property(e => e.Sign2Date).HasColumnType("datetime");

            entity.Property(e => e.Sign2Id).HasColumnName("Sign2ID");

            entity.Property(e => e.Status)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.TransactionNarration)
                .HasMaxLength(100)
                .IsUnicode(false);
        });

        modelBuilder.Entity<AssetClassCompliance>(entity =>
        {
            entity.HasKey(e => e.IdAssetClassCompliance);

            entity.ToTable("AssetClassCompliance");

            entity.HasIndex(e => e.IdVariableAssetClass, "Key_AssetClassCompliance_ID_InvestmentType");

            entity.HasIndex(e => new { e.IdAssetClassComplianceMaster, e.IdVariableAssetClass }, "Key_AssetClassCompliance_Unique")
                .IsUnique();

            entity.Property(e => e.IdAssetClassCompliance).HasColumnName("ID_AssetClassCompliance");

            entity.Property(e => e.IdAssetClassComplianceMaster).HasColumnName("ID_AssetClassComplianceMaster");

            entity.Property(e => e.IdInvestmentType)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("ID_InvestmentType");

            entity.Property(e => e.IdVariableAssetClass)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("ID_VariableAssetClass");

            entity.Property(e => e.MaxInvPercent).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.MinInvPercent).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.TargetInvPercent).HasColumnType("decimal(18, 2)");
        });

        modelBuilder.Entity<AssetClassComplianceMaster>(entity =>
        {
            entity.HasKey(e => e.IdAssetClassComplianceMaster);

            entity.ToTable("AssetClassComplianceMaster");

            entity.Property(e => e.IdAssetClassComplianceMaster).HasColumnName("ID_AssetClassComplianceMaster");

            entity.Property(e => e.ApprovalDate).HasColumnType("datetime");

            entity.Property(e => e.ApprovedBy)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.CaptureDate).HasColumnType("datetime");

            entity.Property(e => e.CapturedBy)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.Comments).HasColumnType("text");

            entity.Property(e => e.EffectiveDate).HasColumnType("datetime");

            entity.Property(e => e.IdPortfolio).HasColumnName("ID_Portfolio");

            entity.Property(e => e.Narration)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.Property(e => e.Status)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<AuditChangeLog>(entity =>
        {
            entity.HasKey(e => e.AuditLogId)
                .HasName("PK_dbo.AuditChangeLog");

            entity.ToTable("AuditChangeLog");

            entity.Property(e => e.ActionPerformed).HasMaxLength(20);

            entity.Property(e => e.AuditDate).HasColumnType("datetime");

            entity.Property(e => e.EntityName).HasMaxLength(350);

            entity.Property(e => e.IdApplication)
                .HasMaxLength(4)
                .HasColumnName("ID_Application");

            entity.Property(e => e.PrimaryKeyValue).HasMaxLength(350);

            entity.Property(e => e.PropertyName).HasMaxLength(350);

            entity.Property(e => e.RemoteIpaddress)
                .HasMaxLength(20)
                .HasColumnName("RemoteIPAddress");

            entity.Property(e => e.Username).HasMaxLength(50);
        });

        modelBuilder.Entity<AuditLog>(entity =>
        {
            entity.HasKey(e => e.IdAuditLog);

            entity.ToTable("AuditLog");

            entity.HasIndex(e => e.Changetimestamp, "Key_AuditLog_ChangeTimeStamp");

            entity.HasIndex(e => new { e.UserId, e.Changetimestamp }, "Key_AuditLog_UserID_Datetime");

            entity.Property(e => e.IdAuditLog).HasColumnName("ID_AuditLog");

            entity.Property(e => e.Changetimestamp).HasColumnType("datetime");

            entity.Property(e => e.ComputerName)
                .HasMaxLength(30)
                .IsUnicode(false);

            entity.Property(e => e.Fieldname)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.Property(e => e.Filename)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.Property(e => e.NewValue).IsUnicode(false);

            entity.Property(e => e.OldValue).IsUnicode(false);

            entity.Property(e => e.Primafield)
                .HasMaxLength(30)
                .IsUnicode(false);

            entity.Property(e => e.ProcName)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.Property(e => e.Udf01)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("UDF01");

            entity.Property(e => e.Udf02)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("UDF02");

            entity.Property(e => e.UserId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("UserID");
        });

        modelBuilder.Entity<BalanceBandFactor>(entity =>
        {
            entity.HasKey(e => e.IdBalanceBandFactor);

            entity.ToTable("BalanceBandFactor");

            entity.Property(e => e.IdBalanceBandFactor).HasColumnName("ID_BalanceBandFactor");

            entity.Property(e => e.Factor).HasColumnType("decimal(10, 4)");

            entity.Property(e => e.MaxValue).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.MinValue).HasColumnType("decimal(18, 2)");

            
                
                
        });

        modelBuilder.Entity<Bank>(entity =>
        {
            entity.HasIndex(e => e.Title, "KeyTitle4")
                .IsUnique();

            entity.Property(e => e.BankId).HasColumnName("BankID");

            entity.Property(e => e.GlactNo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("GLActNo")
                .IsFixedLength();

            
                
                

            entity.Property(e => e.Title)
                .HasMaxLength(20)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<BankingSoftware>(entity =>
        {
            entity.HasKey(e => e.IdBankSoftware);

            entity.ToTable("BankingSoftware");

            entity.HasIndex(e => e.SoftwareName, "Key_BankingSoftware_Name")
                .IsUnique();

            entity.HasIndex(e => e.SoftCode, "Key_BankingSoftware_SoftCode")
                .IsUnique();

            entity.Property(e => e.IdBankSoftware).HasColumnName("ID_BankSoftware");

            entity.Property(e => e.AsciiFormat)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.ExportHeader)
                .HasMaxLength(100)
                .IsUnicode(false);

            
                
                

            entity.Property(e => e.SaveAsFormat)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.SeparateXter)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.SoftCode)
                .HasMaxLength(4)
                .IsUnicode(false);

            entity.Property(e => e.SoftwareName)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<BiinvestmentType>(entity =>
        {
            entity.HasNoKey();

            entity.ToTable("BIInvestmentType");

            entity.Property(e => e.Arrangement)
                .HasMaxLength(2)
                .IsUnicode(false);

            entity.Property(e => e.IdInvestmentType)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("ID_InvestmentType");

            entity.Property(e => e.InvestmentClass)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.InvestmentType)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.IssueBasedOn)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.IssuerBasedOn)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.MaxPerIssue).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.MaxPerIssuer).HasColumnType("decimal(18, 2)");

            ;

            entity.Property(e => e.RegulatoryMax).HasColumnType("decimal(18, 2)");
        });

        modelBuilder.Entity<BivaluationHistory>(entity =>
        {
            entity.HasKey(e => e.IdValuation)
                .HasName("PK__BIValuationHisto__51A00D40");

            entity.ToTable("BIValuationHistory");

            entity.Property(e => e.IdValuation).HasColumnName("ID_Valuation");

            entity.Property(e => e.AssetValue).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.Commission).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.CostOfAsset).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.CurMrkPrice).HasColumnType("decimal(18, 8)");

            entity.Property(e => e.ExpectedBonus).HasColumnType("decimal(24, 4)");

            entity.Property(e => e.ExpectedDividend).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.GainLoss).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.Id2link).HasColumnName("ID2Link");

            entity.Property(e => e.IdCustomer).HasColumnName("ID_Customer");

            entity.Property(e => e.IdInv)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("ID_Inv");

            entity.Property(e => e.IdInvestmentType)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("ID_InvestmentType");

            entity.Property(e => e.IdPortfolio).HasColumnName("ID_Portfolio");

            entity.Property(e => e.Interest2Date).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.InvestmentModule)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            ;

            entity.Property(e => e.NseCscsfees)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("NseCSCSFees");

            entity.Property(e => e.OtherFees).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.Qty).HasColumnType("decimal(24, 4)");

            entity.Property(e => e.SecFees).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.StampDuty).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.TransactionCost).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.ValuationDate).HasColumnType("datetime");

            entity.Property(e => e.Vat)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VAT");

            entity.Property(e => e.VoucherNo)
                .HasMaxLength(10)
                .IsUnicode(false);

            entity.Property(e => e.WithholdingTax).HasColumnType("decimal(18, 2)");
        });

        modelBuilder.Entity<BondAmortStraightLine>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("Bond_Amort_StraightLine");

            entity.Property(e => e.Amortised).HasColumnType("decimal(38, 6)");

            entity.Property(e => e.AssetValue).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.CleanAmount)
                .HasColumnType("decimal(38, 6)")
                .HasColumnName("CleanAMount");

            entity.Property(e => e.CostPrice).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.DailywriteoffIn)
                .HasColumnType("decimal(38, 13)")
                .HasColumnName("DAILYWRITEOFF/IN");

            entity.Property(e => e.EffectiveDate).HasColumnType("datetime");

            entity.Property(e => e.EndDate).HasColumnType("datetime");

            entity.Property(e => e.FixedInterestRate).HasColumnType("decimal(18, 8)");

            entity.Property(e => e.Id2link).HasColumnName("ID2Link");

            entity.Property(e => e.IdInvestmentType)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("ID_InvestmentType");

            entity.Property(e => e.IdPortfolio).HasColumnName("ID_Portfolio");

            entity.Property(e => e.IdTreatmentType)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("ID_TreatmentType");

            entity.Property(e => e.Interest2Date).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.NorminalCost).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.Premdiscount)
                .HasColumnType("decimal(38, 13)")
                .HasColumnName("PREMDISCOUNT");

            entity.Property(e => e.Symbol)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.Unamortised).HasColumnType("decimal(38, 6)");

            entity.Property(e => e.ValuationDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<BondInv>(entity =>
        {
            entity.ToTable("Bond_INV$");

            entity.Property(e => e.Id).HasColumnName("ID");
        });

        modelBuilder.Entity<BondPriceAlert>(entity =>
        {
            entity.HasKey(e => e.IdBondPriceAlert);

            entity.ToTable("BondPriceAlert");

            entity.Property(e => e.IdBondPriceAlert).HasColumnName("ID_BondPriceAlert");

            entity.Property(e => e.DateCreated).HasColumnType("datetime");

            entity.Property(e => e.DateTriggered).HasColumnType("datetime");

            entity.Property(e => e.Symbol).HasMaxLength(100);

            entity.Property(e => e.Type)
                .HasMaxLength(1)
                .IsFixedLength();

            entity.Property(e => e.UserName)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<BondResult>(entity =>
        {
            entity.HasNoKey();

            entity.ToTable("Bond_Result");

            entity.Property(e => e.Bondid).HasColumnName("bondid");

            entity.Property(e => e.CustIntrest).HasColumnType("decimal(31, 2)");

            entity.Property(e => e.CustNoNom).HasColumnType("decimal(31, 4)");

            entity.Property(e => e.EndDate).HasColumnType("datetime");

            entity.Property(e => e.IdBondRawData).HasColumnName("ID_BondRawData");

            entity.Property(e => e.IdBondResult)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID_BondResult");

            entity.Property(e => e.InterestRate).HasColumnType("decimal(31, 2)");

            entity.Property(e => e.IssueDate).HasColumnType("datetime");

            entity.Property(e => e.MaturityDate).HasColumnType("datetime");

            entity.Property(e => e.NetAmount).HasColumnType("decimal(31, 2)");

            entity.Property(e => e.Premium).HasColumnType("decimal(31, 2)");

            entity.Property(e => e.ShortName)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .IsUnicode(false);

            entity.Property(e => e.TotalCost).HasColumnType("decimal(31, 2)");

            entity.Property(e => e.TranCode)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.ValueDate).HasColumnType("datetime");

            entity.Property(e => e.WeightReturns).HasColumnType("decimal(18, 8)");

            entity.Property(e => e.WeightedAverage).HasColumnType("decimal(18, 8)");
        });

        modelBuilder.Entity<BondRptAiico>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("BondRPT_AIICO");

            entity.Property(e => e.AssetValue).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.CostOfAsset).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.DailywriteoffIn)
                .HasColumnType("decimal(38, 13)")
                .HasColumnName("DAILYWRITEOFF/IN");

            entity.Property(e => e.EffectiveDate).HasColumnType("datetime");

            entity.Property(e => e.Id2link).HasColumnName("ID2Link");

            entity.Property(e => e.IdPortfolio).HasColumnName("ID_Portfolio");

            entity.Property(e => e.Interest2Date).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.Interestaccured)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("INTERESTACCURED");

            entity.Property(e => e.Marketvalue)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("MARKETVALUE");

            entity.Property(e => e.Narration)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.NorminalCost).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.Premdiscount)
                .HasColumnType("decimal(38, 13)")
                .HasColumnName("PREMDISCOUNT");

            entity.Property(e => e.Symbol)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.ValuationDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<Bondrecon>(entity =>
        {
            entity.HasNoKey();

            entity.ToTable("bondrecon");

            entity.Property(e => e.AccrCoupon).HasColumnName("ACCR# COUPON");

            entity.Property(e => e.AccruedInterestThisCouponPeriod).HasColumnName("ACCRUED INTEREST - THIS COUPON PERIOD");

            entity.Property(e => e.AmortizationDate)
                .HasColumnType("datetime")
                .HasColumnName("AMORTIZATION DATE");

            entity.Property(e => e.AmountAmortizedUpToDec312010)
                .HasMaxLength(255)
                .HasColumnName("AMOUNT AMORTIZED - UP TO DEC 31, 2010");

            entity.Property(e => e.BondParticulars)
                .HasMaxLength(255)
                .HasColumnName("BOND PARTICULARS");

            entity.Property(e => e.Bondid)
                .HasMaxLength(255)
                .HasColumnName("bondid");

            entity.Property(e => e.CostPurchasePrice).HasColumnName("COST/PURCHASE PRICE");

            entity.Property(e => e.CouponRate).HasColumnName("COUPON RATE");

            entity.Property(e => e.CurrentValue)
                .HasMaxLength(255)
                .HasColumnName("CURRENT VALUE");

            entity.Property(e => e.DailyPremium).HasColumnName("DAILY PREMIUM");

            entity.Property(e => e.F21).HasMaxLength(255);

            entity.Property(e => e.FaceValue).HasColumnName("FACE VALUE");

            entity.Property(e => e.IssueDate)
                .HasColumnType("datetime")
                .HasColumnName("ISSUE DATE");

            entity.Property(e => e.LastCouponPymtDateB4Purchase)
                .HasColumnType("datetime")
                .HasColumnName("LAST COUPON PYMT DATE (B4 PURCHASE)");

            entity.Property(e => e.LastCouponPymtDateThisCouponPeriod)
                .HasColumnType("datetime")
                .HasColumnName("LAST COUPON PYMT DATE (THIS COUPON PERIOD)");

            entity.Property(e => e.MaturityDate)
                .HasColumnType("datetime")
                .HasColumnName("MATURITY DATE");

            entity.Property(e => e.NetPremium).HasColumnName("NET PREMIUM");

            entity.Property(e => e.NoOfDays).HasColumnName("NO# OF DAYS");

            entity.Property(e => e.NoOfDaysThisCouponPeriod).HasColumnName("NO OF DAYS - THIS COUPON PERIOD");

            entity.Property(e => e.NoOfDaysToMaturity).HasColumnName("NO# OF DAYS TO MATURITY");

            entity.Property(e => e.NoOfDaysValueDateToDec312010)
                .HasMaxLength(255)
                .HasColumnName("NO# OF DAYS (VALUE DATE TO DEC 31, 2010");

            entity.Property(e => e.PremiumAccrCouponAsAtPurchaseDate).HasColumnName("PREMIUM + ACCR# COUPON (AS AT PURCHASE DATE)");

            entity.Property(e => e.UnamortizedPremium)
                .HasMaxLength(255)
                .HasColumnName("UNAMORTIZED PREMIUM ");

            entity.Property(e => e.ValueDate)
                .HasColumnType("datetime")
                .HasColumnName("VALUE DATE");
        });

        modelBuilder.Entity<BorrowAmortSchedule>(entity =>
        {
            entity.HasKey(e => e.IdBorrowAmortSchedule);

            entity.ToTable("BorrowAmortSchedule");

            entity.Property(e => e.IdBorrowAmortSchedule).HasColumnName("ID_BorrowAmortSchedule");

            entity.Property(e => e.AllCharges).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.CapitalisedPostedInterest).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.CloseBalance).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.DueDate).HasColumnType("datetime");

            entity.Property(e => e.GlPostPeriod)
                .HasMaxLength(6)
                .IsUnicode(false);

            entity.Property(e => e.GlpostDate)
                .HasColumnType("datetime")
                .HasColumnName("GLPostDate");

            entity.Property(e => e.IdBorrowMaster).HasColumnName("ID_BorrowMaster");

            entity.Property(e => e.IntAmount).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.IntPerDay).HasColumnType("decimal(18, 8)");

            entity.Property(e => e.OpenBalance).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.PrnAmount).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.RentalAmount).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.ReversalId).HasColumnName("ReversalID");

            entity.Property(e => e.TerminationType)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.Utid).HasColumnName("UTID");

            entity.Property(e => e.VoucherNo)
                .HasMaxLength(10)
                .IsUnicode(false);

            entity.Property(e => e.WithTaxAmount).HasColumnType("decimal(18, 2)");

            entity.HasOne(d => d.IdBorrowMasterNavigation)
                .WithMany(p => p.BorrowAmortSchedules)
                .HasForeignKey(d => d.IdBorrowMaster)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_BorrowAmortSchedule_BorrowMaster");
        });

        modelBuilder.Entity<BorrowBalance>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("BorrowBalances");

            entity.Property(e => e.Balance).HasColumnType("decimal(38, 2)");

            entity.Property(e => e.IdBorrowMaster)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID_BorrowMaster");
        });

        modelBuilder.Entity<BorrowCashMgtAccount>(entity =>
        {
            entity.HasKey(e => e.IdCashMgtAccount);

            entity.ToTable("BorrowCashMgtAccount");

            entity.HasIndex(e => e.CashMgtAccountName, "Key_BorrowCashMgtAccount_CashMgtActName")
                .IsUnique();

            entity.Property(e => e.IdCashMgtAccount)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("ID_CashMgtAccount")
                .IsFixedLength();

            entity.Property(e => e.CashMgtAccountName)
                .HasMaxLength(150)
                .IsUnicode(false);

            entity.Property(e => e.GlactNo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("GLActNo");

            entity.Property(e => e.TransactionType)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<BorrowCashMgtDateUpdate>(entity =>
        {
            entity.HasKey(e => e.IdBorrowCashMgtDateUpdate);

            entity.ToTable("BorrowCashMgtDateUpdate");

            entity.Property(e => e.IdBorrowCashMgtDateUpdate).HasColumnName("ID_BorrowCashMgtDateUpdate");

            entity.Property(e => e.ApprovalDate).HasColumnType("datetime");

            entity.Property(e => e.ApprovedBy)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.ChangeFromDate).HasColumnType("datetime");

            entity.Property(e => e.ChangeToDate).HasColumnType("datetime");

            entity.Property(e => e.IdPortfolioContributor).HasColumnName("ID_PortfolioContributor");

            entity.Property(e => e.IdPortfolioContributorAccount).HasColumnName("ID_PortfolioContributorAccount");

            entity.Property(e => e.ReasonForChange)
                .HasMaxLength(150)
                .IsUnicode(false);

            entity.Property(e => e.RequestBy)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.RequestDate).HasColumnType("datetime");

            entity.Property(e => e.Status)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<BorrowInternalTransfer>(entity =>
        {
            entity.HasKey(e => e.IdBorrowInternalTransfer);

            entity.ToTable("BorrowInternalTransfer");

            entity.Property(e => e.IdBorrowInternalTransfer).HasColumnName("ID_BorrowInternalTransfer");

            entity.Property(e => e.Amount).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.Comments).HasColumnType("text");

            entity.Property(e => e.FromBorrowId).HasColumnName("From_BorrowID");

            entity.Property(e => e.FromIdConrtributor).HasColumnName("From_ID_Conrtributor");

            entity.Property(e => e.GlpostDate)
                .HasColumnType("datetime")
                .HasColumnName("GLPostDate");

            entity.Property(e => e.IdBranch)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("ID_Branch");

            entity.Property(e => e.IdCurrency)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("ID_Currency");

            entity.Property(e => e.IdPortfolio).HasColumnName("ID_Portfolio");

            entity.Property(e => e.Narration)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.PostedBy)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.PrepairedBy)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.Status)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.ToBorrowId).HasColumnName("To_BorrowID");

            entity.Property(e => e.ToIdConrtributor).HasColumnName("To_ID_Conrtributor");

            entity.Property(e => e.TransferDate).HasColumnType("datetime");

            entity.Property(e => e.TransferType)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.VoucherNo)
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<BorrowMaster>(entity =>
        {
            entity.HasKey(e => e.IdBorrowMaster);

            entity.ToTable("BorrowMaster");

            entity.Property(e => e.IdBorrowMaster).HasColumnName("ID_BorrowMaster");

            entity.Property(e => e.Agent01)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("Agent_01");

            entity.Property(e => e.Agent02)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("Agent_02");

            entity.Property(e => e.Amt2Add).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.Amt2Withdraw).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.ApprovedBy)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.ApprovedDate).HasColumnType("datetime");

            entity.Property(e => e.AutoRollOverType)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.AvailmentFees).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.AvailmentFeesRate).HasColumnType("decimal(18, 4)");

            entity.Property(e => e.BestFaceValue).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.BorrowAmount).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.BorrowNumber)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.Property(e => e.BrokerId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("BrokerID");

            entity.Property(e => e.CalculationMethod)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.CapturedBy)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.CapturedDate)
                .HasColumnType("datetime")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.Com1Rate).HasColumnType("decimal(18, 4)");

            entity.Property(e => e.Com2Rate).HasColumnType("decimal(18, 4)");

            entity.Property(e => e.ComisionRate).HasColumnType("decimal(18, 8)");

            entity.Property(e => e.CommisionAmount).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.CurExRate).HasColumnType("decimal(18, 6)");

            entity.Property(e => e.CustodyFeeRate).HasColumnType("decimal(18, 8)");

            entity.Property(e => e.CustodyFees).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.DeductInterestEvery)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.DeductStampDuty).HasColumnType("decimal(18, 1)");

            entity.Property(e => e.Description)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.Property(e => e.EffectiveDate).HasColumnType("datetime");

            entity.Property(e => e.EffectiveYield).HasColumnType("decimal(24, 15)");

            entity.Property(e => e.ExtBorrowNumber)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.Property(e => e.FaceAmount).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.FirstPaymentDueDate).HasColumnType("datetime");

            entity.Property(e => e.Id2Cr).HasColumnName("ID_2_CR");

            entity.Property(e => e.IdBorrowType)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("ID_BorrowType");

            entity.Property(e => e.IdBranch)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("ID_Branch");

            entity.Property(e => e.IdCro).HasColumnName("ID_CRO");

            entity.Property(e => e.IdCurrency)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("ID_Currency");

            entity.Property(e => e.IdLocation)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("ID_Location");

            entity.Property(e => e.IdMoneyMarketQoutation2BorrowSlip).HasColumnName("ID_MoneyMarketQoutation2BorrowSlip");

            entity.Property(e => e.IdPortfolioContributor).HasColumnName("ID_PortfolioContributor");

            entity.Property(e => e.IdPortfolioContributorBranch).HasColumnName("ID_PortfolioContributorBranch");

            entity.Property(e => e.IdPortfolioOwner).HasColumnName("ID_Portfolio_Owner");

            entity.Property(e => e.IdProductLine)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("ID_ProductLine");

            entity.Property(e => e.IdSignature).HasColumnName("ID_Signature");

            entity.Property(e => e.InterestAmount).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.InterestMode)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.InterestRate).HasColumnType("decimal(18, 8)");

            entity.Property(e => e.InvestmentType)
                .HasMaxLength(2)
                .IsUnicode(false);

            entity.Property(e => e.LegalFees).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.LegalFeesRate).HasColumnType("decimal(18, 4)");

            entity.Property(e => e.ManagementFees).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.ManagementFeesRate).HasColumnType("decimal(18, 4)");

            entity.Property(e => e.MaturityDate).HasColumnType("datetime");

            entity.Property(e => e.MaturityTreatment)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.MoratoriumInterest).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.NewMatureValue).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.Notes).HasColumnType("text");

            entity.Property(e => e.OriginalIdBorrowMaster).HasColumnName("Original_ID_BorrowMaster");

            entity.Property(e => e.OtherDeduction).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.OtherFees).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.OtherFeesRate).HasColumnType("decimal(18, 4)");

            entity.Property(e => e.PurchaseOption).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.PurchaseOptionRate).HasColumnType("decimal(18, 4)");

            entity.Property(e => e.RePayGap)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.RePaymentType)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.RentalAmount).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.ResidualRate).HasColumnType("decimal(18, 4)");

            entity.Property(e => e.ResidualValue).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.RolOverIntRate).HasColumnType("decimal(18, 8)");

            entity.Property(e => e.RollOverFromId).HasColumnName("RollOverFrom_ID");

            entity.Property(e => e.RollOverToId).HasColumnName("RollOverTo_ID");

            entity.Property(e => e.SettlementDate).HasColumnType("datetime");

            entity.Property(e => e.Status)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.StockExchangeId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("StockExchangeID");

            entity.Property(e => e.TbQtyBought)
                .HasColumnType("decimal(24, 4)")
                .HasColumnName("TB_QtyBought");

            entity.Property(e => e.TbQtySold)
                .HasColumnType("decimal(24, 4)")
                .HasColumnName("TB_QtySold");

            entity.Property(e => e.TotalFess).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.TransactionDate).HasColumnType("datetime");

            entity.Property(e => e.Ucid).HasColumnName("UCID");

            entity.Property(e => e.Utid).HasColumnName("UTID");

            entity.Property(e => e.VatAmount).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.WhtRate)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.WithholdTaxAmount).HasColumnType("decimal(18, 2)");

            entity.HasOne(d => d.IdBorrowTypeNavigation)
                .WithMany(p => p.BorrowMasters)
                .HasForeignKey(d => d.IdBorrowType)
                .HasConstraintName("FK_BorrowMaster_BorrowType");
        });

        modelBuilder.Entity<BorrowRateTable>(entity =>
        {
            entity.HasKey(e => e.IdBorrowRateTable);

            entity.ToTable("BorrowRateTable");

            entity.Property(e => e.IdBorrowRateTable).HasColumnName("ID_BorrowRateTable");

            entity.Property(e => e.CaptureDate).HasColumnType("datetime");

            entity.Property(e => e.CapturedBy)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.Comments).HasColumnType("text");

            entity.Property(e => e.EffectiveDate).HasColumnType("datetime");

            entity.Property(e => e.FromAmount).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.IdBorrowType)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("ID_BorrowType");

            entity.Property(e => e.IntRate).HasColumnType("decimal(18, 8)");

            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.ModifiedDate).HasColumnType("datetime");

            entity.Property(e => e.ToAmount).HasColumnType("decimal(18, 2)");

            entity.HasOne(d => d.IdBorrowTypeNavigation)
                .WithMany(p => p.BorrowRateTables)
                .HasForeignKey(d => d.IdBorrowType)
                .HasConstraintName("FK_BorrowRateTable_BorrowType");
        });

        modelBuilder.Entity<BorrowReceipt>(entity =>
        {
            entity.HasKey(e => e.IdBorrowReceipt)
                .HasName("PK_BorrowHistory");

            entity.ToTable("BorrowReceipt");

            entity.Property(e => e.IdBorrowReceipt).HasColumnName("ID_BorrowReceipt");

            entity.Property(e => e.Amount).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.Being)
                .HasMaxLength(200)
                .IsUnicode(false);

            entity.Property(e => e.CheqNo)
                .HasMaxLength(10)
                .IsUnicode(false);

            entity.Property(e => e.DueDate).HasColumnType("datetime");

            entity.Property(e => e.ExtraInterest).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.GlPostPeriod)
                .HasMaxLength(6)
                .IsUnicode(false);

            entity.Property(e => e.GlpostDate)
                .HasColumnType("datetime")
                .HasColumnName("GLPostDate");

            entity.Property(e => e.IdBankAccount)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("ID_BankAccount");

            entity.Property(e => e.IdBorrowInternalTransfer).HasColumnName("ID_BorrowInternalTransfer");

            entity.Property(e => e.IdBorrowMaster).HasColumnName("ID_BorrowMaster");

            entity.Property(e => e.IdBorrowTerminate).HasColumnName("ID_BorrowTerminate");

            entity.Property(e => e.Interest).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.InterestAdjustment).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.Principal).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.ProfitLoss).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.ReceiptNo)
                .HasMaxLength(10)
                .IsUnicode(false);

            entity.Property(e => e.ReceiptType)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.ReceivedFrom)
                .HasMaxLength(200)
                .IsUnicode(false);

            entity.Property(e => e.ReversalDate).HasColumnType("datetime");

            entity.Property(e => e.ReversalId).HasColumnName("ReversalID");

            entity.Property(e => e.SettlementDate).HasColumnType("datetime");

            entity.Property(e => e.SourceBankId)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("SourceBankID");

            entity.Property(e => e.StampDutyAmount).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.Status)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.TransactionDate).HasColumnType("datetime");

            entity.Property(e => e.Utid).HasColumnName("UTID");

            entity.Property(e => e.Valuedate).HasColumnType("datetime");

            entity.Property(e => e.VoucherNo)
                .HasMaxLength(10)
                .IsUnicode(false);

            entity.Property(e => e.WithHoldTax).HasColumnType("decimal(18, 2)");

            entity.HasOne(d => d.IdBorrowMasterNavigation)
                .WithMany(p => p.BorrowReceipts)
                .HasForeignKey(d => d.IdBorrowMaster)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_BorrowReceipt_BorrowMaster");
        });

        modelBuilder.Entity<BorrowRequisition>(entity =>
        {
            entity.HasKey(e => e.IdBorrowRequisition);

            entity.ToTable("BorrowRequisition");

            entity.Property(e => e.IdBorrowRequisition).HasColumnName("ID_BorrowRequisition");

            entity.Property(e => e.Amount).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.ApprovedBy)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.BankAccountName)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.Property(e => e.BankAccountNo)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.Being)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.Property(e => e.BrokerId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("BrokerID");

            entity.Property(e => e.CapturedBy)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.Comments).HasColumnType("text");

            entity.Property(e => e.Commision).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.Extrainterest).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.GlPostPeriod)
                .HasMaxLength(6)
                .IsUnicode(false);

            entity.Property(e => e.GlpostDate)
                .HasColumnType("datetime")
                .HasColumnName("GLPostDate");

            entity.Property(e => e.IdBank)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("ID_Bank");

            entity.Property(e => e.IdBankAccount)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("ID_BankAccount");

            entity.Property(e => e.IdBorrowMaster).HasColumnName("ID_BorrowMaster");

            entity.Property(e => e.IntAmount).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.Payee)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.PrnAmount).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.RequestDate).HasColumnType("datetime");

            entity.Property(e => e.RequestType)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.ReversalId).HasColumnName("ReversalID");

            entity.Property(e => e.SettlementDate).HasColumnType("datetime");

            entity.Property(e => e.Status)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.Utid).HasColumnName("UTID");

            entity.Property(e => e.VoucherNo)
                .HasMaxLength(10)
                .IsUnicode(false);

            entity.Property(e => e.WithTaxAmount).HasColumnType("decimal(18, 2)");
        });

        modelBuilder.Entity<BorrowTempAmortSchedule>(entity =>
        {
            entity.HasKey(e => e.IdBorrowTempAmortSchedule);

            entity.ToTable("BorrowTempAmortSchedule");

            entity.Property(e => e.IdBorrowTempAmortSchedule).HasColumnName("ID_BorrowTempAmortSchedule");

            entity.Property(e => e.CapitalisedPostedInterest).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.CloseBalance).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.DueDate).HasColumnType("datetime");

            entity.Property(e => e.GlPostPeriod)
                .HasMaxLength(6)
                .IsUnicode(false);

            entity.Property(e => e.GlpostDate)
                .HasColumnType("datetime")
                .HasColumnName("GLPostDate");

            entity.Property(e => e.IdBorrowMaster).HasColumnName("ID_BorrowMaster");

            entity.Property(e => e.IdBorrowTerminate).HasColumnName("ID_BorrowTerminate");

            entity.Property(e => e.IntAmount).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.IntPerDay).HasColumnType("decimal(18, 8)");

            entity.Property(e => e.OpenBalance).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.PrnAmount).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.RentalAmount).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.ReversalId).HasColumnName("ReversalID");

            entity.Property(e => e.Utid).HasColumnName("UTID");

            entity.Property(e => e.VoucherNo)
                .HasMaxLength(10)
                .IsUnicode(false);

            entity.Property(e => e.WithTaxAmount).HasColumnType("decimal(18, 2)");
        });

        modelBuilder.Entity<BorrowTerminate>(entity =>
        {
            entity.HasKey(e => e.IdBorrowTerminate);

            entity.ToTable("BorrowTerminate");

            entity.Property(e => e.IdBorrowTerminate).HasColumnName("ID_BorrowTerminate");

            entity.Property(e => e.Accrual2Reverse).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.Adjustment).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.Amount2Add).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.Amount2Pay).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.Amount2Withdraw).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.ApprovedBy)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.ApprovedDate).HasColumnType("datetime");

            entity.Property(e => e.BookingDate).HasColumnType("datetime");

            entity.Property(e => e.BorrowAccountBalance).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.CapturedBy)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.CapturedDate)
                .HasColumnType("datetime")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.Comments).HasColumnType("text");

            entity.Property(e => e.ContactPerson)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.Property(e => e.DeductStampDuty).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.DiscountRate).HasColumnType("decimal(18, 8)");

            entity.Property(e => e.EffectiveYield).HasColumnType("decimal(24, 15)");

            entity.Property(e => e.FirstPaymentDueDate).HasColumnType("datetime");

            entity.Property(e => e.Fv2withDraw)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("FV2WithDraw");

            entity.Property(e => e.GlPostPeriod)
                .HasMaxLength(6)
                .IsUnicode(false);

            entity.Property(e => e.GlpostDate)
                .HasColumnType("datetime")
                .HasColumnName("GLPostDate");

            entity.Property(e => e.IdBorrowMaster).HasColumnName("ID_BorrowMaster");

            entity.Property(e => e.IdBranch)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("ID_Branch");

            entity.Property(e => e.IdSettlementModes).HasColumnName("ID_SettlementModes");

            entity.Property(e => e.IdSignature).HasColumnName("ID_Signature");

            entity.Property(e => e.Int2Maturity).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.IntCharges).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.IntPayGap)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.InterestEarned).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.InterestMode)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.InterestRate).HasColumnType("decimal(18, 8)");

            entity.Property(e => e.IssueType)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.LastPostDate).HasColumnType("datetime");

            entity.Property(e => e.MarketValue).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.MaturityDate).HasColumnType("datetime");

            entity.Property(e => e.MoratoriumInterest).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.NewEffectiveDate).HasColumnType("datetime");

            entity.Property(e => e.NewEffectiveYield).HasColumnType("decimal(28, 15)");

            entity.Property(e => e.NewFaceValue).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.NorminalValue).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.Penalty2Duduct).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.PostedWithTaxBf)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("PostedWithTax_bf");

            entity.Property(e => e.Principal).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.PrnPayGap)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.ProfitOrLoss).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.PurchaseOption).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.RePayGap)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.RefNo)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.Property(e => e.RefundAmount).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.RefundWitholdingTax).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.RentalAmount).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.ResidualRate).HasColumnType("decimal(18, 4)");

            entity.Property(e => e.ResidualValue).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.ReverseTransFees).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.RounUpDiff).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.SettlementDate).HasColumnType("datetime");

            entity.Property(e => e.SoldToCustomerId).HasColumnName("Sold_To_CustomerID");

            entity.Property(e => e.Status)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.TerminationDate).HasColumnType("datetime");

            entity.Property(e => e.TerminationReason)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.Property(e => e.TerminationType)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.UnPostedTransFees).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.UnitCost).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.Utid).HasColumnName("UTID");

            entity.Property(e => e.VoucherNo)
                .HasMaxLength(10)
                .IsUnicode(false);

            entity.Property(e => e.WithHoldTaxAmount).HasColumnType("decimal(18, 2)");

            entity.HasOne(d => d.IdBorrowMasterNavigation)
                .WithMany(p => p.BorrowTerminates)
                .HasForeignKey(d => d.IdBorrowMaster)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_BorrowTerminate_BorrowMaster");
        });

        modelBuilder.Entity<BorrowTmpPayoutSchedule>(entity =>
        {
            entity.HasKey(e => e.IdBorrowTmpPayoutSchedule);

            entity.ToTable("BorrowTmpPayoutSchedule");

            entity.Property(e => e.IdBorrowTmpPayoutSchedule).HasColumnName("ID_BorrowTmpPayoutSchedule");

            entity.Property(e => e.Amount).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.Amount2Pay).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.BeginDate).HasColumnType("datetime");

            entity.Property(e => e.CustomerName)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.Property(e => e.EndDate).HasColumnType("datetime");

            entity.Property(e => e.IdBorrowMaster).HasColumnName("ID_BorrowMaster");

            entity.Property(e => e.IdCurrency)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("ID_Currency");

            entity.Property(e => e.IdPortfolio).HasColumnName("ID_Portfolio");

            entity.Property(e => e.IdPortfolioContributor).HasColumnName("ID_PortfolioContributor");

            entity.Property(e => e.WithHoldTaxAmount).HasColumnType("decimal(18, 2)");
        });

        modelBuilder.Entity<BorrowType>(entity =>
        {
            entity.HasKey(e => e.IdBorrowType);

            entity.ToTable("BorrowType");

            entity.Property(e => e.IdBorrowType)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("ID_BorrowType");

            entity.Property(e => e.BorrowAccrualActNo)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.BorrowAccrualActNoCcenter)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("BorrowAccrualActNo_CCenter");

            entity.Property(e => e.BorrowExpenseActNo)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.BorrowExpenseActNoCcenter)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("BorrowExpenseActNo_CCenter");

            entity.Property(e => e.BorrowMainActNo)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.BorrowMainActNoCcenter)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("BorrowMainActNo_CCenter");

            entity.Property(e => e.BorrowType1)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("BorrowType");

            entity.Property(e => e.CalculationMethod)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.Com1Rate).HasColumnType("decimal(18, 8)");

            entity.Property(e => e.Com2Rate).HasColumnType("decimal(18, 8)");

            entity.Property(e => e.CustodyFeeRate).HasColumnType("decimal(18, 8)");

            entity.Property(e => e.IdBizUnit)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("ID_BizUnit");

            entity.Property(e => e.IdInvestmentType)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("ID_InvestmentType");

            entity.Property(e => e.IdPortfolio).HasColumnName("ID_Portfolio");

            entity.Property(e => e.MgtFeeActNo)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.MgtFeeActNoCcenter)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("MgtFeeActNo_CCenter");

            entity.Property(e => e.MgtFeesRate).HasColumnType("decimal(18, 8)");

            entity.Property(e => e.PartialPenaltyRate).HasColumnType("decimal(18, 8)");

            entity.Property(e => e.PartialPercentOfTenor).HasColumnType("decimal(18, 8)");

            entity.Property(e => e.PenaltyActNo)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.PenaltyFixedAmount).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.PenaltyRate).HasColumnType("decimal(18, 8)");

            entity.Property(e => e.TerminationPenaltyType)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.Upid).HasColumnName("UPID");
        });

        modelBuilder.Entity<BorrowingTransactionFee>(entity =>
        {
            entity.HasKey(e => e.IdBorrowingTransactionFees);

            entity.Property(e => e.IdBorrowingTransactionFees).HasColumnName("ID_BorrowingTransactionFees");

            entity.Property(e => e.Amount).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.CashPostDate).HasColumnType("datetime");

            entity.Property(e => e.FeesType)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.GlpostDate)
                .HasColumnType("datetime")
                .HasColumnName("GLPostDate");

            entity.Property(e => e.IdBorrowMaster).HasColumnName("ID_BorrowMaster");

            entity.Property(e => e.Narration)
                .HasMaxLength(200)
                .IsUnicode(false);

            entity.Property(e => e.Posted2Gl).HasColumnName("Posted2GL");

            entity.Property(e => e.ReversalId).HasColumnName("ReversalID");

            entity.Property(e => e.Utid).HasColumnName("UTID");

            entity.Property(e => e.ValueDate).HasColumnType("datetime");

            entity.Property(e => e.VoucherNo)
                .HasMaxLength(10)
                .IsUnicode(false);

            entity.HasOne(d => d.IdBorrowMasterNavigation)
                .WithMany(p => p.BorrowingTransactionFees)
                .HasForeignKey(d => d.IdBorrowMaster)
                .HasConstraintName("FK_BorrowingTransactionFees_BorrowMaster");
        });

        modelBuilder.Entity<Branch>(entity =>
        {
            entity.HasIndex(e => e.Title, "KeyTitle5")
                .IsUnique();

            entity.Property(e => e.BranchId).HasColumnName("BranchID");

            
                
                

            entity.Property(e => e.Post2Gl).HasColumnName("Post2GL");

            entity.Property(e => e.Title)
                .HasMaxLength(40)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<BranchReturn>(entity =>
        {
            entity.HasKey(e => e.Sncode);

            entity.ToTable("BranchReturn");

            entity.Property(e => e.Sncode).HasColumnName("SNCode");

            entity.Property(e => e.BranchAddress)
                .HasMaxLength(30)
                .IsUnicode(false);

            entity.Property(e => e.BranchCode)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.BranchName)
                .HasMaxLength(30)
                .IsUnicode(false);

            entity.Property(e => e.City)
                .HasMaxLength(30)
                .IsUnicode(false);

            entity.Property(e => e.DAte)
                .HasColumnType("datetime")
                .HasColumnName("D_ate");

            entity.Property(e => e.Fax)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.Lga)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("LGA");

            
                
                

            entity.Property(e => e.PfaCode)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("PFA_Code");

            entity.Property(e => e.PfaName)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("PFA_Name");

            entity.Property(e => e.State)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.StateCode)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("State_Code");

            entity.Property(e => e.Telephone)
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Broker>(entity =>
        {
            entity.HasIndex(e => e.Name, "KeyName1")
                .IsUnique();

            entity.HasIndex(e => e.BrokerId, "Key_Brokers_BrokerID")
                .IsUnique();

            entity.HasIndex(e => e.Ucid, "Key_Brokers_UCID");

            entity.Property(e => e.Id).HasColumnName("ID");

            entity.Property(e => e.Address1)
                .HasMaxLength(30)
                .IsUnicode(false);

            entity.Property(e => e.Address2)
                .HasMaxLength(30)
                .IsUnicode(false);

            entity.Property(e => e.BankActNo)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.BankAddreess).HasColumnType("text");

            entity.Property(e => e.BrokerId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("BrokerID");

            entity.Property(e => e.BrokerType)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.BrokerageRate).HasColumnType("decimal(18, 4)");

            entity.Property(e => e.ContactPerson)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.Cscsid)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("CSCSID");

            entity.Property(e => e.Director1Name)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.Director2Name)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.Email)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("EMail");

            entity.Property(e => e.FaxNumber)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.IdBank)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("ID_Bank");

            entity.Property(e => e.IdState)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("ID_State");

            
                
                

            entity.Property(e => e.Name)
                .HasMaxLength(40)
                .IsUnicode(false);

            entity.Property(e => e.SellBrokerageRate)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("Sell_BrokerageRate");

            entity.Property(e => e.Telephone1)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.Telephone2)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.Ucid).HasColumnName("UCID");
        });

        modelBuilder.Entity<BuildTreasury>(entity =>
        {
            entity.HasKey(e => e.IdDealAmortSchedule);

            entity.ToTable("BuildTreasury");

            entity.Property(e => e.IdDealAmortSchedule).HasColumnName("ID_DealAmortSchedule");

            entity.Property(e => e.CapitalisedPostedInterest).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.CloseBalance).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.DueDate).HasColumnType("datetime");

            entity.Property(e => e.IdDealMaster).HasColumnName("ID_DealMaster");

            entity.Property(e => e.IntAmount).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.IntPerDay).HasColumnType("decimal(31, 15)");

            entity.Property(e => e.OpenBalance).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.PrnAmount).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.RentalAmount).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.ReversalId).HasColumnName("ReversalID");

            entity.Property(e => e.UniqueUserId)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("UniqueUserID");

            entity.Property(e => e.WithTaxAmount).HasColumnType("decimal(18, 2)");
        });

        modelBuilder.Entity<CapitalisationIndex>(entity =>
        {
            entity.HasNoKey();

            entity.ToTable("Capitalisation_index");

            entity.Property(e => e.Col001)
                .HasMaxLength(8000)
                .IsUnicode(false);

            entity.Property(e => e.Col002)
                .HasMaxLength(8000)
                .IsUnicode(false);

            entity.Property(e => e.Col003)
                .HasMaxLength(8000)
                .IsUnicode(false);

            entity.Property(e => e.Id)
                .ValueGeneratedOnAdd()
                .HasColumnName("id");
        });

        modelBuilder.Entity<Cart>(entity =>
        {
            entity.HasKey(e => e.RecordId);

            entity.ToTable("Cart");

            entity.Property(e => e.Amount).HasColumnType("decimal(18, 0)");

            entity.Property(e => e.CartId).HasMaxLength(500);

            entity.Property(e => e.Count).HasDefaultValueSql("((1))");

            entity.Property(e => e.DateCreated).HasColumnType("datetime");
        });

        modelBuilder.Entity<CheckScriptRun>(entity =>
        {
            entity.HasNoKey();

            entity.ToTable("CheckScriptRun");
        });

        modelBuilder.Entity<CliType>(entity =>
        {
            entity.HasKey(e => e.TypeId)
                .HasName("KeyClientID");

            entity.HasIndex(e => e.Title, "KeyTitle")
                .IsUnique();

            entity.Property(e => e.TypeId).HasColumnName("TypeID");

            
                
                

            entity.Property(e => e.Title)
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<CommOnTbils4aiico>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("CommOnTbils_4Aiico");

            entity.Property(e => e.ComisionRate).HasColumnType("decimal(18, 8)");

            entity.Property(e => e.CommisionAmount).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.DealType)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.Description)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.Property(e => e.EffectiveDate).HasColumnType("datetime");

            entity.Property(e => e.FaceAmount).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.IdDealMaster).HasColumnName("ID_DealMaster");

            entity.Property(e => e.IdDealType)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("ID_DealType");

            entity.Property(e => e.IdPortfolio).HasColumnName("ID_Portfolio");

            entity.Property(e => e.MaturityDate).HasColumnType("datetime");

            entity.Property(e => e.Portfolio)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Company>(entity =>
        {
            entity.HasKey(e => e.ReportHeader);

            entity.ToTable("Company");

            entity.Property(e => e.ReportHeader)
                .HasMaxLength(100)
                .IsUnicode(false);

            
                
                
        });

        modelBuilder.Entity<CompanyProfile>(entity =>
        {
            entity.HasKey(e => e.PfaCode);

            entity.ToTable("CompanyProfile");

            entity.Property(e => e.PfaCode)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("PFA_Code");

            entity.Property(e => e.Address1)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Address_1");

            entity.Property(e => e.AuditAddress1)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Audit_Address_1");

            entity.Property(e => e.AuditAddress2)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Audit_Address_2");

            entity.Property(e => e.AuditCity1)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("Audit_City_1");

            entity.Property(e => e.AuditCity2)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("Audit_City_2");

            entity.Property(e => e.AuditFax1)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("Audit_Fax_1");

            entity.Property(e => e.AuditFax2)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("Audit_Fax_2");

            entity.Property(e => e.AuditFirm1)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("Audit_Firm_1");

            entity.Property(e => e.AuditFirm2)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("Audit_Firm_2");

            entity.Property(e => e.AuditPhone1)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("Audit_Phone_1");

            entity.Property(e => e.AuditPhone2)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("Audit_Phone_2");

            entity.Property(e => e.AuditState1)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("Audit_State_1");

            entity.Property(e => e.AuditState2)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("Audit_State_2");

            entity.Property(e => e.AuditStateCode1)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("Audit_State_Code_1");

            entity.Property(e => e.AuditStateCode2)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("Audit_State_Code_2");

            entity.Property(e => e.AuditorsNo1).HasColumnName("Auditors_No_1");

            entity.Property(e => e.AuditorsNo2).HasColumnName("Auditors_No_2");

            entity.Property(e => e.BranchesApproved).HasColumnName("Branches_Approved");

            entity.Property(e => e.BranchesNotApproved).HasColumnName("Branches_not_Approved");

            entity.Property(e => e.City1)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("City_1");

            entity.Property(e => e.ComDate)
                .HasColumnType("datetime")
                .HasColumnName("COM_Date");

            entity.Property(e => e.EMailAddy)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("E_mailAddy");

            entity.Property(e => e.ForeignInv).HasColumnName("Foreign_INV");

            entity.Property(e => e.InstInv).HasColumnName("Inst_INV");

            entity.Property(e => e.LicNo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("Lic_no");

            
                
                

            entity.Property(e => e.NoOfAuditors).HasColumnName("No_of_auditors");

            entity.Property(e => e.PfaFax1)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("PFA_Fax_1");

            entity.Property(e => e.PfaFax2)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("PFA_Fax_2");

            entity.Property(e => e.PfaName)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("PFA_Name");

            entity.Property(e => e.PfaTel1)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("PFA_Tel_1");

            entity.Property(e => e.PfaTel2)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("PFA_Tel_2");

            entity.Property(e => e.PrivateInv).HasColumnName("Private_INV");

            entity.Property(e => e.State)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.StateCode)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("State_Code");

            entity.Property(e => e.TotalBranches).HasColumnName("Total_Branches");

            entity.Property(e => e.TotalOrdShare).HasColumnName("Total_Ord_Share");

            entity.Property(e => e.YearEnd).HasColumnName("Year_End");
        });

        modelBuilder.Entity<ComplianceBreakCode>(entity =>
        {
            entity.HasKey(e => e.IdComplianceBreakCode);

            entity.ToTable("ComplianceBreakCode");

            entity.HasIndex(e => e.ComplianceBreakCode1, "Key_ComplianceBreakCode_ComplianceBreakCode")
                .IsUnique();

            entity.Property(e => e.IdComplianceBreakCode)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("ID_ComplianceBreakCode");

            entity.Property(e => e.ComplianceBreakCode1)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ComplianceBreakCode");

            
                
                
        });

        modelBuilder.Entity<ComplianceOverRideMaster>(entity =>
        {
            entity.HasKey(e => e.IdComplianceOverRideMaster);

            entity.ToTable("ComplianceOverRideMaster");

            entity.HasIndex(e => e.Narration, "Key_ComplianceOverRideMaster_Narration");

            entity.Property(e => e.IdComplianceOverRideMaster).HasColumnName("ID_ComplianceOverRideMaster");

            entity.Property(e => e.Comments).HasColumnType("text");

            entity.Property(e => e.FieldName)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.Property(e => e.InvestmentModule)
                .HasMaxLength(2)
                .IsUnicode(false);

            
                
                

            entity.Property(e => e.Narration)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.Property(e => e.OverRideBy)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.OverRideDate).HasColumnType("datetime");

            entity.Property(e => e.OverriderComments).HasColumnType("text");

            entity.Property(e => e.RequestDate).HasColumnType("datetime");

            entity.Property(e => e.RequestedBy)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.SqlTableName)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.Property(e => e.Status)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.ViewFormName)
                .HasMaxLength(100)
                .IsUnicode(false);
        });

        modelBuilder.Entity<ComplianceOverrideDetail>(entity =>
        {
            entity.HasKey(e => e.IdComplianceOverrideDetails);

            entity.Property(e => e.IdComplianceOverrideDetails).HasColumnName("ID_ComplianceOverrideDetails");

            entity.Property(e => e.BreakNotes).HasColumnType("text");

            entity.Property(e => e.IdComplianceBreakCode)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("ID_ComplianceBreakCode");

            entity.Property(e => e.IdComplianceOverrideMaster).HasColumnName("ID_ComplianceOverrideMaster");

            entity.Property(e => e.IdInvestmentType)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("ID_InvestmentType");

            
                
                
        });

        modelBuilder.Entity<ContCount>(entity =>
        {
            entity.HasNoKey();

            entity.ToTable("ContCount");

            entity.Property(e => e.AgentCode).HasMaxLength(50);

            entity.Property(e => e.State).HasMaxLength(30);
        });

        modelBuilder.Entity<CorporateClientSignatory>(entity =>
        {
            entity.HasKey(e => e.IdCorporateClientSignatory)
                .HasName("PK_Signatory_1");

            entity.ToTable("CorporateClientSignatory");

            entity.Property(e => e.IdCorporateClientSignatory).HasColumnName("ID_CorporateClientSignatory");

            entity.Property(e => e.Bvn)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("BVN");

            entity.Property(e => e.Designation)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.Email)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.Property(e => e.FullName)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.IdPortfolioContributor).HasColumnName("ID_PortfolioContributor");

            entity.Property(e => e.MobileNo)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<CounterPartyComplance>(entity =>
        {
            entity.HasKey(e => e.IdCounterPartyComplance);

            entity.ToTable("CounterPartyComplance");

            entity.HasIndex(e => e.IdCustomer, "Key_CounterPartyComplance_Customer");

            entity.HasIndex(e => e.IdPortfolio, "Key_CounterPartyComplance_Portfolio");

            entity.Property(e => e.IdCounterPartyComplance).HasColumnName("ID_CounterPartyComplance");

            entity.Property(e => e.BondExposure).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.BondLimit).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.CustomerExposure).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.CustomerLimit).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.EndDate).HasColumnType("datetime");

            entity.Property(e => e.EquityExposure).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.EquityLimit).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.IdCurrency)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("ID_Currency");

            entity.Property(e => e.IdCustomer).HasColumnName("ID_Customer");

            entity.Property(e => e.IdPortfolio).HasColumnName("ID_Portfolio");

            entity.Property(e => e.IdReateEngine).HasColumnName("ID_ReateEngine");

            entity.Property(e => e.MaxExposureRate).HasColumnType("decimal(18, 4)");

            entity.Property(e => e.MoneyMarketExposure).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.MoneyMarketLimit).HasColumnType("decimal(18, 2)");

            
                
                

            entity.Property(e => e.NetAssetValue).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.RealEstateExposure).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.RealEstateLimit).HasColumnType("decimal(18, 2)");
        });

        modelBuilder.Entity<CounterPartyGuarantee>(entity =>
        {
            entity.HasKey(e => e.IdCounterPartyGuarantee);

            entity.ToTable("CounterPartyGuarantee");

            entity.Property(e => e.IdCounterPartyGuarantee).HasColumnName("ID_CounterPartyGuarantee");

            entity.Property(e => e.BeginDate).HasColumnType("datetime");

            entity.Property(e => e.CaptureDate).HasColumnType("datetime");

            entity.Property(e => e.CapturedBy)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.Comments).HasColumnType("text");

            entity.Property(e => e.EndDate).HasColumnType("datetime");

            entity.Property(e => e.IdCustomer).HasColumnName("ID_Customer");

            
                
                

            entity.Property(e => e.ReceiveDate).HasColumnType("datetime");

            entity.Property(e => e.Status)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<Cpas2Gl>(entity =>
        {
            entity.HasNoKey();

            entity.ToTable("Cpas2GL");

            entity.Property(e => e.Acctname)
                .HasMaxLength(255)
                .HasColumnName("ACCTNAME");

            entity.Property(e => e.Acctno)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("ACCTNO");

            entity.Property(e => e.AcctnoParent)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("ACCTNO_PARENT");

            entity.Property(e => e.AcctnoPayable)
                .HasMaxLength(255)
                .HasColumnName("ACCTNO_PAYABLE");

            entity.Property(e => e.AcctnoReceivable)
                .HasMaxLength(255)
                .HasColumnName("ACCTNO_RECEIVABLE");

            entity.Property(e => e.Accttype)
                .HasMaxLength(255)
                .HasColumnName("ACCTTYPE");

            entity.Property(e => e.Assetclass)
                .HasMaxLength(255)
                .HasColumnName("ASSETCLASS");

            entity.Property(e => e.DataCategory)
                .HasMaxLength(255)
                .HasColumnName("DATA_CATEGORY");

            entity.Property(e => e.Id)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID");

            entity.Property(e => e.IsGl)
                .HasMaxLength(255)
                .HasColumnName("IS_GL");

            entity.Property(e => e.Mfr300)
                .HasMaxLength(255)
                .HasColumnName("MFR300");

            entity.Property(e => e.MoneytorCodes)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("MONEYTOR CODES");

            entity.Property(e => e.Pencomno).HasColumnName("PENCOMNO");

            entity.Property(e => e.Penrrsno).HasColumnName("PENRRSNO");

            entity.Property(e => e.Pmfr300)
                .HasMaxLength(255)
                .HasColumnName("PMFR300");

            entity.Property(e => e.ReportColumn).HasColumnName("REPORT_COLUMN");

            entity.Property(e => e.StoreEntries)
                .HasMaxLength(255)
                .HasColumnName("STORE_ENTRIES");

            entity.Property(e => e.Valureport)
                .HasMaxLength(255)
                .HasColumnName("VALUREPORT");
        });

        modelBuilder.Entity<CpasCcvlf>(entity =>
        {
            entity.HasKey(e => e.IdValuation);

            entity.ToTable("cpas_CCVLF");

            entity.Property(e => e.IdValuation).HasColumnName("ID_Valuation");

            entity.Property(e => e.Amortized2Date).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.AssetValue).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.CostOfAsset).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.CurMrkPrice).HasColumnType("decimal(18, 8)");

            entity.Property(e => e.DailyAmortise).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.DailyInterest).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.EffectiveDate).HasColumnType("datetime");

            entity.Property(e => e.GainLoss).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.IdPortfolio).HasColumnName("ID_Portfolio");

            entity.Property(e => e.IntRate).HasColumnType("decimal(18, 4)");

            entity.Property(e => e.Interest2Date).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.InvestmentModule)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.MaturityDate).HasColumnType("datetime");

            entity.Property(e => e.PremiumDiscount)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.Qty).HasColumnType("decimal(24, 4)");

            entity.Property(e => e.Symbol)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.UnAmortized2Date).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.UnitCost).HasColumnType("decimal(24, 4)");

            entity.Property(e => e.ValuationDate).HasColumnType("datetime");

            entity.Property(e => e.WriteOffAmount).HasColumnType("decimal(18, 2)");
        });

        modelBuilder.Entity<Currency>(entity =>
        {
            entity.ToTable("Currency");

            entity.HasIndex(e => e.Title, "KeyTitle6")
                .IsUnique();

            entity.Property(e => e.CurrencyId)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("CurrencyID")
                .IsFixedLength();

            
                
                

            entity.Property(e => e.Title)
                .HasMaxLength(20)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<CurrencyAccountMapping>(entity =>
        {
            entity.HasKey(e => e.IdCurrencyAccountMapping);

            entity.ToTable("CurrencyAccountMapping");

            entity.Property(e => e.IdCurrencyAccountMapping).HasColumnName("ID_CurrencyAccountMapping");

            entity.Property(e => e.IdBankAccount)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ID_BankAccount");

            entity.Property(e => e.IdCashMgtAccountLogement)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ID_CashMgtAccountLogement");

            entity.Property(e => e.IdCashMgtAccountWithdrawal)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ID_CashMgtAccountWithdrawal");

            entity.Property(e => e.IdCurrency)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ID_Currency");
        });

        modelBuilder.Entity<Customer>(entity =>
        {
            entity.HasKey(e => e.IdCustomer);

            entity.ToTable("Customer");

            entity.HasIndex(e => e.RcNumber, "Key_Customer_RCNumber");

            entity.HasIndex(e => e.IdCustomer, "Key_Customer_UCID");

            entity.Property(e => e.IdCustomer).HasColumnName("ID_Customer");

            entity.Property(e => e.AccountName)
                .HasMaxLength(150)
                .IsUnicode(false);

            entity.Property(e => e.AccountNumber)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.Auditor1Name)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.Auditor2Name)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.BeneficiaryBank)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.Property(e => e.CompanyName)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.CompanyType)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.ContactPerson)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.CustCode)
                .HasMaxLength(10)
                .IsUnicode(false);

            entity.Property(e => e.DateOfIncorporation).HasColumnType("datetime");

            entity.Property(e => e.EMail)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("E_Mail");

            entity.Property(e => e.FaxNumber)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.FinYearEnd)
                .HasMaxLength(2)
                .IsUnicode(false);

            entity.Property(e => e.GsmPhone)
                .HasMaxLength(15)
                .IsUnicode(false);

            entity.Property(e => e.Iban)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("IBAN");

            entity.Property(e => e.IdBranch)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("ID_Branch");

            entity.Property(e => e.IdCountry)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("ID_Country");

            entity.Property(e => e.IdEconomicSector).HasColumnName("ID_EconomicSector");

            entity.Property(e => e.IdState)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("ID_State");

            entity.Property(e => e.LinkedTo)
                .HasMaxLength(100)
                .IsUnicode(false);

            
                
                

            entity.Property(e => e.OfficeAddress01)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Office_Address01");

            entity.Property(e => e.OfficeAddress02)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Office_Address02");

            entity.Property(e => e.OfficeTelephone01)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Office_Telephone01");

            entity.Property(e => e.OfficeTelephone02)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Office_Telephone02");

            entity.Property(e => e.PrincipalBusiness)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.QvCustomerId).HasColumnName("QV_CustomerID");

            entity.Property(e => e.Rating)
                .HasMaxLength(10)
                .IsUnicode(false);

            entity.Property(e => e.RcNumber)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("RC_Number");

            entity.Property(e => e.SendMailsTo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.SortCode)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.SwiftBic)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SwiftBIC");

            entity.Property(e => e.Ucid).HasColumnName("UCID");

            entity.Property(e => e.WebSite)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<CustomerBranch>(entity =>
        {
            entity.HasKey(e => e.IdCustomerBranch);

            entity.ToTable("CustomerBranch");

            entity.HasIndex(e => new { e.Name, e.IdCustomer }, "Key_CustomerBranch_Name")
                .IsUnique();

            entity.Property(e => e.IdCustomerBranch).HasColumnName("ID_CustomerBranch");

            entity.Property(e => e.AccountName)
                .HasMaxLength(150)
                .IsUnicode(false);

            entity.Property(e => e.AccountNumber)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.Address01)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("Address_01");

            entity.Property(e => e.Address02)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("Address_02");

            entity.Property(e => e.BeneficiaryBank)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.Property(e => e.ContactPerson)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.Property(e => e.EMail)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("E_Mail");

            entity.Property(e => e.Iban)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("IBAN");

            entity.Property(e => e.IdCustomer).HasColumnName("ID_Customer");

            entity.Property(e => e.IdState)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("ID_State");

            entity.Property(e => e.Name)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.Property(e => e.SortCode)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.SwiftBic)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SwiftBIC");

            entity.Property(e => e.Telephones)
                .HasMaxLength(100)
                .IsUnicode(false);
        });

        modelBuilder.Entity<CustomerRating>(entity =>
        {
            entity.HasKey(e => e.IdCustomerRating);

            entity.ToTable("CustomerRating");

            entity.HasIndex(e => new { e.IdCustomer, e.EffectiveDate, e.IdCustomerRatingMaster }, "Key_CustomerRating_CustomerIDAndRateDate")
                .IsUnique();

            entity.HasIndex(e => new { e.IdCustomerRatingMaster, e.IdCustomer }, "Key_CustomerRating_Unique")
                .IsUnique();

            entity.Property(e => e.IdCustomerRating).HasColumnName("ID_CustomerRating");

            entity.Property(e => e.EffectiveDate).HasColumnType("datetime");

            entity.Property(e => e.IdCustomer).HasColumnName("ID_Customer");

            entity.Property(e => e.IdCustomerRatingMaster).HasColumnName("ID_CustomerRatingMaster");

            entity.Property(e => e.IdRatingEngine).HasColumnName("ID_RatingEngine");

            entity.Property(e => e.MaxExposureRate).HasColumnType("decimal(18, 2)");

            
                
                

            entity.Property(e => e.Status)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<CustomerRatingMaster>(entity =>
        {
            entity.HasKey(e => e.IdCustomerRatingMaster);

            entity.ToTable("CustomerRatingMaster");

            entity.HasIndex(e => new { e.EffectiveDate, e.IdPortfolio }, "Key_CustomerRatingMaster_EffectiveDate")
                .IsUnique();

            entity.HasIndex(e => e.Narration, "Key_CustomerRatingMaster_Narration");

            entity.Property(e => e.IdCustomerRatingMaster).HasColumnName("ID_CustomerRatingMaster");

            entity.Property(e => e.ApprovedBy)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.ApprovedDate).HasColumnType("datetime");

            entity.Property(e => e.CapturedBy)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.Comments).HasColumnType("text");

            entity.Property(e => e.EffectiveDate).HasColumnType("datetime");

            entity.Property(e => e.IdPortfolio).HasColumnName("ID_Portfolio");

            
                
                

            entity.Property(e => e.Narration)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.Property(e => e.RequestDate).HasColumnType("datetime");

            entity.Property(e => e.Status)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<CustomerRelationOffice>(entity =>
        {
            entity.HasKey(e => e.IdCro);

            entity.ToTable("CustomerRelationOffice");

            entity.HasIndex(e => e.FullName, "Key_CustomerRelationOffice_FullName")
                .IsUnique();

            entity.Property(e => e.IdCro).HasColumnName("ID_CRO");

            entity.Property(e => e.Email)
                .HasMaxLength(200)
                .IsUnicode(false);

            entity.Property(e => e.FullName)
                .HasMaxLength(200)
                .IsUnicode(false);

            entity.Property(e => e.Gsm)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("GSM");

            entity.Property(e => e.IdCustomer).HasColumnName("ID_Customer");
        });

        modelBuilder.Entity<D272e84aFbe84e4b8357686562ab4758>(entity =>
        {
            entity.HasKey(e => e.IdBorrowAmortSchedule);

            entity.ToTable("D272E84A-FBE8-4E4B-8357-686562AB4758");

            entity.Property(e => e.IdBorrowAmortSchedule).HasColumnName("ID_BorrowAmortSchedule");

            entity.Property(e => e.CapitalisedPostedInterest).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.CloseBalance).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.DueDate).HasColumnType("datetime");

            entity.Property(e => e.EndDate).HasColumnType("datetime");

            entity.Property(e => e.IdBorrowMaster).HasColumnName("ID_BorrowMaster");

            entity.Property(e => e.IntAmount).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.IntPerDay).HasColumnType("decimal(31, 15)");

            entity.Property(e => e.OpenBalance).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.PrnAmount).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.RentalAmount).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.ReversalId).HasColumnName("ReversalID");

            entity.Property(e => e.UniqueUserId)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("UniqueUserID");

            entity.Property(e => e.WithTaxAmount).HasColumnType("decimal(18, 2)");
        });

        modelBuilder.Entity<DataBridge>(entity =>
        {
            entity.HasKey(e => e.IdDatabridge)
                .HasName("PK__DataBrid__8F761171C568A027");

            entity.ToTable("DataBridge");

            entity.HasIndex(e => new { e.Tablename, e.CommonId }, "Key_DataBridge_Search");

            entity.HasIndex(e => new { e.Databasename, e.Tablename, e.OldId }, "UQ__DataBrid__A16FA9F5B0AFB770")
                .IsUnique();

            entity.HasIndex(e => new { e.Databasename, e.Tablename, e.OldId, e.CommonId, e.NewId }, "UQ__DataBrid__B5C5BFD05EE95181")
                .IsUnique();

            entity.Property(e => e.IdDatabridge)
                .ValueGeneratedNever()
                .HasColumnName("ID_DATABRIDGE");

            entity.Property(e => e.CommonId)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("COMMON_ID");

            entity.Property(e => e.Databasename)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DATABASENAME");

            entity.Property(e => e.NewId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NEW_ID");

            entity.Property(e => e.OldId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Old_ID");

            entity.Property(e => e.Tablename)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("TABLENAME");
        });

        modelBuilder.Entity<Dbd33fa938cf4611B893F204de2f25c7>(entity =>
        {
            entity.HasKey(e => e.IdBorrowAmortSchedule);

            entity.ToTable("DBD33FA9-38CF-4611-B893-F204DE2F25C7");

            entity.Property(e => e.IdBorrowAmortSchedule).HasColumnName("ID_BorrowAmortSchedule");

            entity.Property(e => e.CapitalisedPostedInterest).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.CloseBalance).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.DueDate).HasColumnType("datetime");

            entity.Property(e => e.EndDate).HasColumnType("datetime");

            entity.Property(e => e.IdBorrowMaster).HasColumnName("ID_BorrowMaster");

            entity.Property(e => e.IntAmount).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.IntPerDay).HasColumnType("decimal(31, 15)");

            entity.Property(e => e.OpenBalance).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.PrnAmount).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.RentalAmount).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.ReversalId).HasColumnName("ReversalID");

            entity.Property(e => e.UniqueUserId)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("UniqueUserID");

            entity.Property(e => e.WithTaxAmount).HasColumnType("decimal(18, 2)");
        });

        modelBuilder.Entity<DboTmpNoDisplaytable>(entity =>
        {
            entity.HasNoKey();

            entity.ToTable("dbo.TmpNoDisplaytable");

            entity.Property(e => e.CapitalisedPostedInterest).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.CloseBalance).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.DueDate).HasColumnType("datetime");

            entity.Property(e => e.IdBorrowAmortSchedule)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID_BorrowAmortSchedule");

            entity.Property(e => e.IdBorrowMaster).HasColumnName("ID_BorrowMaster");

            entity.Property(e => e.IntAmount).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.IntPerDay).HasColumnType("decimal(31, 15)");

            entity.Property(e => e.OpenBalance).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.PrnAmount).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.RentalAmount).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.ReversalId).HasColumnName("ReversalID");

            entity.Property(e => e.UniqueUserId)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("UniqueUserID");

            entity.Property(e => e.WithTaxAmount).HasColumnType("decimal(18, 2)");
        });

        modelBuilder.Entity<Deal2Gl>(entity =>
        {
            entity.HasKey(e => e.IdDeal2Gl);

            entity.ToTable("Deal2GL");

            entity.HasIndex(e => new { e.IdDealType, e.IdPortfolioGroup }, "Key_Deal2GL_Unique")
                .IsUnique();

            entity.Property(e => e.IdDeal2Gl).HasColumnName("ID_Deal2Gl");

            entity.Property(e => e.ChangeInBondValueGlActNo)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.ChangeInBondValueGlActNoCcenter)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("ChangeInBondValueGlActNo_CCenter");

            entity.Property(e => e.DealAccrualActNo)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.DealAccrualActNoCcenter)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("DealAccrualActNo_CCenter");

            entity.Property(e => e.DealExpActNo)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.DealExpActNoCcenter)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("DealExpActNo_CCenter");

            entity.Property(e => e.DealIncomeActNo)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.DealIncomeActNoCcenter)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("DealIncomeActNo_CCenter");

            entity.Property(e => e.DealMainActNo)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.DealMainActNoCcenter)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("DealMainActNo_CCenter");

            entity.Property(e => e.IdDealType)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("ID_DealType");

            entity.Property(e => e.IdPortfolioGroup).HasColumnName("ID_PortfolioGroup");

            entity.Property(e => e.IdPortfolioGroupCcenter).HasColumnName("ID_PortfolioGroup_CCenter");

            
                
                

            entity.Property(e => e.PortfolioId).HasColumnName("PortfolioID");

            entity.Property(e => e.ProfitLossOnDisposal)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.ProfitLossOnDisposalCcenter)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("ProfitLossOnDisposal_CCenter");

            entity.Property(e => e.Title)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.UnRealisedGain)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.UnRealisedGainCcenter)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("UnRealisedGain_CCenter");

            entity.Property(e => e.UnRealisedLoss)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.UnRealisedLossCcenter)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("UnRealisedLoss_CCenter");
        });

        modelBuilder.Entity<DealAccountStatement>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("DealAccountStatement");

            entity.Property(e => e.Amount).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.Being)
                .HasMaxLength(150)
                .IsUnicode(false);

            entity.Property(e => e.CheqNo)
                .HasMaxLength(10)
                .IsUnicode(false);

            entity.Property(e => e.DueDate).HasColumnType("datetime");

            entity.Property(e => e.IdAccountStament).HasColumnName("ID_AccountStament");

            entity.Property(e => e.IdBankAccount)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("ID_BankAccount");

            entity.Property(e => e.IdDealMaster).HasColumnName("ID_DealMaster");

            entity.Property(e => e.IdReceipt).HasColumnName("ID_Receipt");

            entity.Property(e => e.ReceiptFrom)
                .HasMaxLength(150)
                .IsUnicode(false);

            entity.Property(e => e.ReceiptNo)
                .HasMaxLength(10)
                .IsUnicode(false);

            entity.Property(e => e.ReceiptType)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.SourceBankId)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("SourceBankID");

            entity.Property(e => e.SourceLocation)
                .HasMaxLength(10)
                .IsUnicode(false);

            entity.Property(e => e.Status)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.TransactionDate).HasColumnType("datetime");

            entity.Property(e => e.Valuedate).HasColumnType("datetime");
        });

        modelBuilder.Entity<DealAllocation>(entity =>
        {
            entity.HasKey(e => e.IdDealAllocation);

            entity.ToTable("DealAllocation");

            entity.HasIndex(e => new { e.IdDealMaster, e.IdPortfolio }, "Key_DealAllocation_DealPortfolio");

            entity.Property(e => e.IdDealAllocation).HasColumnName("ID_DealAllocation");

            entity.Property(e => e.Amount).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.CommissionAmount).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.IdDealMaster).HasColumnName("ID_DealMaster");

            entity.Property(e => e.IdPortfolio).HasColumnName("ID_Portfolio");

            
                
                

            entity.Property(e => e.ValueDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<DealAmortSchedule>(entity =>
        {
            entity.HasKey(e => e.IdDealAmortSchedule);

            entity.ToTable("DealAmortSchedule");

            entity.HasIndex(e => new { e.IdDealMaster, e.DueDate }, "Key_DealAmortSchedule_DealID_DueDate");

            entity.Property(e => e.IdDealAmortSchedule).HasColumnName("ID_DealAmortSchedule");

            entity.Property(e => e.CapitalisedPostedInterest).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.CloseBalance).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.DueDate).HasColumnType("datetime");

            entity.Property(e => e.GlPostPeriod)
                .HasMaxLength(6)
                .IsUnicode(false);

            entity.Property(e => e.GlpostDate)
                .HasColumnType("datetime")
                .HasColumnName("GLPostDate");

            entity.Property(e => e.IdDealMaster).HasColumnName("ID_DealMaster");

            entity.Property(e => e.IntAmount).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.IntPerDay).HasColumnType("decimal(31, 15)");

            
                
                

            entity.Property(e => e.OpenBalance).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.PrnAmount).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.RentalAmount).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.ReversalId).HasColumnName("ReversalID");

            entity.Property(e => e.Utid).HasColumnName("UTID");

            entity.Property(e => e.VoucherNo)
                .HasMaxLength(10)
                .IsUnicode(false);

            entity.Property(e => e.WithTaxAmount).HasColumnType("decimal(18, 2)");
        });

        modelBuilder.Entity<DealBalance>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("DealBalances");

            entity.Property(e => e.Balance).HasColumnType("decimal(38, 2)");

            entity.Property(e => e.IdDealMaster)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID_DealMaster");
        });

        modelBuilder.Entity<DealBalances4Valuation>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("DealBalances4Valuation");

            entity.Property(e => e.Balance).HasColumnType("decimal(38, 2)");

            entity.Property(e => e.IdDealMaster)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID_DealMaster");
        });

        modelBuilder.Entity<DealMaster>(entity =>
        {
            entity.HasKey(e => e.IdDealMaster);

            entity.ToTable("DealMaster");

            entity.HasIndex(e => e.IdDealType, "FK_DealMaster_DealType");

            entity.HasIndex(e => e.IdBorrowMaster, "Key_DealMaster_BorrowMaster");

            entity.HasIndex(e => e.IdCustomer, "Key_DealMaster_CustomerID");

            entity.HasIndex(e => e.DealNumber, "Key_DealMaster_DealNumber");

            entity.HasIndex(e => e.Description, "Key_DealMaster_Description");

            entity.HasIndex(e => new { e.FirstPaymentDueDate, e.Status }, "Key_DealMaster_Speed01");

            entity.HasIndex(e => new { e.IdCustomer, e.FirstPaymentDueDate, e.Status }, "Key_DealMaster_Speed02");

            entity.HasIndex(e => e.Status, "Key_DealMaster_SpeedUp_01");

            entity.Property(e => e.IdDealMaster).HasColumnName("ID_DealMaster");

            entity.Property(e => e.Amt2Add).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.Amt2Withdraw).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.ApprovedBy)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.ApprovedDate).HasColumnType("datetime");

            entity.Property(e => e.AvailmentFees).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.AvailmentFeesRate).HasColumnType("decimal(18, 4)");

            entity.Property(e => e.BestFaceAmount).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.BrokerId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("BrokerID");

            entity.Property(e => e.CalculationMethod)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.CapturedBy)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.CapturedDate)
                .HasColumnType("datetime")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.ComisionRate).HasColumnType("decimal(18, 8)");

            entity.Property(e => e.CommisionAmount).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.CurExRate).HasColumnType("decimal(18, 6)");

            entity.Property(e => e.DealAmount).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.DealNumber)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.Property(e => e.Description)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.Property(e => e.EffectiveDate).HasColumnType("datetime");

            entity.Property(e => e.EffectiveYield).HasColumnType("decimal(24, 15)");

            entity.Property(e => e.ExtDealNumber)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.Property(e => e.FaceAmount).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.FirstPaymentDueDate).HasColumnType("datetime");

            entity.Property(e => e.IdBankAccount)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("ID_BankAccount");

            entity.Property(e => e.IdBankAccount01)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ID_BankAccount_01");

            entity.Property(e => e.IdBankAccount02)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ID_BankAccount_02");

            entity.Property(e => e.IdBorrowMaster).HasColumnName("ID_BorrowMaster");

            entity.Property(e => e.IdBranch)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("ID_Branch");

            entity.Property(e => e.IdCro).HasColumnName("ID_CRO");

            entity.Property(e => e.IdCurrency)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("ID_Currency");

            entity.Property(e => e.IdCustomer).HasColumnName("ID_Customer");

            entity.Property(e => e.IdCustomerBranch).HasColumnName("ID_CustomerBranch");

            entity.Property(e => e.IdDealType)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("ID_DealType");

            entity.Property(e => e.IdLocation)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("ID_Location");

            entity.Property(e => e.IdMoneyMarketQoutation2DealSlip).HasColumnName("ID_MoneyMarketQoutation2DealSlip");

            entity.Property(e => e.IdPortfolioCustodian).HasColumnName("ID_PortfolioCustodian");

            entity.Property(e => e.IdProductLine)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("ID_ProductLine");

            entity.Property(e => e.IdSettlementModes).HasColumnName("ID_SettlementModes");

            entity.Property(e => e.IdTbillTreatmentType)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("ID_TBillTreatmentType");

            entity.Property(e => e.IdTransMarket).HasColumnName("ID_TransMarket");

            entity.Property(e => e.InterestAmount).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.InterestMode)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.InterestRate).HasColumnType("decimal(18, 8)");

            entity.Property(e => e.InvestmentType)
                .HasMaxLength(2)
                .IsUnicode(false);

            entity.Property(e => e.LegalFees).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.LegalFeesRate).HasColumnType("decimal(18, 4)");

            entity.Property(e => e.ManagementFees).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.ManagementFeesRate).HasColumnType("decimal(18, 4)");

            entity.Property(e => e.MaturityDate).HasColumnType("datetime");

            entity.Property(e => e.MoratoriumInterest).HasColumnType("decimal(18, 2)");

            
                
                

            entity.Property(e => e.NewMatureValue).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.Notes).HasColumnType("text");

            entity.Property(e => e.OrigFaceAmount).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.OriginalIdDealMaster).HasColumnName("Original_ID_DealMaster");

            entity.Property(e => e.OtherFees).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.OtherFeesRate).HasColumnType("decimal(18, 4)");

            entity.Property(e => e.PurchaseOption).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.PurchaseOptionRate).HasColumnType("decimal(18, 4)");

            entity.Property(e => e.RePayGap)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.RePaymentType)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.RentalAmount).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.ResidualRate).HasColumnType("decimal(18, 4)");

            entity.Property(e => e.ResidualValue).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.RollOverFromId).HasColumnName("RollOverFrom_ID");

            entity.Property(e => e.RollOverToId).HasColumnName("RollOverTo_ID");

            entity.Property(e => e.SettlementDate).HasColumnType("datetime");

            entity.Property(e => e.Status)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.StockExchangeId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("StockExchangeID");

            entity.Property(e => e.TbQtyBought)
                .HasColumnType("decimal(24, 4)")
                .HasColumnName("TB_QtyBought");

            entity.Property(e => e.TbQtySold)
                .HasColumnType("decimal(24, 4)")
                .HasColumnName("TB_QtySold");

            entity.Property(e => e.TotalFess).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.TransactionDate).HasColumnType("datetime");

            entity.Property(e => e.Utid).HasColumnName("UTID");

            entity.Property(e => e.VatAmount).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.WithholdTaxAmount).HasColumnType("decimal(18, 2)");
        });

        modelBuilder.Entity<DealPostDateCheque>(entity =>
        {
            entity.HasKey(e => e.IdDealPostDateCheque);

            entity.ToTable("DealPostDateCheque");

            entity.Property(e => e.IdDealPostDateCheque).HasColumnName("ID_DealPostDateCheque");

            entity.Property(e => e.Amount).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.ChequeNo)
                .HasMaxLength(10)
                .IsUnicode(false);

            entity.Property(e => e.DueDate).HasColumnType("datetime");

            entity.Property(e => e.GlPostPeriod)
                .HasMaxLength(6)
                .IsUnicode(false);

            entity.Property(e => e.GlpostDate)
                .HasColumnType("datetime")
                .HasColumnName("GLPostDate");

            entity.Property(e => e.IdDealMaster).HasColumnName("ID_DealMaster");

            entity.Property(e => e.IdReceipt).HasColumnName("ID_Receipt");

            
                
                

            entity.Property(e => e.PresentDate).HasColumnType("datetime");

            entity.Property(e => e.SourceIdBank)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("SourceID_Bank");

            entity.Property(e => e.SourceLocation)
                .HasMaxLength(10)
                .IsUnicode(false);

            entity.Property(e => e.Utid).HasColumnName("UTID");

            entity.Property(e => e.VoucherNo)
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<DealTermTemTable>(entity =>
        {
            entity.HasKey(e => e.IdDealAmortSchedule);

            entity.ToTable("Deal_Term_Tem_Table");

            entity.Property(e => e.IdDealAmortSchedule).HasColumnName("ID_DealAmortSchedule");

            entity.Property(e => e.CapitalisedPostedInterest).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.CloseBalance).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.DueDate).HasColumnType("datetime");

            entity.Property(e => e.IdDealMaster).HasColumnName("ID_DealMaster");

            entity.Property(e => e.IntAmount).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.IntPerDay).HasColumnType("decimal(31, 15)");

            entity.Property(e => e.OpenBalance).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.PrnAmount).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.RentalAmount).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.ReversalId).HasColumnName("ReversalID");

            entity.Property(e => e.UniqueUserId)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("UniqueUserID");

            entity.Property(e => e.WithTaxAmount).HasColumnType("decimal(18, 2)");
        });

        modelBuilder.Entity<DealTerminate>(entity =>
        {
            entity.HasKey(e => e.IdDealTerminate);

            entity.ToTable("DealTerminate");

            entity.HasIndex(e => e.IdDealMaster, "Key_DealTerminate_ID_DealMaster");

            entity.Property(e => e.IdDealTerminate).HasColumnName("ID_DealTerminate");

            entity.Property(e => e.Accrual2Reverse).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.Adjustment).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.Amount2Add).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.Amount2Pay).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.Amount2Withdraw).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.ApprovedBy)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.ApprovedDate).HasColumnType("datetime");

            entity.Property(e => e.BookingDate).HasColumnType("datetime");

            entity.Property(e => e.CapturedBy)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.CapturedDate)
                .HasColumnType("datetime")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.Comments).HasColumnType("text");

            entity.Property(e => e.ContactPerson)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.Property(e => e.DealAccountBalance).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.DiscountRate).HasColumnType("decimal(18, 8)");

            entity.Property(e => e.EffectiveYield).HasColumnType("decimal(24, 15)");

            entity.Property(e => e.FirstPaymentDueDate).HasColumnType("datetime");

            entity.Property(e => e.Fv2withDraw)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("FV2WithDraw");

            entity.Property(e => e.GlPostPeriod)
                .HasMaxLength(6)
                .IsUnicode(false);

            entity.Property(e => e.GlpostDate)
                .HasColumnType("datetime")
                .HasColumnName("GLPostDate");

            entity.Property(e => e.IdBranch)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("ID_Branch");

            entity.Property(e => e.IdDealMaster).HasColumnName("ID_DealMaster");

            entity.Property(e => e.IdSettlementModes).HasColumnName("ID_SettlementModes");

            entity.Property(e => e.Int2Withdraw).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.IntCharges).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.IntPayGap)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.InterestEarned).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.InterestMode)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.InterestRate).HasColumnType("decimal(18, 8)");

            entity.Property(e => e.IssueType)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.LastPostDate).HasColumnType("datetime");

            entity.Property(e => e.MarketValue).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.MaturityDate).HasColumnType("datetime");

            entity.Property(e => e.MoratoriumInterest).HasColumnType("decimal(18, 2)");

            
                
                

            entity.Property(e => e.NewEffectiveDate).HasColumnType("datetime");

            entity.Property(e => e.NewEffectiveYield).HasColumnType("decimal(28, 15)");

            entity.Property(e => e.NewFaceValue).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.NorminalValue).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.Penalty2Duduct).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.PostedWithTaxBf)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("PostedWithTax_bf");

            entity.Property(e => e.Principal).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.PrnPayGap)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.ProfitOrLoss).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.PurchaseOption).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.RePayGap)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.RefNo)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.Property(e => e.RefundAmount).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.RefundWitholdingTax).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.RentalAmount).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.ResidualRate).HasColumnType("decimal(18, 4)");

            entity.Property(e => e.ResidualValue).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.SettlementDate).HasColumnType("datetime");

            entity.Property(e => e.SoldToCustomerId).HasColumnName("Sold_To_CustomerID");

            entity.Property(e => e.Status)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.TerminationDate).HasColumnType("datetime");

            entity.Property(e => e.TerminationReason)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.Property(e => e.TerminationType)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.UnitCost).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.Utid).HasColumnName("UTID");

            entity.Property(e => e.VoucherNo)
                .HasMaxLength(10)
                .IsUnicode(false);

            entity.Property(e => e.WithHoldTaxAmount).HasColumnType("decimal(18, 2)");
        });

        modelBuilder.Entity<DealType>(entity =>
        {
            entity.HasKey(e => e.IdDealType);

            entity.ToTable("DealType");

            entity.HasIndex(e => e.IdOutCashForeCastClass, "Key_DealType_ID_OutCashForeCastClass");

            entity.Property(e => e.IdDealType)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("ID_DealType");

            entity.Property(e => e.CalculationMethod)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.DbBorrowingName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("dbBorrowingName");

            entity.Property(e => e.DealAccrualActNo)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.DealIncomeActNo)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.DealMainActNo)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.DealType1)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DealType");

            entity.Property(e => e.IdCashForeCastClass)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("ID_CashForeCastClass");

            entity.Property(e => e.IdInvestmentType)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("ID_InvestmentType");

            entity.Property(e => e.IdOutCashForeCastClass)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("ID_OutCashForeCastClass");

            entity.Property(e => e.IdSettlementModes).HasColumnName("ID_SettlementModes");

            
                
                

            entity.Property(e => e.PencomCode)
                .HasMaxLength(10)
                .IsUnicode(false);

            entity.Property(e => e.Upid).HasColumnName("UPID");
        });

        modelBuilder.Entity<Diary>(entity =>
        {
            entity.ToTable("Diary");

            entity.Property(e => e.DiaryId).HasColumnName("DiaryID");

            entity.Property(e => e.FinYearBegin).HasColumnType("datetime");

            entity.Property(e => e.FinYearEnd).HasColumnType("datetime");

            entity.Property(e => e.MonthEnd).HasColumnType("datetime");

            
                
                

            entity.Property(e => e.ProcessDate).HasColumnType("datetime");

            entity.Property(e => e.Today).HasColumnType("datetime");

            entity.Property(e => e.ValuationDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<Dieaccount>(entity =>
        {
            entity.HasKey(e => e.IdDieaccount);

            entity.ToTable("DIEAccount");

            entity.Property(e => e.IdDieaccount).HasColumnName("ID_DIEAccount");

            entity.Property(e => e.Description)
                .HasMaxLength(150)
                .IsUnicode(false);

            entity.Property(e => e.GlaccountNo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("GLAccountNo");

            entity.Property(e => e.GlaccountNoCostCenter)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("GLAccountNo_CostCenter");

            entity.Property(e => e.IdPortfolio).HasColumnName("ID_Portfolio");
        });

        modelBuilder.Entity<DirectInvestment>(entity =>
        {
            entity.HasKey(e => e.IdDirectInvestment);

            entity.ToTable("DirectInvestment");

            entity.HasIndex(e => e.IdPortfolio, "Key_DirectInvestment_ID_Portfolio");

            entity.Property(e => e.IdDirectInvestment).HasColumnName("ID_DirectInvestment");

            entity.Property(e => e.Amount).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.ApprovedBy)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.ApprovedDate).HasColumnType("datetime");

            entity.Property(e => e.AssetValue).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.CaptureDate).HasColumnType("datetime");

            entity.Property(e => e.CapturedBy)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.Comments).HasColumnType("text");

            entity.Property(e => e.GainLoss).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.IdPorfolioContributor).HasColumnName("ID_PorfolioContributor");

            entity.Property(e => e.IdPortfolio).HasColumnName("ID_Portfolio");

            entity.Property(e => e.InvestInIdPortfolio).HasColumnName("InvestIn_ID_Portfolio");

            entity.Property(e => e.InvestmentDate).HasColumnType("datetime");

            entity.Property(e => e.Narration)
                .HasMaxLength(150)
                .IsUnicode(false);

            entity.Property(e => e.NoOfUnits).HasColumnType("decimal(18, 4)");

            entity.Property(e => e.Status)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<DirectorProfile>(entity =>
        {
            entity.HasKey(e => e.Sncode);

            entity.ToTable("DirectorProfile");

            entity.Property(e => e.Sncode).HasColumnName("SNCode");

            entity.Property(e => e.Address)
                .HasMaxLength(30)
                .IsUnicode(false);

            entity.Property(e => e.Appointmentype)
                .HasMaxLength(30)
                .IsUnicode(false);

            entity.Property(e => e.DAte)
                .HasColumnType("datetime")
                .HasColumnName("D_ate");

            entity.Property(e => e.FullName)
                .HasMaxLength(30)
                .IsUnicode(false);

            
                
                

            entity.Property(e => e.PfaCode)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("PFA_Code");

            entity.Property(e => e.PfaName)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("PFA_Name");

            entity.Property(e => e.Telephone)
                .HasMaxLength(30)
                .IsUnicode(false);
        });

        modelBuilder.Entity<DismissalReport>(entity =>
        {
            entity.HasKey(e => e.Sncode);

            entity.ToTable("DismissalReport");

            entity.Property(e => e.Sncode).HasColumnName("SNCode");

            entity.Property(e => e.Address)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.DateTermination)
                .HasColumnType("datetime")
                .HasColumnName("Date_Termination");

            entity.Property(e => e.Department)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.Designation)
                .HasMaxLength(30)
                .IsUnicode(false);

            entity.Property(e => e.DismissalCode)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("Dismissal_Code");

            entity.Property(e => e.DismissalReason)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("Dismissal_Reason");

            entity.Property(e => e.Dob)
                .HasColumnType("datetime")
                .HasColumnName("DOB");

            entity.Property(e => e.FirstName)
                .HasMaxLength(30)
                .IsUnicode(false);

            entity.Property(e => e.FraudCode)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("Fraud_Code");

            entity.Property(e => e.MiddleName)
                .HasMaxLength(30)
                .IsUnicode(false);

            
                
                

            entity.Property(e => e.PfaCode)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("PFA_Code");

            entity.Property(e => e.PfaName)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("PFA_Name");

            entity.Property(e => e.ReIntstateReason)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("Re_IntstateReason");

            entity.Property(e => e.StaffCode)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("Staff_Code");

            entity.Property(e => e.StateCode)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("State_Code");

            entity.Property(e => e.Surname)
                .HasMaxLength(30)
                .IsUnicode(false);
        });

        modelBuilder.Entity<DocumentMaster>(entity =>
        {
            entity.HasKey(e => e.IdDocumentMaster);

            entity.ToTable("DocumentMaster");

            entity.HasIndex(e => e.Document, "Key_DocumentMaster_Document")
                .IsUnique();

            entity.Property(e => e.IdDocumentMaster).HasColumnName("ID_DocumentMaster");

            entity.Property(e => e.AccountClass)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.Document)
                .HasMaxLength(150)
                .IsUnicode(false);

            entity.Property(e => e.IdControbutorTypeList)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("ID_ControbutorType_List");
        });



        modelBuilder.Entity<EconomicSector>(entity =>
        {
            entity.HasKey(e => e.IdEconomicSector);

            entity.ToTable("EconomicSector");

            entity.HasIndex(e => e.EconomicSector1, "Key_EconomicSector_EconomicSector")
                .IsUnique();

            entity.Property(e => e.IdEconomicSector).HasColumnName("ID_EconomicSector");

            entity.Property(e => e.EconomicSector1)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("EconomicSector");

            
                
                
        });

        modelBuilder.Entity<Employer>(entity =>
        {
            entity.HasKey(e => e.IdEmployer);

            entity.ToTable("Employer");

            entity.HasIndex(e => e.Employer1, "Key_Employer_Employer")
                .IsUnique();

            entity.Property(e => e.IdEmployer).HasColumnName("ID_Employer");

            entity.Property(e => e.Address1)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.Address2)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.Employer1)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("Employer");

            entity.Property(e => e.IdState)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("ID_State");

            
                
                
        });

        modelBuilder.Entity<EnpowerLink>(entity =>
        {
            entity.HasKey(e => e.IdEnpowerLink);

            entity.ToTable("EnpowerLink");

            entity.Property(e => e.IdEnpowerLink)
                .ValueGeneratedNever()
                .HasColumnName("ID_EnpowerLink");

            entity.Property(e => e.ContributionTable)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.Property(e => e.DoNotExportToExternalGl).HasColumnName("DoNotExportToExternalGL");

            entity.Property(e => e.EnpowerDbName)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.Property(e => e.GlexportTable)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("GLExportTable");

            entity.Property(e => e.NavisionTable)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.Property(e => e.SqlServerName)
                .HasMaxLength(150)
                .IsUnicode(false);

            entity.Property(e => e.UnitPriceTable)
                .HasMaxLength(100)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Eq2Gl>(entity =>
        {
            entity.HasKey(e => e.IdEq2Gl);

            entity.ToTable("Eq2GL");

            entity.HasIndex(e => e.IdPortfolioGroup, "KeyEq2GLPortID");

            entity.HasIndex(e => e.TypeId, "KeyEq2GLType");

            entity.HasIndex(e => new { e.TypeId, e.IdPortfolioGroup }, "Key_Eq2GL_Unique")
                .IsUnique();

            entity.Property(e => e.IdEq2Gl).HasColumnName("ID_Eq2Gl");

            entity.Property(e => e.ChangeInShareValueGlActNo)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.ChangeInShareValueGlActNoCcenter)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("ChangeInShareValueGlActNo_CCenter");

            entity.Property(e => e.Dep4ShareGlActNo)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.Dep4ShareGlActNoCcenter)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("Dep4ShareGlActNo_CCenter");

            entity.Property(e => e.DisposalProfLoss)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.DisposalProfLossCcenter)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("DisposalProfLoss_CCenter");

            entity.Property(e => e.DivReceivableGlActNo)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.DivReceivableGlActNoCcenter)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("DivReceivableGlActNo_CCenter");

            entity.Property(e => e.DividendGlactNo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("DividendGLActNo");

            entity.Property(e => e.DividendGlactNoCcenter)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("DividendGLActNo_CCenter");

            entity.Property(e => e.IdPortfolioGroup).HasColumnName("ID_PortfolioGroup");

            
                
                

            entity.Property(e => e.PayableOnPurchase)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.PayableOnPurchaseCcenter)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("PayableOnPurchase_CCenter");

            entity.Property(e => e.RealisedLossGlActNo)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.RealisedLossGlActNoCcenter)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("RealisedLossGlActNo_CCenter");

            entity.Property(e => e.ReceivableOnSales)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.ReceivableOnSalesCcenter)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("ReceivableOnSales_CCenter");

            entity.Property(e => e.ShareGlactNo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("ShareGLActNo");

            entity.Property(e => e.ShareGlactNoCcenter)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("ShareGLActNo_CCenter");

            entity.Property(e => e.Title)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.TransCostGlActNo)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.TransCostGlActNoCcenter)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("TransCostGlActNo_CCenter");

            entity.Property(e => e.TypeId)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("TypeID")
                .IsFixedLength();

            entity.Property(e => e.UnRealisedGain)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.UnRealisedGainCcenter)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("UnRealisedGain_CCenter");

            entity.Property(e => e.UnRealisedLoss)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.UnRealisedLossCcenter)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("UnRealisedLoss_CCenter");
        });

        modelBuilder.Entity<EqAssetTransfer>(entity =>
        {
            entity.HasKey(e => e.IdEqAssetTransfer);

            entity.ToTable("EqAssetTransfer");

            entity.Property(e => e.IdEqAssetTransfer).HasColumnName("ID_EqAssetTransfer");

            entity.Property(e => e.AssetValue).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.BrokerId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("BrokerID");

            entity.Property(e => e.BuyComRate)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("Buy_ComRate");

            entity.Property(e => e.Comments).HasColumnType("text");

            entity.Property(e => e.Cscsid)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("CSCSID")
                .IsFixedLength();

            entity.Property(e => e.Cscstransaction).HasColumnName("CSCSTransaction");

            entity.Property(e => e.GlPostPeriod)
                .HasMaxLength(6)
                .IsUnicode(false);

            entity.Property(e => e.GlpostDate)
                .HasColumnType("datetime")
                .HasColumnName("GLPostDate");

            entity.Property(e => e.IdPortfolio).HasColumnName("ID_Portfolio");

            entity.Property(e => e.InvestorAccountNo)
                .HasMaxLength(15)
                .IsUnicode(false)
                .IsFixedLength();

            
                
                

            entity.Property(e => e.Narration)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.Property(e => e.SellComRate)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("Sell_ComRate");

            entity.Property(e => e.Status)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.TotalCharges).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.TransactionChargesType)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.TransferDate).HasColumnType("datetime");

            entity.Property(e => e.VoucherNo)
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<EqAssetTransferDetail>(entity =>
        {
            entity.HasKey(e => e.IdEqAssetTransferDetail);

            entity.ToTable("EqAssetTransferDetail");

            entity.Property(e => e.IdEqAssetTransferDetail).HasColumnName("ID_EqAssetTransferDetail");

            entity.Property(e => e.AssetValue).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.BuyAdjustment)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("Buy_Adjustment");

            entity.Property(e => e.BuyCommission)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("Buy_Commission");

            entity.Property(e => e.BuyNseCscsfees)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("Buy_NseCSCSFees");

            entity.Property(e => e.BuyOtherFees)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("Buy_OtherFees");

            entity.Property(e => e.BuySecFees)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("Buy_SecFees");

            entity.Property(e => e.BuyStampDuty)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("Buy_StampDuty");

            entity.Property(e => e.BuyVat)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("Buy_VAT");

            entity.Property(e => e.IdEqAssetTransfer).HasColumnName("ID_EqAssetTransfer");

            entity.Property(e => e.MarketValue).HasColumnType("decimal(18, 2)");

            
                
                

            entity.Property(e => e.QtyUnit).HasColumnType("decimal(18, 4)");

            entity.Property(e => e.SellAdjustment)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("Sell_Adjustment");

            entity.Property(e => e.SellCommission)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("Sell_Commission");

            entity.Property(e => e.SellNseCscsfees)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("Sell_NseCSCSFees");

            entity.Property(e => e.SellOtherFees)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("Sell_OtherFees");

            entity.Property(e => e.SellSecFees)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("Sell_SecFees");

            entity.Property(e => e.SellStampDuty)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("Sell_StampDuty");

            entity.Property(e => e.SellVat)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("Sell_VAT");

            entity.Property(e => e.ShareId).HasColumnName("ShareID");

            entity.Property(e => e.TransactionCost).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.UniqueId).HasColumnName("UniqueID");
        });

        modelBuilder.Entity<EqBonRef>(entity =>
        {
            entity.HasKey(e => e.RefundId);

            entity.ToTable("EqBonRef");

            entity.Property(e => e.RefundId).HasColumnName("RefundID");

            entity.Property(e => e.CertificateNo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .IsFixedLength();

            
                
                

            entity.Property(e => e.Narration)
                .HasMaxLength(40)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.QtyRefund).HasColumnType("decimal(18, 8)");

            entity.Property(e => e.RefundDate).HasColumnType("datetime");

            entity.Property(e => e.ShareId).HasColumnName("ShareID");
        });

        modelBuilder.Entity<EqBonusBf>(entity =>
        {
            entity.HasKey(e => e.IdEqBonusBf);

            entity.ToTable("EqBonus_bf");

            entity.Property(e => e.IdEqBonusBf).HasColumnName("ID_EqBonus_bf");

            entity.Property(e => e.IdPortfolio).HasColumnName("ID_Portfolio");

            
                
                

            entity.Property(e => e.Narration)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.OpenDate).HasColumnType("datetime");

            entity.Property(e => e.ShareId).HasColumnName("ShareID");
        });

        modelBuilder.Entity<EqCerImm>(entity =>
        {
            entity.HasKey(e => e.ImmobilizeId)
                .HasName("KeyImmobilise");

            entity.ToTable("EqCerImm");

            entity.Property(e => e.ImmobilizeId).HasColumnName("ImmobilizeID");

            entity.Property(e => e.BankId).HasColumnName("BankID");

            entity.Property(e => e.ChequeNo)
                .HasMaxLength(15)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.Cost).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.Cscsid)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("CSCSID")
                .IsFixedLength();

            entity.Property(e => e.CurrencyId)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("CurrencyID")
                .IsFixedLength();

            entity.Property(e => e.ImmobilizeDate).HasColumnType("datetime");

            entity.Property(e => e.InvestorActNo)
                .HasMaxLength(15)
                .IsUnicode(false)
                .IsFixedLength();

            
                
                

            entity.Property(e => e.Narration)
                .HasMaxLength(40)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.PortfolioId).HasColumnName("PortfolioID");

            entity.Property(e => e.ShareId).HasColumnName("ShareID");

            entity.Property(e => e.TransactionDate)
                .HasColumnType("datetime")
                .HasDefaultValueSql("(getdate())");
        });

        modelBuilder.Entity<EqCert>(entity =>
        {
            entity.HasKey(e => e.IdEqCert);

            entity.ToTable("EqCert");

            entity.HasIndex(e => e.CertificateId, "KeyEquityCertificateID");

            entity.HasIndex(e => e.ImmobilizeId, "KeyImmobilise");

            entity.HasIndex(e => e.UniqueId, "KeyUniqueID");

            entity.Property(e => e.IdEqCert).HasColumnName("ID_EqCert");

            entity.Property(e => e.BrokerId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("BrokerID");

            entity.Property(e => e.CertificateId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("CertificateID")
                .IsFixedLength();

            entity.Property(e => e.ConsolidateId).HasColumnName("ConsolidateID");

            entity.Property(e => e.ContractNote)
                .HasMaxLength(20)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.DisposalId).HasColumnName("DisposalID");

            entity.Property(e => e.ExtraQty).HasColumnType("decimal(18, 8)");

            entity.Property(e => e.IdDealMaster).HasColumnName("ID_DealMaster");

            entity.Property(e => e.ImmobilizeId).HasColumnName("ImmobilizeID");

            entity.Property(e => e.LoanId).HasColumnName("LoanID");

            
                
                

            entity.Property(e => e.QtyUnits).HasColumnType("decimal(18, 8)");

            entity.Property(e => e.ShareId).HasColumnName("ShareID");

            entity.Property(e => e.TransactionDate)
                .HasColumnType("datetime")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.UniqueId).HasColumnName("UniqueID");
        });

        modelBuilder.Entity<EqChangeInShareValue>(entity =>
        {
            entity.HasKey(e => e.IdChangeInShareValue)
                .HasName("PK_ChangeInShareValue");

            entity.ToTable("EqChangeInShareValue");

            entity.HasIndex(e => e.IdChangeInShareValueEom, "Key_EqChangeInShareValue_LinkEOM");

            entity.HasIndex(e => new { e.ShareId, e.IdPortfolio, e.ValuationDate }, "Key_EqChangeInShareValue_Unique")
                .IsUnique();

            entity.Property(e => e.IdChangeInShareValue).HasColumnName("ID_ChangeInShareValue");

            entity.Property(e => e.Amount).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.Comments).HasColumnType("text");

            entity.Property(e => e.CostOfShares).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.CurMrkPrice).HasColumnType("decimal(18, 4)");

            entity.Property(e => e.GlpostDate)
                .HasColumnType("datetime")
                .HasColumnName("GLPostDate");

            entity.Property(e => e.IdChangeInShareValueEom).HasColumnName("ID_ChangeInShareValueEOM");

            entity.Property(e => e.IdPortfolio).HasColumnName("ID_Portfolio");

            
                
                

            entity.Property(e => e.PostedBy)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.PrvMrkPrice).HasColumnType("decimal(18, 4)");

            entity.Property(e => e.QtyUnit).HasColumnType("decimal(31, 4)");

            entity.Property(e => e.ReversalId).HasColumnName("ReversalID");

            entity.Property(e => e.ShareId).HasColumnName("ShareID");

            entity.Property(e => e.ValuationDate).HasColumnType("datetime");

            entity.Property(e => e.VoucherNo)
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<EqChangeInShareValueEom>(entity =>
        {
            entity.HasKey(e => e.IdChangeInShareValueEom);

            entity.ToTable("EqChangeInShareValueEOM");

            entity.Property(e => e.IdChangeInShareValueEom).HasColumnName("ID_ChangeInShareValueEOM");

            entity.Property(e => e.Amount).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.IdChangeInShareValue).HasColumnName("ID_ChangeInShareValue");

            entity.Property(e => e.IdPortfolio).HasColumnName("ID_Portfolio");

            entity.Property(e => e.Narration)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.Property(e => e.PostedBy)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.ReversalId).HasColumnName("ReversalID");

            entity.Property(e => e.ShareId).HasColumnName("ShareID");

            entity.Property(e => e.ValueDate).HasColumnType("datetime");

            entity.Property(e => e.VoucehrNo)
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<EqChargesRate>(entity =>
        {
            entity.HasKey(e => e.IdChargesRate);

            entity.ToTable("EqChargesRate");

            entity.HasIndex(e => e.EffectiveDate, "Key_EqChargesRate_EffectiveDate")
                .IsUnique();

            entity.Property(e => e.IdChargesRate).HasColumnName("ID_ChargesRate");

            entity.Property(e => e.AddFixedChargePurchase)
                .HasColumnType("decimal(18, 8)")
                .HasColumnName("Add_Fixed_Charge_Purchase");

            entity.Property(e => e.AddFixedChargeSell)
                .HasColumnType("decimal(18, 8)")
                .HasColumnName("Add_Fixed_Charge_Sell");

            entity.Property(e => e.BrokerComisionRate).HasColumnType("decimal(18, 8)");

            entity.Property(e => e.CscsfeesRateBuy)
                .HasColumnType("decimal(18, 8)")
                .HasColumnName("CSCSFeesRate_Buy");

            entity.Property(e => e.CscsfeesRateSell)
                .HasColumnType("decimal(18, 8)")
                .HasColumnName("CSCSFeesRate_Sell");

            entity.Property(e => e.EffectiveDate).HasColumnType("datetime");

            entity.Property(e => e.NseFeesRateBuy)
                .HasColumnType("decimal(18, 8)")
                .HasColumnName("NseFeesRate_Buy");

            entity.Property(e => e.NseFeesRateSell)
                .HasColumnType("decimal(18, 8)")
                .HasColumnName("NseFeesRate_Sell");

            entity.Property(e => e.OtherFeesRateBuy)
                .HasColumnType("decimal(18, 8)")
                .HasColumnName("OtherFeesRate_Buy");

            entity.Property(e => e.OtherFeesRateSell)
                .HasColumnType("decimal(18, 8)")
                .HasColumnName("OtherFeesRate_Sell");

            entity.Property(e => e.PayBrokerFeesNowBuy).HasColumnName("PayBrokerFees_Now_Buy");

            entity.Property(e => e.PayBrokerFeesNowSell).HasColumnName("PayBrokerFees_Now_Sell");

            entity.Property(e => e.PayCscsfeesNowBuy).HasColumnName("PayCSCSFees_Now_Buy");

            entity.Property(e => e.PayCscsfeesNowSell).HasColumnName("PayCSCSFees_Now_Sell");

            entity.Property(e => e.PayNseFeesNowBuy).HasColumnName("PayNseFees_Now_Buy");

            entity.Property(e => e.PayNseFeesNowSell).HasColumnName("PayNseFees_Now_Sell");

            entity.Property(e => e.PayOtherFeesNowBuy).HasColumnName("PayOtherFees_Now_Buy");

            entity.Property(e => e.PayOtherFeesNowSell).HasColumnName("PayOtherFees_Now_Sell");

            entity.Property(e => e.PaySecFeesNowBuy).HasColumnName("PaySecFees_Now_Buy");

            entity.Property(e => e.PaySecFeesNowSell).HasColumnName("PaySecFees_Now_Sell");

            entity.Property(e => e.PayStampFeesNowBuy).HasColumnName("PayStampFees_Now_Buy");

            entity.Property(e => e.PayStampFeesNowSell).HasColumnName("PayStampFees_Now_Sell");

            entity.Property(e => e.PayVatonFeesNowBuy).HasColumnName("PayVatonFees_Now_Buy");

            entity.Property(e => e.PayVatonFeesNowSell).HasColumnName("PayVatonFees_Now_Sell");

            entity.Property(e => e.Provision4LiquidationRate).HasColumnType("decimal(18, 8)");

            entity.Property(e => e.SecFeesRateBuy)
                .HasColumnType("decimal(18, 8)")
                .HasColumnName("SecFeesRate_Buy");

            entity.Property(e => e.SecFeesRateSell)
                .HasColumnType("decimal(18, 8)")
                .HasColumnName("SecFeesRate_Sell");

            entity.Property(e => e.StampDutyRateBuy)
                .HasColumnType("decimal(18, 8)")
                .HasColumnName("StampDutyRate_Buy");

            entity.Property(e => e.StampDutyRateSell)
                .HasColumnType("decimal(18, 8)")
                .HasColumnName("StampDutyRate_Sell");

            entity.Property(e => e.VatBrokerFeesBuy).HasColumnName("VatBrokerFees_Buy");

            entity.Property(e => e.VatBrokerFeesSell).HasColumnName("VatBrokerFees_Sell");

            entity.Property(e => e.VatCscsfeesBuy).HasColumnName("VatCSCSFees_Buy");

            entity.Property(e => e.VatCscsfeesSell).HasColumnName("VatCSCSFees_Sell");

            entity.Property(e => e.VatNseFeesBuy).HasColumnName("VatNseFees_Buy");

            entity.Property(e => e.VatNseFeesSell).HasColumnName("VatNseFees_Sell");

            entity.Property(e => e.VatOtherFeesBuy).HasColumnName("VatOtherFees_Buy");

            entity.Property(e => e.VatOtherFeesSell).HasColumnName("VatOtherFees_Sell");

            entity.Property(e => e.VatSecFeesBuy).HasColumnName("VatSecFees_Buy");

            entity.Property(e => e.VatSecFeesSell).HasColumnName("VatSecFees_Sell");

            entity.Property(e => e.VatStampDutyBuy).HasColumnName("VatStampDuty_Buy");

            entity.Property(e => e.VatStampDutySell).HasColumnName("VatStampDuty_Sell");
        });

        modelBuilder.Entity<EqComm>(entity =>
        {
            entity.HasKey(e => e.CommisionId)
                .HasName("KeyCommisionID");

            entity.ToTable("EqComm");

            entity.Property(e => e.CommisionId).HasColumnName("CommisionID");

            entity.Property(e => e.Amount).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.Commision).HasColumnType("decimal(18, 2)");

            
                
                

            entity.Property(e => e.Rate).HasColumnType("decimal(18, 2)");
        });

        modelBuilder.Entity<EqCscsid>(entity =>
        {
            entity.HasKey(e => e.Cscsid)
                .HasName("KeyCSCSID");

            entity.ToTable("EqCSCSID");

            entity.HasIndex(e => e.Cscsname, "KeyCSCSName");

            entity.Property(e => e.Cscsid)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CSCSID");

            entity.Property(e => e.Cscsname)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CSCSName");

            
                
                
        });

        modelBuilder.Entity<EqDep>(entity =>
        {
            entity.HasKey(e => e.DepositId)
                .HasName("KeyDeposit");

            entity.ToTable("EqDep");

            entity.HasIndex(e => e.BrokerId, "KeyBrokerID");

            entity.HasIndex(e => e.ShareId, "KeyShareID");

            entity.Property(e => e.DepositId).HasColumnName("DepositID");

            entity.Property(e => e.AmountRefunded).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.ApprovedBy)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.BankId).HasColumnName("BankID");

            entity.Property(e => e.BrokerId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("BrokerID");

            entity.Property(e => e.CapturedBy)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.ChequeNo)
                .HasMaxLength(15)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.Comments).HasColumnType("text");

            entity.Property(e => e.DepositAmount).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.DepositDate).HasColumnType("datetime");

            entity.Property(e => e.IdEquityMandateMaster).HasColumnName("ID_EquityMandateMaster");

            entity.Property(e => e.InvestType)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.IssueId)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("IssueID")
                .IsFixedLength();

            
                
                

            entity.Property(e => e.Narration)
                .HasMaxLength(40)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.OtherCost).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.QtyAllotted).HasColumnType("decimal(18, 8)");

            entity.Property(e => e.QtyExpected).HasColumnType("decimal(18, 8)");

            entity.Property(e => e.QtyRefunded).HasColumnType("decimal(18, 8)");

            entity.Property(e => e.ReversalId).HasColumnName("ReversalID");

            entity.Property(e => e.ReviewedBy)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.RightId).HasColumnName("RightID");

            entity.Property(e => e.SettlementDate).HasColumnType("datetime");

            entity.Property(e => e.ShareId).HasColumnName("ShareID");

            entity.Property(e => e.Sign1Id)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("Sign1ID")
                .IsFixedLength();

            entity.Property(e => e.Sign2Id)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("Sign2ID")
                .IsFixedLength();

            entity.Property(e => e.Status)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.TotalInterest).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.TransType)
                .HasMaxLength(2)
                .IsUnicode(false);

            entity.Property(e => e.UnitCost).HasColumnType("decimal(20, 8)");

            entity.Property(e => e.VoucherNo)
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<EqDepAll>(entity =>
        {
            entity.HasKey(e => e.DepAllocation)
                .HasName("KeyDepAlloc");

            entity.ToTable("EqDepAll");

            entity.HasIndex(e => e.DepositId, "KeyDep4ShaLink");

            entity.HasIndex(e => new { e.DepositId, e.PortfolioId }, "KeyDep4ShrAlloc")
                .IsUnique();

            entity.Property(e => e.AmountDeposited).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.AmountRefunded).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.DepositId).HasColumnName("DepositID");

            entity.Property(e => e.IdEquityMandateMaster).HasColumnName("ID_EquityMandateMaster");

            entity.Property(e => e.Interest).HasColumnType("decimal(18, 2)");

            
                
                

            entity.Property(e => e.PortfolioId).HasColumnName("PortfolioID");

            entity.Property(e => e.QtyReceived).HasColumnType("decimal(18, 8)");

            entity.Property(e => e.QtyRefund).HasColumnType("decimal(18, 8)");

            entity.Property(e => e.QtyRequested).HasColumnType("decimal(18, 8)");
        });

        modelBuilder.Entity<EqDepRef>(entity =>
        {
            entity.HasKey(e => e.RefundId);

            entity.ToTable("EqDepRef");

            entity.Property(e => e.RefundId).HasColumnName("RefundID");

            entity.Property(e => e.BankId)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("BankID");

            entity.Property(e => e.CapturedBy)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.ChequeNo)
                .HasMaxLength(15)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.Comments).HasColumnType("text");

            entity.Property(e => e.DepositId).HasColumnName("DepositID");

            entity.Property(e => e.Interest).HasColumnType("decimal(18, 2)");

            
                
                

            entity.Property(e => e.Narration)
                .HasMaxLength(40)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.QtyRefund).HasColumnType("decimal(18, 8)");

            entity.Property(e => e.RefundAmount).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.RefundDate).HasColumnType("datetime");

            entity.Property(e => e.ReversalId).HasColumnName("ReversalID");

            entity.Property(e => e.SettlementDate).HasColumnType("datetime");

            entity.Property(e => e.Status)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.VoucherNo)
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<EqDepRefAlloc>(entity =>
        {
            entity.HasKey(e => e.IdEqDepRefAlloc);

            entity.ToTable("EqDepRefAlloc");

            entity.Property(e => e.IdEqDepRefAlloc).HasColumnName("ID_EqDepRefAlloc");

            entity.Property(e => e.Amount).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.DepositId).HasColumnName("DepositID");

            entity.Property(e => e.InterestAmount).HasColumnType("decimal(18, 2)");

            
                
                

            entity.Property(e => e.PortfolioId).HasColumnName("PortfolioID");

            entity.Property(e => e.RefundId).HasColumnName("RefundID");
        });

        modelBuilder.Entity<EqDiv>(entity =>
        {
            entity.HasKey(e => e.DividendId)
                .HasName("KeyDividend");

            entity.ToTable("EqDiv");

            entity.HasIndex(e => e.WarrantNo, "KeyWarrantNo");

            entity.Property(e => e.DividendId).HasColumnName("DividendID");

            entity.Property(e => e.AdjustId).HasColumnName("AdjustID");

            entity.Property(e => e.BankId)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("BankID");

            entity.Property(e => e.CapturedBy)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.Comments).HasColumnType("text");

            entity.Property(e => e.CrDr)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('2')")
                .IsFixedLength();

            entity.Property(e => e.CurrencyId)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("CurrencyID")
                .IsFixedLength();

            entity.Property(e => e.DeclaredId).HasColumnName("DeclaredID");

            entity.Property(e => e.DeclaredIdSave).HasColumnName("DeclaredID_Save");

            entity.Property(e => e.DividendAmount).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.DividendRefund).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.DividendType)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.ExtraDividend).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.FinYear).HasColumnType("datetime");

            entity.Property(e => e.GlPostPeriod)
                .HasMaxLength(6)
                .IsUnicode(false);

            entity.Property(e => e.GlpostDate)
                .HasColumnType("datetime")
                .HasColumnName("GLPostDate");

            
                
                

            entity.Property(e => e.Narration)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.ReceivedDate).HasColumnType("datetime");

            entity.Property(e => e.ReversalId).HasColumnName("ReversalID");

            entity.Property(e => e.ScripCost).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.ScripPrice).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.SettlementDate).HasColumnType("datetime");

            entity.Property(e => e.ShareId).HasColumnName("ShareID");

            entity.Property(e => e.Status)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.UniqueId).HasColumnName("UniqueID");

            entity.Property(e => e.VoucherNo)
                .HasMaxLength(10)
                .IsUnicode(false);

            entity.Property(e => e.WarrantNo)
                .HasMaxLength(15)
                .IsUnicode(false);

            entity.Property(e => e.WithholdingTax).HasColumnType("decimal(18, 2)");
        });

        modelBuilder.Entity<EqDivAll>(entity =>
        {
            entity.ToTable("EqDivAll");

            entity.HasIndex(e => new { e.DividendId, e.PortfolioId }, "Key_EqDivAll_Unique")
                .IsUnique();

            entity.Property(e => e.EqDivAllId).HasColumnName("EqDivAllID");

            entity.Property(e => e.CrDr)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('2')")
                .IsFixedLength();

            entity.Property(e => e.DeclaredId).HasColumnName("DeclaredID");

            entity.Property(e => e.DividendAmount).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.DividendId).HasColumnName("DividendID");

            entity.Property(e => e.DividendType)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.ExtraDividend).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.FinYear).HasColumnType("datetime");

            
                
                

            entity.Property(e => e.PortfolioGroupId).HasColumnName("PortfolioGroupID");

            entity.Property(e => e.PortfolioId).HasColumnName("PortfolioID");

            entity.Property(e => e.ReceivedDate).HasColumnType("datetime");

            entity.Property(e => e.ShareId).HasColumnName("ShareID");

            entity.Property(e => e.WarrantNo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.WithholdingTax).HasColumnType("decimal(18, 2)");
        });

        modelBuilder.Entity<EqDivDec>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("EqDivDec");

            entity.Property(e => e.AnnualId).HasColumnName("AnnualID");

            entity.Property(e => e.ClosureDate).HasColumnType("datetime");

            entity.Property(e => e.DeclaredId)
                .ValueGeneratedOnAdd()
                .HasColumnName("DeclaredID");

            entity.Property(e => e.DividendRate).HasColumnType("decimal(18, 6)");

            entity.Property(e => e.DividendType)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            ;

            entity.Property(e => e.PaymentDate).HasColumnType("datetime");

            entity.Property(e => e.ShareId).HasColumnName("ShareID");
        });

        modelBuilder.Entity<EqDivDecOld>(entity =>
        {
            entity.HasKey(e => e.DeclaredId)
                .HasName("KeyDeclaredID");

            entity.ToTable("EqDivDec_Old");

            entity.HasIndex(e => e.AnnualId, "KeyAnnualInterim");

            entity.HasIndex(e => new { e.ShareId, e.ClosureDate }, "Key_EqDivDec_Unique")
                .IsUnique();

            entity.Property(e => e.DeclaredId).HasColumnName("DeclaredID");

            entity.Property(e => e.AnnualId).HasColumnName("AnnualID");

            entity.Property(e => e.ClosureDate).HasColumnType("datetime");

            entity.Property(e => e.DividendRate).HasColumnType("decimal(18, 6)");

            entity.Property(e => e.DividendType)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            
                
                

            entity.Property(e => e.PaymentDate).HasColumnType("datetime");

            entity.Property(e => e.ShareId).HasColumnName("ShareID");
        });

        modelBuilder.Entity<EqDivReceivableDetail>(entity =>
        {
            entity.HasKey(e => e.IdEqDivReceivableDetails);

            entity.Property(e => e.IdEqDivReceivableDetails).HasColumnName("ID_EqDivReceivableDetails");

            entity.Property(e => e.Amount).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.IdEqDivReceivableMaster).HasColumnName("ID_EqDivReceivableMaster");

            entity.Property(e => e.IdPortfolio).HasColumnName("ID_Portfolio");

            
                
                

            entity.Property(e => e.QtyUnit).HasColumnType("decimal(24, 4)");

            entity.Property(e => e.ShareId).HasColumnName("ShareID");
        });

        modelBuilder.Entity<EqDivReceivableMaster>(entity =>
        {
            entity.HasKey(e => e.IdEqDivReceivableMaster);

            entity.ToTable("EqDivReceivableMaster");

            entity.HasIndex(e => e.Narration, "Key_EqDivReceivableMaster_Narration");

            entity.Property(e => e.IdEqDivReceivableMaster).HasColumnName("ID_EqDivReceivableMaster");

            entity.Property(e => e.Amount).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.CapturedBy)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.Comments).HasColumnType("text");

            entity.Property(e => e.DeclaredId).HasColumnName("DeclaredID");

            entity.Property(e => e.DivRate).HasColumnType("decimal(18, 6)");

            
                
                

            entity.Property(e => e.Narration)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.QtyUnit).HasColumnType("decimal(24, 4)");

            entity.Property(e => e.ReversalDate).HasColumnType("datetime");

            entity.Property(e => e.ReversalId).HasColumnName("ReversalID");

            entity.Property(e => e.ShareId).HasColumnName("ShareID");

            entity.Property(e => e.Status)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.ValueDate).HasColumnType("datetime");

            entity.Property(e => e.VoucherNo)
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<EqDividendBf>(entity =>
        {
            entity.HasKey(e => e.IdDividendBf);

            entity.ToTable("EqDividend_bf");

            entity.Property(e => e.IdDividendBf).HasColumnName("ID_Dividend_bf");

            entity.Property(e => e.Amount).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.IdPortfolio).HasColumnName("ID_Portfolio");

            
                
                

            entity.Property(e => e.Narration)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.OpenDate).HasColumnType("datetime");

            entity.Property(e => e.ShareId).HasColumnName("ShareID");
        });

        modelBuilder.Entity<EqGroupGrid>(entity =>
        {
            entity.HasKey(e => e.IdGroupGrid);

            entity.ToTable("EqGroupGrid");

            entity.HasIndex(e => new { e.IdPortfolioGroup, e.ShareId }, "Key_EqGroupGrid_Unique")
                .IsUnique();

            entity.Property(e => e.IdGroupGrid).HasColumnName("ID_GroupGrid");

            entity.Property(e => e.IdPortfolioGroup).HasColumnName("ID_PortfolioGroup");

            
                
                

            entity.Property(e => e.ShareId).HasColumnName("ShareID");
        });

        modelBuilder.Entity<EqInvAct>(entity =>
        {
            entity.HasKey(e => e.InvActNo)
                .HasName("KeyInvAct");

            entity.ToTable("EqInvAct");

            entity.HasIndex(e => e.InvName, "KeyInvName");

            entity.Property(e => e.InvActNo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.InvName)
                .HasMaxLength(50)
                .IsUnicode(false);

            
                
                
        });

        modelBuilder.Entity<EqIssTyp>(entity =>
        {
            entity.HasKey(e => e.IssueId)
                .HasName("KeyIssueType");

            entity.ToTable("EqIssTyp");

            entity.HasIndex(e => e.Title, "KeyIssueTitle")
                .IsUnique();

            entity.Property(e => e.IssueId)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("IssueID")
                .IsFixedLength();

            
                
                

            entity.Property(e => e.Title)
                .HasMaxLength(40)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<EqMaster>(entity =>
        {
            entity.HasKey(e => e.ShareId)
                .HasName("KeyShareID");

            entity.ToTable("EqMaster");

            entity.HasIndex(e => e.CustomerId, "KeyComapanyID");

            entity.HasIndex(e => new { e.InvestType, e.ShareId }, "KeyGLLink");

            entity.HasIndex(e => e.Name, "KeyName");

            entity.HasIndex(e => new { e.CustomerId, e.CurencyId }, "Key_EqMaster_CustomerCurrency");

            entity.HasIndex(e => e.Symbol, "Key_EqMaster_Symbol");

            entity.Property(e => e.ShareId).HasColumnName("ShareID");

            entity.Property(e => e.AverageCost).HasColumnType("decimal(18, 8)");

            entity.Property(e => e.CertificatedUnits).HasColumnType("decimal(31, 8)");

            entity.Property(e => e.Cscsunits)
                .HasColumnType("decimal(31, 8)")
                .HasColumnName("CSCSUnits");

            entity.Property(e => e.CurencyId)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("CurencyID")
                .IsFixedLength();

            entity.Property(e => e.CustomerId).HasColumnName("CustomerID");

            entity.Property(e => e.InvestType)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasDefaultValueSql("('Eq')")
                .IsFixedLength();

            entity.Property(e => e.IssuedShares).HasColumnType("decimal(38, 8)");

            entity.Property(e => e.LastTranDate).HasColumnType("datetime");

            
                
                

            entity.Property(e => e.Name)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.NorminalValue).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.QoutedAtId).HasColumnName("QoutedAtID");

            entity.Property(e => e.Rating)
                .HasMaxLength(10)
                .IsUnicode(false);

            entity.Property(e => e.RegistrarId)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("RegistrarID")
                .IsFixedLength();

            entity.Property(e => e.ShareCapital).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.ShareType)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.StockExchangeId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("StockExchangeID");

            entity.Property(e => e.Symbol)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.TotalCost).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.TotalUnits).HasColumnType("decimal(31, 8)");
        });

        modelBuilder.Entity<EqParVal>(entity =>
        {
            entity.HasKey(e => e.ParValueId)
                .HasName("KeyPayValue");

            entity.ToTable("EqParVal");

            entity.HasIndex(e => e.ShareId, "KeyShareID");

            entity.Property(e => e.ParValueId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("ParValueID")
                .IsFixedLength();

            entity.Property(e => e.EffectiveDate).HasColumnType("datetime");

            
                
                

            entity.Property(e => e.Narration)
                .HasMaxLength(40)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.ParValue).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.SettlementDate).HasColumnType("datetime");

            entity.Property(e => e.ShareId).HasColumnName("ShareID");
        });

        modelBuilder.Entity<EqPrice>(entity =>
        {
            entity.HasKey(e => e.QouteId)
                .HasName("KeyQouted");

            entity.HasIndex(e => e.QoutedDate, "IX_EqPrices_QoutedDate");

            entity.HasIndex(e => new { e.ShareId, e.QoutedDate }, "KeyEqPrices")
                .IsUnique();

            entity.HasIndex(e => e.ShareId, "KeyShareID");

            entity.Property(e => e.QouteId).HasColumnName("QouteID");

            entity.Property(e => e.ChangeInPrice).HasColumnType("decimal(18, 8)");

            entity.Property(e => e.ClosePrice).HasColumnType("decimal(18, 8)");

            entity.Property(e => e.Epsh)
                .HasColumnType("decimal(18, 8)")
                .HasColumnName("EPSH");

            entity.Property(e => e.HiPrice).HasColumnType("decimal(18, 8)");

            entity.Property(e => e.LoPrice).HasColumnType("decimal(18, 8)");

            entity.Property(e => e.OpenPrice).HasColumnType("decimal(18, 8)");

            entity.Property(e => e.QoutedDate).HasColumnType("datetime");

            entity.Property(e => e.ShareId).HasColumnName("ShareID");

            entity.Property(e => e.TickerNo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("TickerNO");
        });

        modelBuilder.Entity<EqPrtGrd>(entity =>
        {
            entity.HasKey(e => e.IdEqPrtGrd);

            entity.ToTable("EqPrtGrd");

            entity.HasIndex(e => new { e.ShareId, e.PortfolioId }, "Key_EqPrtGrd_Unique")
                .IsUnique();

            entity.Property(e => e.IdEqPrtGrd).HasColumnName("ID_EqPrtGrd");

            
                
                

            entity.Property(e => e.PortfolioId).HasColumnName("PortfolioID");

            entity.Property(e => e.ShareId).HasColumnName("ShareID");
        });

        modelBuilder.Entity<EqRcpDetail>(entity =>
        {
            entity.HasKey(e => e.IdEqRcpDetails);

            entity.Property(e => e.IdEqRcpDetails).HasColumnName("ID_EqRcpDetails");

            entity.Property(e => e.AllocatedCost).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.CerificateQty).HasColumnType("decimal(18, 8)");

            entity.Property(e => e.ComChgAmount).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.CostOfSales).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.Cscsqty)
                .HasColumnType("decimal(18, 8)")
                .HasColumnName("CSCSQty");

            entity.Property(e => e.IdEqRcpMaster).HasColumnName("ID_EqRcpMaster");

            entity.Property(e => e.IdPortfolio).HasColumnName("ID_Portfolio");

            entity.Property(e => e.MarketValue).HasColumnType("decimal(18, 2)");

            
                
                

            entity.Property(e => e.QtySold).HasColumnType("decimal(18, 8)");

            entity.Property(e => e.QtyUnit).HasColumnType("decimal(18, 8)");

            entity.Property(e => e.SalesProceed).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.SalesType)
                .HasMaxLength(8)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.UnitCost).HasColumnType("decimal(18, 2)");
        });

        modelBuilder.Entity<EqRcpMaster>(entity =>
        {
            entity.HasKey(e => e.IdEqRcpMaster);

            entity.ToTable("EqRcpMaster");

            entity.HasIndex(e => e.IdUnique, "Key_EqRcpMaster_ID_Unique");

            entity.HasIndex(e => e.ValueDate, "Key_EqRcpMaster_ValueDate");

            entity.Property(e => e.IdEqRcpMaster).HasColumnName("ID_EqRcpMaster");

            entity.Property(e => e.Amount).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.Being)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.Property(e => e.CapturedBy)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.CheqNo)
                .HasMaxLength(10)
                .IsUnicode(false);

            entity.Property(e => e.ComChgAmount).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.GlPostPeriod)
                .HasMaxLength(6)
                .IsUnicode(false);

            entity.Property(e => e.GlpostDate)
                .HasColumnType("datetime")
                .HasColumnName("GLPostDate");

            entity.Property(e => e.IdBank)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("ID_Bank");

            entity.Property(e => e.IdBankAccount)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("ID_BankAccount");

            entity.Property(e => e.IdShare).HasColumnName("ID_Share");

            entity.Property(e => e.IdShareMandateDetail).HasColumnName("ID_ShareMandateDetail");

            entity.Property(e => e.IdUnique).HasColumnName("ID_Unique");

            
                
                

            entity.Property(e => e.ReceiptFrom)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.ReceiptNo)
                .HasMaxLength(10)
                .IsUnicode(false);

            entity.Property(e => e.ReceiptType)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.ReversalId).HasColumnName("ReversalID");

            entity.Property(e => e.SaleId).HasColumnName("SaleID");

            entity.Property(e => e.SettlementDate).HasColumnType("datetime");

            entity.Property(e => e.Status)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.ValueDate).HasColumnType("datetime");

            entity.Property(e => e.VoucherNo)
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<EqReqDetail>(entity =>
        {
            entity.HasKey(e => e.IdEqReqDetails)
                .HasName("PK_ShareReqDetails");

            entity.HasIndex(e => e.IdEqReqMaster, "FK_EqReqMaster");

            entity.HasIndex(e => e.IdPortfolio, "FK_Portfolio");

            entity.Property(e => e.IdEqReqDetails).HasColumnName("ID_EqReqDetails");

            entity.Property(e => e.AllocatedCost).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.ComChgAmount).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.IdEqReqMaster).HasColumnName("ID_EqReqMaster");

            entity.Property(e => e.IdPortfolio).HasColumnName("ID_Portfolio");

            
                
                

            entity.Property(e => e.QtyUnit).HasColumnType("decimal(18, 8)");
        });

        modelBuilder.Entity<EqReqMaster>(entity =>
        {
            entity.HasKey(e => e.IdEqReqMaster);

            entity.ToTable("EqReqMaster");

            entity.HasIndex(e => e.IdShare, "FK_EqShares");

            entity.HasIndex(e => e.DepositId, "Key_EqReqMaster_DepositID");

            entity.HasIndex(e => e.RequestDate, "Key_EqReqMaster_RequestDate");

            entity.HasIndex(e => e.RightId, "Key_EqReqMaster_RightID");

            entity.HasIndex(e => e.UniqueId, "Key_EqReqMaster_UniqueID");

            entity.Property(e => e.IdEqReqMaster).HasColumnName("ID_EqReqMaster");

            entity.Property(e => e.Amount).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.Being)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.Property(e => e.CheqNo)
                .HasMaxLength(10)
                .IsUnicode(false);

            entity.Property(e => e.ComChgAmount).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.DepositId).HasColumnName("DepositID");

            entity.Property(e => e.GlPostPeriod)
                .HasMaxLength(6)
                .IsUnicode(false);

            entity.Property(e => e.GlpostDate)
                .HasColumnType("datetime")
                .HasColumnName("GLPostDate");

            entity.Property(e => e.IdBackAccountNo)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("ID_BackAccountNo");

            entity.Property(e => e.IdShare).HasColumnName("ID_Share");

            entity.Property(e => e.IdShareMandateDetail).HasColumnName("ID_ShareMandateDetail");

            
                
                

            entity.Property(e => e.Payee)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.RequestDate).HasColumnType("datetime");

            entity.Property(e => e.RequestType)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.ReversalId).HasColumnName("ReversalID");

            entity.Property(e => e.RightId).HasColumnName("RightID");

            entity.Property(e => e.SettlementDate).HasColumnType("datetime");

            entity.Property(e => e.Status)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.UniqueId).HasColumnName("UniqueID");

            entity.Property(e => e.VoucherNo)
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<EqRiSal>(entity =>
        {
            entity.HasKey(e => e.SaleId)
                .HasName("KeySaleID");

            entity.ToTable("EqRiSal");

            entity.HasIndex(e => e.RightId, "KeyRiSalRightID");

            entity.Property(e => e.SaleId).HasColumnName("SaleID");

            entity.Property(e => e.ApprovedBy)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.ApprovedDate).HasColumnType("datetime");

            entity.Property(e => e.BrokerId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("BrokerID");

            entity.Property(e => e.CapturedBy)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.Comments).HasColumnType("text");

            entity.Property(e => e.Commisions).HasColumnType("decimal(18, 2)");

            
                
                

            entity.Property(e => e.Narration)
                .HasMaxLength(40)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.ReviewedBy)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.RightId).HasColumnName("RightID");

            entity.Property(e => e.SalesProceed).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.SettlementDate).HasColumnType("datetime");

            entity.Property(e => e.ShareId).HasColumnName("ShareID");

            entity.Property(e => e.Status)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.UnitPrice).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.ValueDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<EqRight>(entity =>
        {
            entity.HasKey(e => e.RightId)
                .HasName("KeyRightID");

            entity.ToTable("EqRight");

            entity.HasIndex(e => e.Narration, "KeyNarration");

            entity.Property(e => e.RightId).HasColumnName("RightID");

            entity.Property(e => e.BrokerId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("BrokerID");

            entity.Property(e => e.BuyPrice).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.ClosureDate).HasColumnType("datetime");

            entity.Property(e => e.Comments).HasColumnType("text");

            entity.Property(e => e.DepositId).HasColumnName("DepositID");

            entity.Property(e => e.ExtraCost).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.ExtraUnitCost).HasColumnType("decimal(18, 2)");

            
                
                

            entity.Property(e => e.Narration)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.QualifyDate).HasColumnType("datetime");

            entity.Property(e => e.ReversalId).HasColumnName("ReversalID");

            entity.Property(e => e.RightCost).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.RightType)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.SettlementDate).HasColumnType("datetime");

            entity.Property(e => e.ShareId).HasColumnName("ShareID");

            entity.Property(e => e.Status)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.TransType)
                .HasMaxLength(2)
                .IsUnicode(false);

            entity.Property(e => e.UniqueId).HasColumnName("UniqueID");

            entity.Property(e => e.UnitCost).HasColumnType("decimal(18, 2)");
        });

        modelBuilder.Entity<EqRightAll>(entity =>
        {
            entity.HasKey(e => e.IdRightAllocation);

            entity.ToTable("EqRightAll");

            entity.HasIndex(e => new { e.RightId, e.PortfolioId }, "Key_EqRightAll_Unique")
                .IsUnique();

            entity.Property(e => e.IdRightAllocation).HasColumnName("ID_RightAllocation");

            entity.Property(e => e.AllocatedCost).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.ExtraCost).HasColumnType("decimal(18, 2)");

            
                
                

            entity.Property(e => e.PortfolioId).HasColumnName("PortfolioID");

            entity.Property(e => e.RightId).HasColumnName("RightID");
        });

        modelBuilder.Entity<EqRsaAll>(entity =>
        {
            entity.HasKey(e => e.IdEqRsaAll);

            entity.ToTable("EqRSaAll");

            entity.HasIndex(e => new { e.SaleId, e.PortfolioId }, "KeySaleIDPortfolio")
                .IsUnique();

            entity.Property(e => e.IdEqRsaAll).HasColumnName("ID_EqRSaAll");

            entity.Property(e => e.Commision).HasColumnType("decimal(18, 2)");

            
                
                

            entity.Property(e => e.PortfolioId).HasColumnName("PortfolioID");

            entity.Property(e => e.ProfitLoss).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.SaleId).HasColumnName("SaleID");

            entity.Property(e => e.SalesProceed).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.ShareId).HasColumnName("ShareID");
        });

        modelBuilder.Entity<EqSectorAllocation>(entity =>
        {
            entity.HasKey(e => e.IdSectorAllocation);

            entity.ToTable("EqSectorAllocation");

            entity.HasIndex(e => new { e.IdPortfolioGroup, e.IdEconomicSector }, "Key_EqSectorAllocation_Unique")
                .IsUnique();

            entity.Property(e => e.IdSectorAllocation).HasColumnName("ID_SectorAllocation");

            entity.Property(e => e.IdEconomicSector).HasColumnName("ID_EconomicSector");

            entity.Property(e => e.IdPortfolioGroup).HasColumnName("ID_PortfolioGroup");

            entity.Property(e => e.MaxPcent).HasColumnType("decimal(18, 2)");

            
                
                
        });

        modelBuilder.Entity<EqSellTriger>(entity =>
        {
            entity.HasKey(e => e.IdSellTriger);

            entity.ToTable("EqSellTriger");

            entity.HasIndex(e => e.Description, "Key_EqSellTriger_Description")
                .IsUnique();

            entity.Property(e => e.IdSellTriger).HasColumnName("ID_SellTriger");

            entity.Property(e => e.Description)
                .HasMaxLength(100)
                .IsUnicode(false);

            
                
                

            entity.Property(e => e.SellAtPrice).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.SellProfitMargin).HasColumnType("decimal(18, 2)");
        });

        modelBuilder.Entity<EqStockAllocation>(entity =>
        {
            entity.HasKey(e => e.IdStockAllocation);

            entity.ToTable("EqStockAllocation");

            entity.HasIndex(e => new { e.IdPortfolioGroup, e.ShareId }, "FK_EqStockAllocation_Unique")
                .IsUnique();

            entity.HasIndex(e => new { e.IdPortfolioGroup, e.IdEconomicSector }, "Key_EqStockAllocation_EcoSectorAndPrtGroup");

            entity.Property(e => e.IdStockAllocation).HasColumnName("ID_StockAllocation");

            entity.Property(e => e.IdEconomicSector).HasColumnName("ID_EconomicSector");

            entity.Property(e => e.IdPortfolioGroup).HasColumnName("ID_PortfolioGroup");

            entity.Property(e => e.MaxPcent).HasColumnType("decimal(18, 2)");

            
                
                

            entity.Property(e => e.ShareId).HasColumnName("ShareID");
        });

        modelBuilder.Entity<EqSwap>(entity =>
        {
            entity.HasKey(e => e.SwapId)
                .HasName("KeyEqSwapID");

            entity.ToTable("EqSwap");

            entity.HasIndex(e => e.ShareId, "KeyEqSwapShare");

            entity.Property(e => e.SwapId).HasColumnName("SwapID");

            entity.Property(e => e.BuyBrokerComision).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.BuylBrokerRate).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.Comments).HasColumnType("text");

            entity.Property(e => e.Consideration).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.FromCostBf)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("FromCostBF");

            entity.Property(e => e.FromCostCf)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("FromCostCF");

            entity.Property(e => e.FromCsCsId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("FromCsCsID");

            entity.Property(e => e.FromInvActNo)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.FromQtyBf).HasColumnName("FromQtyBF");

            entity.Property(e => e.FromQtyCf).HasColumnName("FromQtyCF");

            entity.Property(e => e.GlPostPeriod)
                .HasMaxLength(6)
                .IsUnicode(false);

            entity.Property(e => e.GlpostDate)
                .HasColumnType("datetime")
                .HasColumnName("GLPostDate");

            
                
                

            entity.Property(e => e.Narration)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.ReversalId).HasColumnName("ReversalID");

            entity.Property(e => e.SellBrokerComision).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.SellBrokerRate).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.SettlementDate).HasColumnType("datetime");

            entity.Property(e => e.ShareId).HasColumnName("ShareID");

            entity.Property(e => e.Status)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.ToCostBf)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("ToCostBF");

            entity.Property(e => e.ToCostCf)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("ToCostCF");

            entity.Property(e => e.ToCsCsId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("ToCsCsID");

            entity.Property(e => e.ToInvActNo)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.ToQtyBf).HasColumnName("ToQtyBF");

            entity.Property(e => e.ToQtyCf).HasColumnName("ToQtyCF");

            entity.Property(e => e.TransferCost).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.TransferDate).HasColumnType("datetime");

            entity.Property(e => e.TransferPrice).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.VoucherNo)
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<EqTraAll>(entity =>
        {
            entity.HasKey(e => e.EquityAllocationId)
                .HasName("KeyEquityAllocation");

            entity.ToTable("EqTraAll");

            entity.HasIndex(e => e.PortfolioId, "KeyPortfolio");

            entity.HasIndex(e => e.ShareId, "KeyShareID");

            entity.HasIndex(e => new { e.UniqueId, e.PortfolioId }, "KeyUniqueID");

            entity.HasIndex(e => new { e.ShareId, e.IssueDate }, "Key_EqTraAll_ByDate");

            entity.HasIndex(e => new { e.IssueId, e.IssueDate }, "Key_EqTraAll_Speed01");

            entity.HasIndex(e => new { e.PortfolioId, e.CrDr, e.IssueDate }, "Key_EqTraAll_Speed_01");

            entity.Property(e => e.EquityAllocationId).HasColumnName("EquityAllocationID");

            entity.Property(e => e.AllocatedCost).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.BookCost).HasColumnType("decimal(18, 8)");

            entity.Property(e => e.CerificateQty).HasColumnType("decimal(18, 8)");

            entity.Property(e => e.CostOfSales).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.CrDr)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.Cscsid)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("CSCSID")
                .IsFixedLength();

            entity.Property(e => e.Cscsqty)
                .HasColumnType("decimal(18, 8)")
                .HasColumnName("CSCSQty");

            entity.Property(e => e.IdSellTriger).HasColumnName("ID_SellTriger");

            entity.Property(e => e.InvestorAccountNo)
                .HasMaxLength(15)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.IssueDate).HasColumnType("datetime");

            entity.Property(e => e.IssueId)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("IssueID")
                .IsFixedLength();

            entity.Property(e => e.LastMarketPrice).HasColumnType("decimal(18, 8)");

            entity.Property(e => e.LastValuationDate).HasColumnType("datetime");

            entity.Property(e => e.LodgementDate).HasColumnType("datetime");

            entity.Property(e => e.MarketValue).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.MatchId).HasColumnName("MatchID");

            
                
                

            entity.Property(e => e.NetAssetValue).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.PortfolioGroupId).HasColumnName("PortfolioGroupID");

            entity.Property(e => e.PortfolioId).HasColumnName("PortfolioID");

            entity.Property(e => e.QtySold).HasColumnType("decimal(18, 8)");

            entity.Property(e => e.QtyUnit).HasColumnType("decimal(18, 8)");

            entity.Property(e => e.SalesProceed).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.SalesType)
                .HasMaxLength(8)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.ShareId).HasColumnName("ShareID");

            entity.Property(e => e.UnRealisedGainLoss).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.UniqueId).HasColumnName("UniqueID");

            entity.Property(e => e.UnitCost).HasColumnType("decimal(18, 8)");
        });

        modelBuilder.Entity<EqTrea>(entity =>
        {
            entity.HasKey(e => e.UniqueId)
                .HasName("KeyUniqueID");

            entity.HasIndex(e => new { e.Status, e.IssueDate, e.LodgementDate }, "EqTreas_SpeedUp_01");

            entity.HasIndex(e => e.Status, "IX_EqTreas_Status");

            entity.HasIndex(e => e.AdjustId, "KeyAdjustID");

            entity.HasIndex(e => e.ShareId, "KeyShareID");

            entity.HasIndex(e => e.AnnualId, "Key_EqTreas_AnnualID");

            entity.HasIndex(e => new { e.ContractNoteNo, e.CrDr }, "Key_EqTreas_ContractNoteNo");

            entity.Property(e => e.UniqueId).HasColumnName("UniqueID");

            entity.Property(e => e.AdjRemarks)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.AdjustId).HasColumnName("AdjustID");

            entity.Property(e => e.AnnualId).HasColumnName("AnnualID");

            entity.Property(e => e.AnnualIdSave).HasColumnName("AnnualID_Save");

            entity.Property(e => e.BankId).HasColumnName("BankID");

            entity.Property(e => e.BookCost).HasColumnType("decimal(18, 8)");

            entity.Property(e => e.BrokerId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("BrokerID");

            entity.Property(e => e.CapturedBy)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.CertificateQty).HasColumnType("decimal(18, 8)");

            entity.Property(e => e.ChequeNo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.ComissionRate).HasColumnType("decimal(18, 8)");

            entity.Property(e => e.Comments).HasColumnType("text");

            entity.Property(e => e.Commission).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.Consideration).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.ContractNoteNo)
                .HasMaxLength(15)
                .IsUnicode(false);

            entity.Property(e => e.CostOfSales).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.CrDr)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.Cscsid)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("CSCSID")
                .IsFixedLength();

            entity.Property(e => e.Cscsqty)
                .HasColumnType("decimal(18, 8)")
                .HasColumnName("CSCSQty");

            entity.Property(e => e.Cscstransaction).HasColumnName("CSCSTransaction");

            entity.Property(e => e.DepositId).HasColumnName("DepositID");

            entity.Property(e => e.Discount).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.DividendId).HasColumnName("DividendID");

            entity.Property(e => e.ExRate).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.GlPostPeriod)
                .HasMaxLength(6)
                .IsUnicode(false);

            entity.Property(e => e.GlpostDate)
                .HasColumnType("datetime")
                .HasColumnName("GLPostDate");

            entity.Property(e => e.IdComplianceOverrideDetails).HasColumnName("ID_ComplianceOverrideDetails");

            entity.Property(e => e.IdEquityMandateExecution).HasColumnName("ID_EquityMandateExecution");

            entity.Property(e => e.IdSellTriger).HasColumnName("ID_SellTriger");

            entity.Property(e => e.IdShareMandateDetail).HasColumnName("ID_ShareMandateDetail");

            entity.Property(e => e.IdTransactionProcess).HasColumnName("ID_TransactionProcess");

            entity.Property(e => e.InvestorAccountNo)
                .HasMaxLength(15)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.IssueDate).HasColumnType("datetime");

            entity.Property(e => e.IssueId)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("IssueID")
                .IsFixedLength();

            entity.Property(e => e.LastMarketPrice).HasColumnType("decimal(18, 8)");

            entity.Property(e => e.LastValuationDate).HasColumnType("datetime");

            entity.Property(e => e.LodgementDate).HasColumnType("datetime");

            entity.Property(e => e.MarketPrice).HasColumnType("decimal(18, 4)");

            entity.Property(e => e.MarketType)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.MarketValue).HasColumnType("decimal(18, 2)");

            
                
                

            entity.Property(e => e.Narration)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.NetAssetValue).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.NseCscsfees)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("NseCSCSFees");

            entity.Property(e => e.OtherFees).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.PaidUpAmount).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.Post2Gl).HasColumnName("Post2GL");

            entity.Property(e => e.Premuim).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.QtySold).HasColumnType("decimal(18, 8)");

            entity.Property(e => e.QtyUnit).HasColumnType("decimal(18, 8)");

            entity.Property(e => e.ReversalId).HasColumnName("ReversalID");

            entity.Property(e => e.RightId).HasColumnName("RightID");

            entity.Property(e => e.SalesType)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.SecFees).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.SettlementDate).HasColumnType("datetime");

            entity.Property(e => e.ShareId).HasColumnName("ShareID");

            entity.Property(e => e.StampDuty).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.Status)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.TotalCost).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.TransType)
                .HasMaxLength(2)
                .IsUnicode(false);

            entity.Property(e => e.TransactionCost).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.TransferNo)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.UnRealisedGainLoss).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.UnitCost).HasColumnType("decimal(18, 8)");

            entity.Property(e => e.Vat)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VAT");

            entity.Property(e => e.VoucherNo)
                .HasMaxLength(11)
                .IsUnicode(false);
        });

        modelBuilder.Entity<EqType>(entity =>
        {
            entity.HasKey(e => e.TypeId)
                .HasName("KeyEquityTypes");

            entity.HasIndex(e => e.IdOutCashForeCastClass, "Key_EqTypes_ID_OutCashForeCastClass");

            entity.Property(e => e.TypeId)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("TypeID")
                .IsFixedLength();

            entity.Property(e => e.IdCashForeCastClass)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("ID_CashForeCastClass");

            entity.Property(e => e.IdInvestmentType)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("ID_InvestmentType");

            entity.Property(e => e.IdOutCashForeCastClass)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("ID_OutCashForeCastClass");

            
                
                

            entity.Property(e => e.PencomCode)
                .HasMaxLength(10)
                .IsUnicode(false);

            entity.Property(e => e.ShareClass)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.Title)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<EqtSplit>(entity =>
        {
            entity.HasKey(e => e.IdEqtSplit);

            entity.ToTable("EqtSplit");

            entity.HasIndex(e => e.UniqueId, "Key_EqtSplit_UniqueID");

            entity.HasIndex(e => new { e.UniqueId, e.ContractNoteNo }, "Key_EqtSplit_UniqueID_ContractID")
                .IsUnique();

            entity.Property(e => e.IdEqtSplit).HasColumnName("ID_EqtSplit");

            entity.Property(e => e.Commission).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.Consideration).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.ContractNoteNo)
                .HasMaxLength(15)
                .IsUnicode(false);

            entity.Property(e => e.Cscsqty).HasColumnName("CSCSQty");

            entity.Property(e => e.Discount).HasColumnType("decimal(18, 2)");

            
                
                

            entity.Property(e => e.NewUniqueId).HasColumnName("NewUniqueID");

            entity.Property(e => e.NseCscsfees)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("NseCSCSFees");

            entity.Property(e => e.OtherFees).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.Premuim).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.SecFees).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.StampDuty).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.TotalCost).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.TransactionCost).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.UniqueId).HasColumnName("UniqueID");

            entity.Property(e => e.UnitCost).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.Vat)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VAT");
        });

        modelBuilder.Entity<EquityBrokersDrCrRequisition>(entity =>
        {
            entity.HasKey(e => e.IdEquityBrokersDrCrRequisition);

            entity.ToTable("EquityBrokersDrCrRequisition");

            entity.HasIndex(e => e.Narration, "Key_EquityBrokersDrCrRequisition_Narration");

            entity.Property(e => e.IdEquityBrokersDrCrRequisition).HasColumnName("ID_EquityBrokersDrCrRequisition");

            entity.Property(e => e.Amount).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.ApprovalDate).HasColumnType("datetime");

            entity.Property(e => e.ApprovedBy)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.BrokerId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("BrokerID");

            entity.Property(e => e.CapturedBy)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.Comments).HasColumnType("text");

            entity.Property(e => e.GlpostDate)
                .HasColumnType("datetime")
                .HasColumnName("GLPostDate");

            entity.Property(e => e.IdCurrency)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("ID_Currency");

            entity.Property(e => e.IdPortfolio).HasColumnName("ID_Portfolio");

            
                
                

            entity.Property(e => e.Narration)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.RequestType)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.ReversalId).HasColumnName("ReversalID");

            entity.Property(e => e.Status)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.TransactionType)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.ValueDate).HasColumnType("datetime");

            entity.Property(e => e.VoucherNo)
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<EquityBrokersDreditCredit>(entity =>
        {
            entity.HasKey(e => e.IdEquityBrokersDreditCredit);

            entity.ToTable("EquityBrokersDreditCredit");

            entity.HasIndex(e => e.Narration, "Key_EquityBrokersDreditCredit_Narration");

            entity.Property(e => e.IdEquityBrokersDreditCredit).HasColumnName("ID_EquityBrokersDreditCredit");

            entity.Property(e => e.Amount).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.BrokerId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("BrokerID");

            entity.Property(e => e.DepositId).HasColumnName("DepositID");

            entity.Property(e => e.IdCurrency)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("ID_Currency");

            entity.Property(e => e.IdEquityBrokersDrCrRequisition).HasColumnName("ID_EquityBrokersDrCrRequisition");

            entity.Property(e => e.IdPortfolio).HasColumnName("ID_portfolio");

            entity.Property(e => e.IssueDate).HasColumnType("datetime");

            entity.Property(e => e.MemoType)
                .HasMaxLength(10)
                .IsUnicode(false);

            
                
                

            entity.Property(e => e.Narration)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.Status)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.UniqueId).HasColumnName("UniqueID");
        });

        modelBuilder.Entity<EquityMandateDetail>(entity =>
        {
            entity.HasKey(e => e.IdEquityMandateDetails);

            entity.HasIndex(e => new { e.IdEquityMandateMaster, e.ShareId }, "Key_EquityMandateDetails_Unique")
                .IsUnique();

            entity.Property(e => e.IdEquityMandateDetails).HasColumnName("ID_EquityMandateDetails");

            entity.Property(e => e.Amount).HasColumnType("decimal(20, 2)");

            entity.Property(e => e.AmountExecuted).HasColumnType("decimal(20, 2)");

            entity.Property(e => e.AmountIssued).HasColumnType("decimal(20, 2)");

            entity.Property(e => e.IdEquityMandateMaster).HasColumnName("ID_EquityMandateMaster");

            entity.Property(e => e.IdPortfolio).HasColumnName("ID_portfolio");

            entity.Property(e => e.MaxPrice).HasColumnType("decimal(18, 4)");

            
                
                

            entity.Property(e => e.QtyUnits).HasColumnType("decimal(24, 4)");

            entity.Property(e => e.ShareId).HasColumnName("ShareID");

            entity.Property(e => e.UnitsExecuted).HasColumnType("decimal(24, 4)");

            entity.Property(e => e.UnitsIssued).HasColumnType("decimal(24, 4)");
        });

        modelBuilder.Entity<EquityMandateExecution>(entity =>
        {
            entity.HasKey(e => e.IdEquityMandateExecution);

            entity.ToTable("EquityMandateExecution");

            entity.HasIndex(e => e.Narration, "Key_EquityMandateExecution_Narration");

            entity.Property(e => e.IdEquityMandateExecution).HasColumnName("ID_EquityMandateExecution");

            entity.Property(e => e.ApprovalDate).HasColumnType("datetime");

            entity.Property(e => e.ApprovedBy)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.BrokerId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("BrokerID");

            entity.Property(e => e.CaptureDate).HasColumnType("datetime");

            entity.Property(e => e.CapturedBy)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.Comments).HasColumnType("text");

            entity.Property(e => e.ContractNoteNo)
                .HasMaxLength(15)
                .IsUnicode(false);

            entity.Property(e => e.ContractNoteValue).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.ExecutionDate).HasColumnType("datetime");

            entity.Property(e => e.IdBankAccount)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("ID_BankAccount");

            entity.Property(e => e.IdComplianceOverRideMaster).HasColumnName("ID_ComplianceOverRideMaster");

            entity.Property(e => e.IdEquityMandateToBrokers).HasColumnName("ID_EquityMandateToBrokers");

            entity.Property(e => e.IdPortfolioCustodian).HasColumnName("ID_PortfolioCustodian");

            
                
                

            entity.Property(e => e.Narration)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.Status)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.TransType)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<EquityMandateMaster>(entity =>
        {
            entity.HasKey(e => e.IdEquityMandateMaster);

            entity.ToTable("EquityMandateMaster");

            entity.HasIndex(e => e.Narration, "Key_EquityMandateMaster_Narration");

            entity.HasIndex(e => new { e.IdPortfolio, e.CaptureDate, e.TransactionType }, "Key_EquityMandateMaster_Unique")
                .IsUnique();

            entity.Property(e => e.IdEquityMandateMaster).HasColumnName("ID_EquityMandateMaster");

            entity.Property(e => e.AmountToInvest).HasColumnType("decimal(20, 2)");

            entity.Property(e => e.ApprovedBy)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.ApprovedDate).HasColumnType("datetime");

            entity.Property(e => e.CaptureDate).HasColumnType("datetime");

            entity.Property(e => e.CapturedBy)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.Comments).HasColumnType("text");

            entity.Property(e => e.ExpireDate).HasColumnType("datetime");

            entity.Property(e => e.IdPortfolio).HasColumnName("ID_portfolio");

            entity.Property(e => e.MarketType)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            
                
                

            entity.Property(e => e.Narration)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.Property(e => e.QtyUnitsToSell).HasColumnType("decimal(24, 4)");

            entity.Property(e => e.ReviewedBy)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.Status)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.TransactionType)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<EquityMandateToBroker>(entity =>
        {
            entity.HasKey(e => e.IdEquityMandateToBrokers);

            entity.HasIndex(e => e.Narration, "Key_EquityMandateToBrokers_Narration");

            entity.Property(e => e.IdEquityMandateToBrokers).HasColumnName("ID_EquityMandateToBrokers");

            entity.Property(e => e.Amount).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.ApprovalDate).HasColumnType("datetime");

            entity.Property(e => e.ApprovedBy)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.BrokerId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("BrokerID");

            entity.Property(e => e.CapturedBy)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.Comments).HasColumnType("text");

            entity.Property(e => e.ExpireDate).HasColumnType("datetime");

            entity.Property(e => e.IdComplianceOverRideMaster).HasColumnName("ID_ComplianceOverRideMaster");

            entity.Property(e => e.IdEquityMandateMaster).HasColumnName("ID_EquityMandateMaster");

            entity.Property(e => e.IdPortfolio).HasColumnName("ID_Portfolio");

            entity.Property(e => e.MandateDate).HasColumnType("datetime");

            entity.Property(e => e.MandateType)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            
                
                

            entity.Property(e => e.Narration)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.ReferenceNo)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.Property(e => e.ReviewedBy)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.RevisedFromId).HasColumnName("Revised_From_ID");

            entity.Property(e => e.Status)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<EquityPurchaseAlertMaster>(entity =>
        {
            entity.HasKey(e => e.IdEquityPurchaseAlertMaster);

            entity.ToTable("EquityPurchaseAlertMaster");

            entity.Property(e => e.IdEquityPurchaseAlertMaster).HasColumnName("ID_EquityPurchaseAlertMaster");

            entity.Property(e => e.AlertDate).HasColumnType("datetime");

            entity.Property(e => e.AlertPrice).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.BeginDate).HasColumnType("datetime");

            entity.Property(e => e.Comments).HasColumnType("text");

            entity.Property(e => e.EndDate).HasColumnType("datetime");

            entity.Property(e => e.IdPortfolio).HasColumnName("ID_Portfolio");

            
                
                

            entity.Property(e => e.Narration)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.ShareId).HasColumnName("ShareID");

            entity.Property(e => e.Status)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<EquityResult>(entity =>
        {
            entity.HasNoKey();

            entity.ToTable("Equity_Result");

            entity.Property(e => e.Bonus).HasColumnName("BONUS");

            entity.Property(e => e.CurrentPrice).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.Dividend).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.EndDate).HasColumnType("datetime");

            entity.Property(e => e.FlatDiff).HasColumnType("decimal(18, 8)");

            entity.Property(e => e.Gain).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.IdEquityResult)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID_EquityResult");

            entity.Property(e => e.MarketValue).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.NetAmountCost).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.Nominal).HasColumnType("decimal(28, 4)");

            entity.Property(e => e.QtySold).HasColumnType("decimal(28, 4)");

            entity.Property(e => e.SalesId).HasColumnName("SalesID");

            entity.Property(e => e.SalesProceed).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.ShareId).HasColumnName("ShareID");

            entity.Property(e => e.TotalQty).HasColumnType("decimal(28, 4)");

            entity.Property(e => e.TotalValue).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.TransId)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.ValueDate).HasColumnType("datetime");

            entity.Property(e => e.WeightReturns).HasColumnType("decimal(18, 8)");

            entity.Property(e => e.WeightedAverage).HasColumnType("decimal(18, 8)");
        });

        modelBuilder.Entity<EquitySalesTriger>(entity =>
        {
            entity.HasKey(e => e.IdEquitySalesTriger);

            entity.ToTable("EquitySalesTriger");

            entity.Property(e => e.IdEquitySalesTriger).HasColumnName("ID_EquitySalesTriger");

            entity.Property(e => e.Advise)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.CostPrice).HasColumnType("decimal(24, 2)");

            entity.Property(e => e.Gain).HasColumnType("decimal(24, 2)");

            entity.Property(e => e.IdPortfolio).HasColumnName("ID_Portfolio");

            entity.Property(e => e.IdSellTriger).HasColumnName("ID_SellTriger");

            entity.Property(e => e.Loss).HasColumnType("decimal(24, 2)");

            entity.Property(e => e.LossTriger).HasColumnType("decimal(18, 2)");

            
                
                

            entity.Property(e => e.ProfitTriger).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.PurchaseDate).HasColumnType("datetime");

            entity.Property(e => e.QtyOwned).HasColumnType("decimal(28, 4)");

            entity.Property(e => e.ShareId).HasColumnName("ShareID");

            entity.Property(e => e.Symbol)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.UniqueId).HasColumnName("UniqueID");
        });

        modelBuilder.Entity<ExcRate>(entity =>
        {
            entity.ToTable("ExcRate");

            entity.HasIndex(e => e.CurrencyId, "KeyCurrencyID");

            entity.Property(e => e.ExcRateId).HasColumnName("ExcRate_ID");

            entity.Property(e => e.CurrencyId)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("CurrencyID")
                .IsFixedLength();

            entity.Property(e => e.EffectiveDate).HasColumnType("datetime");

            entity.Property(e => e.ExchangeRate).HasColumnType("decimal(18, 4)");

            
                
                
        });

        modelBuilder.Entity<ExistingClientOrder>(entity =>
        {
            entity.HasKey(e => e.InvestOrderId);

            entity.ToTable("ExistingClientOrder");

            entity.Property(e => e.Amount).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.IdCurrency)
                .HasMaxLength(5)
                .HasColumnName("ID_Currency")
                .IsFixedLength();

            entity.Property(e => e.IdPortfolio).HasColumnName("ID_Portfolio");

            entity.Property(e => e.TransactionDate).HasColumnType("datetime");

            entity.Property(e => e.TransactionReference).HasMaxLength(50);

            entity.Property(e => e.Ucid).HasColumnName("UCID");
        });
        
        modelBuilder.Entity<WalletTransaction>(entity =>
        {
            entity.HasKey(e => e.WalletTransactionId);

            entity.ToTable("WalletTransaction");

            entity.Property(e => e.Amount).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.IdCurrency)
                .HasMaxLength(5)
                .HasColumnName("ID_Currency")
                .IsFixedLength();

            entity.Property(e => e.TransactionStatus).HasMaxLength(1);

            entity.Property(e => e.TransactionDate).HasColumnType("datetime");

            entity.Property(e => e.TransactionReference).HasMaxLength(50);

            entity.Property(e => e.Ucid).HasColumnName("UCID");
        });

        modelBuilder.Entity<ExportLayout>(entity =>
        {
            entity.HasKey(e => e.IdExportLayout);

            entity.ToTable("ExportLayout");

            entity.HasIndex(e => new { e.SoftCode, e.FieldPosition }, "Key_ExportLayout_Unique")
                .IsUnique();

            entity.Property(e => e.IdExportLayout).HasColumnName("ID_ExportLayout");

            entity.Property(e => e.CrSign)
                .HasMaxLength(3)
                .IsUnicode(false);

            entity.Property(e => e.DateFormat)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.DateToken)
                .HasMaxLength(10)
                .IsUnicode(false);

            entity.Property(e => e.DrSign)
                .HasMaxLength(3)
                .IsUnicode(false);

            entity.Property(e => e.FieldName)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.FixedData)
                .HasMaxLength(10)
                .IsUnicode(false);

            entity.Property(e => e.Formular)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.IdBankSoftware).HasColumnName("ID_BankSoftware");

            
                
                

            entity.Property(e => e.SoftCode)
                .HasMaxLength(4)
                .IsUnicode(false);

            entity.Property(e => e.TreatAmounAs)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<ExportedCashBook>(entity =>
        {
            entity.HasKey(e => e.IdPortfolioAccount)
                .HasName("PK_ExportedPortfolioAccount");

            entity.ToTable("ExportedCashBook");

            entity.Property(e => e.IdPortfolioAccount)
                .ValueGeneratedNever()
                .HasColumnName("ID_PortfolioAccount");

            entity.Property(e => e.ExportDate)
                .HasColumnType("datetime")
                .HasDefaultValueSql("(getdate())");

            
                
                
        });

        modelBuilder.Entity<ExportedGlentry>(entity =>
        {
            entity.HasKey(e => e.IdGlEntry);

            entity.ToTable("ExportedGLEntries");

            entity.Property(e => e.IdGlEntry)
                .ValueGeneratedNever()
                .HasColumnName("ID_GlEntry");

            entity.Property(e => e.ExportDate)
                .HasColumnType("datetime")
                .HasDefaultValueSql("(getdate())");

            
                
                
        });

        modelBuilder.Entity<ExtTrialBalance>(entity =>
        {
            entity.HasKey(e => e.IdExternalTb);

            entity.ToTable("Ext_TrialBalance");

            entity.HasIndex(e => e.AccountNo, "Key_Ext_TrialBalance_AccountNo");

            entity.HasIndex(e => new { e.AccountNo, e.TbDate }, "Key_Ext_TrialBalance_Unique")
                .IsUnique();

            entity.Property(e => e.IdExternalTb).HasColumnName("ID_ExternalTB");

            entity.Property(e => e.AccountName)
                .HasMaxLength(150)
                .IsUnicode(false);

            entity.Property(e => e.AccountNo)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.Balance).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.FundId)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("FundID");

            entity.Property(e => e.IbsGlActNo)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.MtdBalance)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("MTD_Balance");

            entity.Property(e => e.TbDate)
                .HasColumnType("datetime")
                .HasColumnName("TB_Date");

            entity.Property(e => e.YtdBalance)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("YTD_Balance");
        });

        modelBuilder.Entity<ExternalGlsetup>(entity =>
        {
            entity.HasKey(e => e.IdExternalGlsetup);

            entity.ToTable("ExternalGLSetup");

            entity.Property(e => e.IdExternalGlsetup)
                .ValueGeneratedNever()
                .HasColumnName("ID_ExternalGLSetup");

            entity.Property(e => e.DbName)
                .HasMaxLength(150)
                .IsUnicode(false);

            entity.Property(e => e.SqlServerName)
                .HasMaxLength(150)
                .IsUnicode(false);

            entity.Property(e => e.TableName)
                .HasMaxLength(150)
                .IsUnicode(false);
        });

        modelBuilder.Entity<ExternalTransfer>(entity =>
        {
            entity.HasKey(e => e.IdExternalTransfer);

            entity.ToTable("ExternalTransfer");

            entity.Property(e => e.IdExternalTransfer).HasColumnName("ID_ExternalTransfer");

            entity.Property(e => e.Amount).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.GlPostPeriod)
                .HasMaxLength(6)
                .IsUnicode(false);

            entity.Property(e => e.GlpostDate)
                .HasColumnType("datetime")
                .HasColumnName("GLPostDate");

            entity.Property(e => e.IdBranch)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("ID_Branch");

            entity.Property(e => e.IdDealMaster).HasColumnName("ID_DealMaster");

            entity.Property(e => e.IdRequisitionMaster).HasColumnName("ID_RequisitionMaster");

            entity.Property(e => e.IdTermination).HasColumnName("ID_Termination");

            entity.Property(e => e.Interest).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.InterestAdjustment).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.InvestmentModule)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            
                
                

            entity.Property(e => e.Narration)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.Principal).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.TransType)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.TransferDate).HasColumnType("datetime");

            entity.Property(e => e.Utid).HasColumnName("UTID");

            entity.Property(e => e.VoucherNo)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Fe54e72527864bc3Bf99Ebb14b7de7be>(entity =>
        {
            entity.HasKey(e => e.IdBorrowAmortSchedule);

            entity.ToTable("FE54E725-2786-4BC3-BF99-EBB14B7DE7BE");

            entity.Property(e => e.IdBorrowAmortSchedule).HasColumnName("ID_BorrowAmortSchedule");

            entity.Property(e => e.CapitalisedPostedInterest).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.CloseBalance).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.DueDate).HasColumnType("datetime");

            entity.Property(e => e.EndDate).HasColumnType("datetime");

            entity.Property(e => e.IdBorrowMaster).HasColumnName("ID_BorrowMaster");

            entity.Property(e => e.IntAmount).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.IntPerDay).HasColumnType("decimal(31, 15)");

            entity.Property(e => e.OpenBalance).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.PrnAmount).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.RentalAmount).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.ReversalId).HasColumnName("ReversalID");

            entity.Property(e => e.UniqueUserId)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("UniqueUserID");

            entity.Property(e => e.WithTaxAmount).HasColumnType("decimal(18, 2)");
        });

        modelBuilder.Entity<FintrakBond>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("FintrakBonds");

            entity.Property(e => e.AssetValue).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.CleanAmount).HasColumnType("decimal(38, 6)");

            entity.Property(e => e.CostOfAsset).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.CostPrice).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.DailywriteoffIn)
                .HasColumnType("decimal(38, 13)")
                .HasColumnName("DAILYWRITEOFF/IN");

            entity.Property(e => e.EffectiveDate).HasColumnType("datetime");

            entity.Property(e => e.EndDate).HasColumnType("datetime");

            entity.Property(e => e.ExpectedDate).HasColumnType("datetime");

            entity.Property(e => e.FixedInterestRate).HasColumnType("decimal(18, 8)");

            entity.Property(e => e.Id2link).HasColumnName("ID2Link");

            entity.Property(e => e.IdPortfolio).HasColumnName("ID_Portfolio");

            entity.Property(e => e.IdTreatmentType)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("ID_TreatmentType");

            entity.Property(e => e.IntEndDate).HasColumnType("datetime");

            entity.Property(e => e.IntStartDate).HasColumnType("datetime");

            entity.Property(e => e.Interest2Date).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.Interestaccured)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("INTERESTACCURED");

            entity.Property(e => e.Marketvalue)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("MARKETVALUE");

            entity.Property(e => e.Narration)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.NorminalCost).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.Premdiscount)
                .HasColumnType("decimal(38, 13)")
                .HasColumnName("PREMDISCOUNT");

            entity.Property(e => e.Symbol)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.ValuationDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<FixedIncome>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("FixedIncome");

            entity.Property(e => e.Asset)
                .HasMaxLength(8)
                .IsUnicode(false);

            entity.Property(e => e.AssetClass)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.AssetValue).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.CostOfAsset).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.DayInterest).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.EffectiveDate).HasColumnType("datetime");

            entity.Property(e => e.Id2link).HasColumnName("ID2Link");

            entity.Property(e => e.IdPortfolio).HasColumnName("ID_Portfolio");

            entity.Property(e => e.IdValuation).HasColumnName("ID_Valuation");

            entity.Property(e => e.InterestRate).HasColumnType("decimal(31, 15)");

            entity.Property(e => e.MaturityDate).HasColumnType("datetime");

            entity.Property(e => e.ValuationDate).HasColumnType("datetime");

            entity.Property(e => e.YieldRate).HasColumnType("decimal(31, 15)");
        });

        modelBuilder.Entity<FixedInterestPaymentDetail>(entity =>
        {
            entity.HasKey(e => e.IdFixedInterestPaymentDetail);

            entity.ToTable("FixedInterestPaymentDetail");

            entity.Property(e => e.IdFixedInterestPaymentDetail).HasColumnName("ID_FixedInterestPaymentDetail");

            entity.Property(e => e.AccountName)
                .HasMaxLength(150)
                .IsUnicode(false);

            entity.Property(e => e.AccountNo)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.Amount).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.Amount2Pay).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.BankId)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("BankID");

            entity.Property(e => e.BeginDate).HasColumnType("datetime");

            entity.Property(e => e.CustomerName)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.Property(e => e.EndDate).HasColumnType("datetime");

            entity.Property(e => e.IdBorrowMaster).HasColumnName("ID_BorrowMaster");

            entity.Property(e => e.IdCurrency)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("ID_Currency");

            entity.Property(e => e.IdFixedInterestPaymentMaster).HasColumnName("ID_FixedInterestPaymentMaster");

            entity.Property(e => e.SuppressNote)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.Property(e => e.WithHoldTaxAmount).HasColumnType("decimal(18, 2)");
        });

        modelBuilder.Entity<FixedInterestPaymentMaster>(entity =>
        {
            entity.HasKey(e => e.IdFixedInterestPaymentMaster);

            entity.ToTable("FixedInterestPaymentMaster");

            entity.Property(e => e.IdFixedInterestPaymentMaster).HasColumnName("ID_FixedInterestPaymentMaster");

            entity.Property(e => e.ApprovedBy)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.ApprovedByHead)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.ApprovedByHeadDate).HasColumnType("datetime");

            entity.Property(e => e.ApprovedDate).HasColumnType("datetime");

            entity.Property(e => e.CaptureDate).HasColumnType("datetime");

            entity.Property(e => e.CapturedBy)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.Comments).HasColumnType("text");

            entity.Property(e => e.DisburesedDate).HasColumnType("datetime");

            entity.Property(e => e.DisbursedBy)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.DueDate).HasColumnType("datetime");

            entity.Property(e => e.GlpostDate)
                .HasColumnType("datetime")
                .HasColumnName("GLPostDate");

            entity.Property(e => e.IdBankAccount)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("ID_BankAccount");

            entity.Property(e => e.IdCurrency)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("ID_Currency");

            entity.Property(e => e.IdInvestmentType)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("ID_InvestmentType");

            entity.Property(e => e.IdPortfolio).HasColumnName("ID_Portfolio");

            entity.Property(e => e.IdProductType)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("ID_ProductType");

            entity.Property(e => e.Narration)
                .HasMaxLength(150)
                .IsUnicode(false);

            entity.Property(e => e.Status)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.TotalAmount).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.VerifiedBy)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.VerifiedDate).HasColumnType("datetime");

            entity.Property(e => e.VoucherNo)
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<ForexRevaluationDetail>(entity =>
        {
            entity.HasKey(e => e.IdForexRevaluationDetails);

            entity.Property(e => e.IdForexRevaluationDetails).HasColumnName("ID_ForexRevaluationDetails");

            entity.Property(e => e.CurrDate).HasColumnType("datetime");

            entity.Property(e => e.CurrExRate).HasColumnType("decimal(18, 4)");

            entity.Property(e => e.GainLoss).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.Id2link).HasColumnName("ID2Link");

            entity.Property(e => e.IdForexRevaluationMaster).HasColumnName("ID_ForexRevaluationMaster");

            entity.Property(e => e.IdInvestmentType)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("ID_InvestmentType");

            entity.Property(e => e.IdPortfolio).HasColumnName("ID_Portfolio");

            entity.Property(e => e.InvestmentModule)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            
                
                

            entity.Property(e => e.Narration)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.PrevDate).HasColumnType("datetime");

            entity.Property(e => e.PrevExRate).HasColumnType("decimal(18, 4)");
        });

        modelBuilder.Entity<ForexRevaluationMaster>(entity =>
        {
            entity.HasKey(e => e.IdForexRevaluationMaster);

            entity.ToTable("ForexRevaluationMaster");

            entity.HasIndex(e => e.Narration, "Key_ForexRevaluationMaster_Narration");

            entity.Property(e => e.IdForexRevaluationMaster).HasColumnName("ID_ForexRevaluationMaster");

            entity.Property(e => e.Amount).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.Comments).HasColumnType("text");

            entity.Property(e => e.GlpostDate)
                .HasColumnType("datetime")
                .HasColumnName("GLPostDate");

            entity.Property(e => e.IdPortfolio).HasColumnName("ID_Portfolio");

            
                
                

            entity.Property(e => e.Narration)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.PostedBy)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.ReversalId).HasColumnName("ReversalID");

            entity.Property(e => e.ValuationDate).HasColumnType("datetime");

            entity.Property(e => e.VoucherNo)
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<FraudReport>(entity =>
        {
            entity.HasKey(e => e.Sncode);

            entity.ToTable("FraudReport");

            entity.Property(e => e.Sncode).HasColumnName("SNCode");

            entity.Property(e => e.ActionDate)
                .HasColumnType("datetime")
                .HasColumnName("Action_Date");

            entity.Property(e => e.ActionTaken)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("Action_taken");

            entity.Property(e => e.ActualLoss).HasColumnName("Actual_loss");

            entity.Property(e => e.Address)
                .HasMaxLength(40)
                .IsUnicode(false);

            entity.Property(e => e.Category)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.DateCommitted)
                .HasColumnType("datetime")
                .HasColumnName("Date_Committed");

            entity.Property(e => e.Description)
                .HasMaxLength(40)
                .IsUnicode(false);

            entity.Property(e => e.Dob)
                .HasColumnType("datetime")
                .HasColumnName("DOB");

            entity.Property(e => e.FirstName)
                .HasMaxLength(30)
                .IsUnicode(false);

            entity.Property(e => e.FraudCode)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("Fraud_Code");

            entity.Property(e => e.FraudStatus)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("Fraud_Status");

            entity.Property(e => e.LastName)
                .HasMaxLength(30)
                .IsUnicode(false);

            entity.Property(e => e.MiddleName)
                .HasMaxLength(30)
                .IsUnicode(false);

            
                
                

            entity.Property(e => e.Nationality)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.PassportNo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("Passport_No");

            entity.Property(e => e.PfaCode)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("PFA_Code");

            entity.Property(e => e.PfaName)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("PFA_Name");

            entity.Property(e => e.Sex)
                .HasMaxLength(10)
                .IsUnicode(false);

            entity.Property(e => e.StaffCode)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("Staff_Code");

            entity.Property(e => e.StateCode)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("State_Code");
        });

        modelBuilder.Entity<FundManagerAccount>(entity =>
        {
            entity.HasKey(e => e.IdFundManagerAccount);

            entity.ToTable("FundManagerAccount");

            entity.Property(e => e.IdFundManagerAccount).HasColumnName("ID_FundManagerAccount");

            entity.Property(e => e.Amount).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.Being)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.Property(e => e.BrokerId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("BrokerID");

            entity.Property(e => e.ChequeNo)
                .HasMaxLength(10)
                .IsUnicode(false);

            entity.Property(e => e.CurExRate).HasColumnType("decimal(18, 6)");

            entity.Property(e => e.DepositId).HasColumnName("DepositID");

            entity.Property(e => e.GlPostPeriod)
                .HasMaxLength(6)
                .IsUnicode(false);

            entity.Property(e => e.GlpostDate)
                .HasColumnType("datetime")
                .HasColumnName("GLPostDate");

            entity.Property(e => e.IdBankAccount)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("ID_BankAccount");

            entity.Property(e => e.IdCurrency)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("ID_Currency");

            entity.Property(e => e.IdDealMaster).HasColumnName("ID_DealMaster");

            entity.Property(e => e.InstrumentType)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.InvestmentModule)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.LoanId).HasColumnName("LoanID");

            
                
                

            entity.Property(e => e.Payee)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.ReceiptNo)
                .HasMaxLength(10)
                .IsUnicode(false);

            entity.Property(e => e.ReversalDate).HasColumnType("datetime");

            entity.Property(e => e.ReversalId).HasColumnName("ReversalID");

            entity.Property(e => e.RightId).HasColumnName("RightID");

            entity.Property(e => e.SettlementDate).HasColumnType("datetime");

            entity.Property(e => e.ShareId).HasColumnName("ShareID");

            entity.Property(e => e.SourceBankId)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("SourceBankID");

            entity.Property(e => e.SourceLocation)
                .HasMaxLength(10)
                .IsUnicode(false);

            entity.Property(e => e.Status)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.TransactionDate).HasColumnType("datetime");

            entity.Property(e => e.UniqueId).HasColumnName("UniqueID");

            entity.Property(e => e.UnitCost).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.ValueDate).HasColumnType("datetime");

            entity.Property(e => e.VoucherNo)
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<FundManagerAllocation>(entity =>
        {
            entity.HasKey(e => e.IdFundManagerAllocation);

            entity.ToTable("FundManagerAllocation");

            entity.Property(e => e.IdFundManagerAllocation).HasColumnName("ID_FundManagerAllocation");

            entity.Property(e => e.Amount).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.BrokerId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("BrokerID");

            entity.Property(e => e.IdFundManagerAccount).HasColumnName("ID_FundManagerAccount");

            entity.Property(e => e.IdPortfolio).HasColumnName("ID_Portfolio");

            
                
                

            entity.Property(e => e.ValueDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<FundingDiary>(entity =>
        {
            entity.HasKey(e => e.IdFundingDiary);

            entity.ToTable("FundingDiary");

            entity.Property(e => e.IdFundingDiary).HasColumnName("ID_FundingDiary");

            entity.Property(e => e.ProcessDate).HasColumnType("datetime");

            entity.Property(e => e.RunBy)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.RunDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<GlOpen>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("GlOpen");

            entity.Property(e => e.AccountNo)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.CloseBalance).HasColumnType("numeric(18, 2)");

            entity.Property(e => e.IdGlopen)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID_GLOpen");

            entity.Property(e => e.OpenBalance).HasColumnType("numeric(18, 2)");

            entity.Property(e => e.PostPeriod)
                .HasMaxLength(6)
                .IsUnicode(false);
        });

        modelBuilder.Entity<GlopenBizUnit>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("GLOpenBizUnit");

            entity.Property(e => e.AccountNo)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.CloseBalance).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.IdBranch)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("ID_Branch");

            entity.Property(e => e.IdGlopenBizUnit)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID_GLOpenBizUnit");

            entity.Property(e => e.OpenBalance).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.PostPeriod)
                .HasMaxLength(6)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Holiday>(entity =>
        {
            entity.HasKey(e => e.IdHoliday);

            entity.ToTable("Holiday");

            entity.HasIndex(e => e.BeginDate, "Key_Holiday_BeginDate");

            entity.Property(e => e.IdHoliday).HasColumnName("ID_Holiday");

            entity.Property(e => e.BeginDate).HasColumnType("datetime");

            entity.Property(e => e.EndDate).HasColumnType("datetime");

            entity.Property(e => e.Holiday1)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Holiday");

            
                
                
        });

        modelBuilder.Entity<HolidayMaster>(entity =>
        {
            entity.HasKey(e => e.IdHolidayMaster);

            entity.ToTable("HolidayMaster");

            entity.Property(e => e.IdHolidayMaster).HasColumnName("ID_HolidayMaster");

            entity.Property(e => e.DayNunber)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.MonthNumber)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength();

            
                
                

            entity.Property(e => e.Narration)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<ICashTransfer>(entity =>
        {
            entity.HasKey(e => e.IdCashTransfer);

            entity.ToTable("iCashTransfer");

            entity.Property(e => e.IdCashTransfer).HasColumnName("ID_CashTransfer");

            entity.Property(e => e.AccountNumber)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.Amount).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.Direction)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.IdTransactionProcess).HasColumnName("ID_TransactionProcess");

            
                
                

            entity.Property(e => e.Pfacode)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("PFACode");

            entity.Property(e => e.SettlementDate).HasColumnType("datetime");

            entity.Property(e => e.SortCode)
                .HasMaxLength(10)
                .IsUnicode(false);

            entity.Property(e => e.TranDate).HasColumnType("datetime");

            entity.Property(e => e.TransactionType)
                .HasMaxLength(15)
                .IsUnicode(false);
        });

        modelBuilder.Entity<IEventConfirmation>(entity =>
        {
            entity.HasKey(e => e.IdEventConfirmation);

            entity.ToTable("iEventConfirmation");

            entity.Property(e => e.IdEventConfirmation).HasColumnName("ID_EventConfirmation");

            entity.Property(e => e.AccountNumber)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.ActualPayDate).HasColumnType("datetime");

            entity.Property(e => e.Amount).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.CallBackId).HasColumnName("CallBack_ID");

            entity.Property(e => e.CashInLieu).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.DeclarationDate).HasColumnType("datetime");

            entity.Property(e => e.EntitledPosition).HasColumnType("decimal(10, 2)");

            entity.Property(e => e.EventType)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.ExDate).HasColumnType("datetime");

            entity.Property(e => e.IdDealMaster).HasColumnName("ID_DealMaster");

            entity.Property(e => e.IdLoanMaster).HasColumnName("ID_LoanMaster");

            entity.Property(e => e.IdTransactionProcess).HasColumnName("ID_TransactionProcess");

            entity.Property(e => e.LegalRestrictions)
                .HasMaxLength(370)
                .IsUnicode(false);

            
                
                

            entity.Property(e => e.Narrative)
                .HasMaxLength(370)
                .IsUnicode(false);

            entity.Property(e => e.RecordDate).HasColumnType("datetime");

            entity.Property(e => e.ResultantSecName)
                .HasMaxLength(60)
                .IsUnicode(false);

            entity.Property(e => e.ResultantSecurity)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.SecurityCode)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.SecurityName)
                .HasMaxLength(60)
                .IsUnicode(false);

            entity.Property(e => e.SettlementDate).HasColumnType("datetime");

            entity.Property(e => e.ShareId).HasColumnName("ShareID");

            entity.Property(e => e.SkfAccountCode)
                .HasMaxLength(10)
                .IsUnicode(false);

            entity.Property(e => e.SkfAccountCodeName)
                .HasMaxLength(10)
                .IsUnicode(false);

            entity.Property(e => e.SortCode)
                .HasMaxLength(10)
                .IsUnicode(false);

            entity.Property(e => e.Status)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.Usedfor)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<IEventEntitlement>(entity =>
        {
            entity.HasKey(e => e.IdEventEntitlement);

            entity.ToTable("iEventEntitlement");

            entity.Property(e => e.IdEventEntitlement).HasColumnName("ID_EventEntitlement");

            entity.Property(e => e.ConversionDate).HasColumnType("datetime");

            entity.Property(e => e.DeclarationDate).HasColumnType("datetime");

            entity.Property(e => e.EventType)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.ExDate).HasColumnType("datetime");

            entity.Property(e => e.FractionMode)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.GrossIncomeDue).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.IdDealMaster).HasColumnName("ID_DealMaster");

            entity.Property(e => e.IdLoanMaster).HasColumnName("ID_LoanMaster");

            entity.Property(e => e.IdTransactionProcess).HasColumnName("ID_TransactionProcess");

            entity.Property(e => e.IntermediateSecurity)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.LegalRestrictions)
                .HasMaxLength(370)
                .IsUnicode(false);

            entity.Property(e => e.MeetingDate).HasColumnType("datetime");

            entity.Property(e => e.MeetingTimeVenue)
                .HasMaxLength(100)
                .IsUnicode(false);

            
                
                

            entity.Property(e => e.Narrative)
                .HasMaxLength(370)
                .IsUnicode(false);

            entity.Property(e => e.NetIncomeDue).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.PaymentDate).HasColumnType("datetime");

            entity.Property(e => e.ProxyDate).HasColumnType("datetime");

            entity.Property(e => e.Rate).HasColumnType("decimal(18, 4)");

            entity.Property(e => e.RecordDate).HasColumnType("datetime");

            entity.Property(e => e.RedemptionPrice).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.ResponseDate).HasColumnType("datetime");

            entity.Property(e => e.ResultantSecurity)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.SecurityAddress)
                .HasMaxLength(255)
                .IsUnicode(false);

            entity.Property(e => e.SecurityCode)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.SecurityName)
                .HasMaxLength(60)
                .IsUnicode(false);

            entity.Property(e => e.SettlementDate)
                .HasColumnType("datetime")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.SfkaccountCode)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("SFKAccountCode");

            entity.Property(e => e.ShareId).HasColumnName("ShareID");

            entity.Property(e => e.Status)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.SubscriptionPrice).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.TaxAmount).HasColumnType("decimal(18, 2)");
        });

        modelBuilder.Entity<IEventNotification>(entity =>
        {
            entity.HasKey(e => e.IdEventNotification);

            entity.ToTable("iEventNotification");

            entity.Property(e => e.IdEventNotification).HasColumnName("ID_EventNotification");

            entity.Property(e => e.ConversionDate).HasColumnType("datetime");

            entity.Property(e => e.DeclarationDate).HasColumnType("datetime");

            entity.Property(e => e.EventType)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.ExDate).HasColumnType("datetime");

            entity.Property(e => e.FractionMode)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.IdDealMaster).HasColumnName("ID_DealMaster");

            entity.Property(e => e.IdLoanMaster).HasColumnName("ID_LoanMaster");

            entity.Property(e => e.IdTransactionProcess).HasColumnName("ID_TransactionProcess");

            entity.Property(e => e.InterSecName)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.IntermediateSecurity)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.LegalRestrictions)
                .HasMaxLength(370)
                .IsUnicode(false);

            entity.Property(e => e.MeetingDate).HasColumnType("datetime");

            entity.Property(e => e.MeetingTimeVenue)
                .HasMaxLength(100)
                .IsUnicode(false);

            
                
                

            entity.Property(e => e.Narrative)
                .HasMaxLength(370)
                .IsUnicode(false);

            entity.Property(e => e.PaymentDate).HasColumnType("datetime");

            entity.Property(e => e.ProxyDate).HasColumnType("datetime");

            entity.Property(e => e.Rate).HasColumnType("decimal(18, 4)");

            entity.Property(e => e.RecordDate).HasColumnType("datetime");

            entity.Property(e => e.RedemptionPrice).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.ResSecName)
                .HasMaxLength(60)
                .IsUnicode(false);

            entity.Property(e => e.ResponseDate).HasColumnType("datetime");

            entity.Property(e => e.ResultantSecurity)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.SecurityAddress)
                .HasMaxLength(255)
                .IsUnicode(false);

            entity.Property(e => e.SecurityCode)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.SecurityName)
                .HasMaxLength(60)
                .IsUnicode(false);

            entity.Property(e => e.SettlementDate)
                .HasColumnType("datetime")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.ShareId).HasColumnName("ShareID");

            entity.Property(e => e.Status)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.SubscriptionPrice).HasColumnType("decimal(18, 2)");
        });

        modelBuilder.Entity<ISecurity>(entity =>
        {
            entity.HasKey(e => e.IdSecurities);

            entity.ToTable("iSecurities");

            entity.Property(e => e.IdSecurities).HasColumnName("ID_Securities");

            entity.Property(e => e.DayCountBasis)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.IdDealMaster).HasColumnName("ID_DealMaster");

            entity.Property(e => e.IdLoanMaster).HasColumnName("ID_LoanMaster");

            entity.Property(e => e.IsInCode)
                .HasMaxLength(15)
                .IsUnicode(false);

            entity.Property(e => e.IssuePrice).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.LastPaymentDate).HasColumnType("datetime");

            entity.Property(e => e.MaturityDate).HasColumnType("datetime");

            
                
                

            entity.Property(e => e.NextPaymentDate).HasColumnType("datetime");

            entity.Property(e => e.NominalValue).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.PaymentFrequency)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.PriceFactor).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.ProductType)
                .HasMaxLength(3)
                .IsUnicode(false);

            entity.Property(e => e.Rate).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.RedemptionDate).HasColumnType("datetime");

            entity.Property(e => e.SecType)
                .HasMaxLength(3)
                .IsUnicode(false);

            entity.Property(e => e.SectorCode)
                .HasMaxLength(10)
                .IsUnicode(false);

            entity.Property(e => e.SecurityCode)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.SecurityName)
                .HasMaxLength(60)
                .IsUnicode(false);

            entity.Property(e => e.ShareId).HasColumnName("ShareID");

            entity.Property(e => e.StartDate).HasColumnType("datetime");

            entity.Property(e => e.Status)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<ISettledPosition>(entity =>
        {
            entity.HasKey(e => e.IdSettledPosition);

            entity.ToTable("iSettledPosition");

            entity.Property(e => e.IdSettledPosition).HasColumnName("ID_SettledPosition");

            entity.Property(e => e.AccruedInterest).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.BookCost).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.HoldingDate).HasColumnType("datetime");

            entity.Property(e => e.IdDealMaster).HasColumnName("ID_DealMaster");

            entity.Property(e => e.IdLoanMaster).HasColumnName("ID_LoanMaster");

            entity.Property(e => e.Isincode)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("ISINCode");

            entity.Property(e => e.LocationCode)
                .HasMaxLength(4)
                .IsUnicode(false);

            entity.Property(e => e.MarketValue).HasColumnType("decimal(18, 2)");

            
                
                

            entity.Property(e => e.RegistrationPosition).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.SecurityCode)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.SecurityPrice).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.SfkaccountCode)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("SFKAccountCode");

            entity.Property(e => e.ShareId).HasColumnName("ShareID");

            entity.Property(e => e.Status)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.UnregisteredPosition).HasColumnType("decimal(18, 2)");
        });

        modelBuilder.Entity<ISettlementConfirmation>(entity =>
        {
            entity.HasKey(e => e.IdSettleConsfirmation);

            entity.ToTable("iSettlementConfirmation");

            entity.HasIndex(e => e.TradeReference, "Key_iSettlementConfirmation_TradeReference")
                .IsUnique();

            entity.Property(e => e.IdSettleConsfirmation).HasColumnName("ID_SettleConsfirmation");

            entity.Property(e => e.Asd)
                .HasColumnType("datetime")
                .HasColumnName("ASD");

            entity.Property(e => e.BookCost).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.BrokerCode)
                .HasMaxLength(10)
                .IsUnicode(false);

            entity.Property(e => e.BrokerComm).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.Cscscomm)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("CSCSComm");

            entity.Property(e => e.Csd)
                .HasColumnType("datetime")
                .HasColumnName("CSD");

            entity.Property(e => e.CurrencyCode)
                .HasMaxLength(3)
                .IsUnicode(false);

            entity.Property(e => e.ExchangeRate).HasColumnType("decimal(18, 4)");

            entity.Property(e => e.GrossSettAmt).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.IdDealMaster).HasColumnName("ID_DealMaster");

            entity.Property(e => e.IdLoanMaster).HasColumnName("ID_LoanMaster");

            entity.Property(e => e.InterestRate).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.Isincode)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("ISINCode");

            entity.Property(e => e.LocationCode)
                .HasMaxLength(4)
                .IsUnicode(false);

            entity.Property(e => e.MatchingDate).HasColumnType("datetime");

            
                
                

            entity.Property(e => e.NetSettAmt).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.OtherCharges).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.Price).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.Seccomm)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("SECComm");

            entity.Property(e => e.SecurityCode)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.SfkaccountCode)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("SFKAccountCode");

            entity.Property(e => e.ShareId).HasColumnName("ShareID");

            entity.Property(e => e.StampDuty).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.Status)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.Stxcomm)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("STXComm");

            entity.Property(e => e.TradeCode)
                .HasMaxLength(10)
                .IsUnicode(false);

            entity.Property(e => e.TradeDate).HasColumnType("datetime");

            entity.Property(e => e.TradeReference)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.TransactionDate)
                .HasColumnType("datetime")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.Vat)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VAT");
        });

        modelBuilder.Entity<ISettlementInstruction>(entity =>
        {
            entity.HasKey(e => e.IdSettleInstuction)
                .HasName("PK_SettlementInstruction");

            entity.ToTable("iSettlementInstruction");

            entity.HasIndex(e => e.TradeReference, "Key_iSettlementInstruction_TradeReference")
                .IsUnique();

            entity.Property(e => e.IdSettleInstuction).HasColumnName("ID_SettleInstuction");

            entity.Property(e => e.BrokerCode)
                .HasMaxLength(10)
                .IsUnicode(false);

            entity.Property(e => e.BrokerComm).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.CallBackId).HasColumnName("CallBackID");

            entity.Property(e => e.Comments).HasColumnType("text");

            entity.Property(e => e.ConfirmationDate).HasColumnType("datetime");

            entity.Property(e => e.Cscscomm)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("CSCSComm");

            entity.Property(e => e.Csd)
                .HasColumnType("datetime")
                .HasColumnName("CSD");

            entity.Property(e => e.DepositId).HasColumnName("DepositID");

            entity.Property(e => e.GrossSettAmt).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.IdDealMaster).HasColumnName("ID_DealMaster");

            entity.Property(e => e.IdInvestmentType)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("ID_InvestmentType");

            entity.Property(e => e.IdLoanMaster).HasColumnName("ID_LoanMaster");

            entity.Property(e => e.IdRealEstate).HasColumnName("ID_RealEstate");

            entity.Property(e => e.InstructionDate).HasColumnType("datetime");

            entity.Property(e => e.Isincode)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("ISINCode");

            entity.Property(e => e.MatchingDate).HasColumnType("datetime");

            
                
                

            entity.Property(e => e.Narration)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.NetSettAmt).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.OtherCharges).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.Price).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.RightId).HasColumnName("RightID");

            entity.Property(e => e.Seccomm)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("SECComm");

            entity.Property(e => e.SecurityCode)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.SfkaccountCode)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("SFKAccountCode");

            entity.Property(e => e.ShareId).HasColumnName("ShareID");

            entity.Property(e => e.StampDuty).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.Status)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.Stxcomm)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("STXComm");

            entity.Property(e => e.TradeCode)
                .HasMaxLength(10)
                .IsUnicode(false);

            entity.Property(e => e.TradeDate).HasColumnType("datetime");

            entity.Property(e => e.TradeReference)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.TransType)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.TransactionDate)
                .HasColumnType("datetime")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.UniqueId).HasColumnName("UniqueID");

            entity.Property(e => e.Vat)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VAT");
        });

        modelBuilder.Entity<ISettlementPending>(entity =>
        {
            entity.HasKey(e => e.IdSettlementPending);

            entity.ToTable("iSettlementPending");

            entity.Property(e => e.IdSettlementPending).HasColumnName("ID_SettlementPending");

            entity.Property(e => e.BookCost).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.BrokerCode)
                .HasMaxLength(10)
                .IsUnicode(false);

            entity.Property(e => e.BrokerComm).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.Cscscomm)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("CSCSComm");

            entity.Property(e => e.Csd)
                .HasColumnType("datetime")
                .HasColumnName("CSD");

            entity.Property(e => e.CurrencyCode)
                .HasMaxLength(3)
                .IsUnicode(false);

            entity.Property(e => e.ExchangeRate).HasColumnType("decimal(18, 4)");

            entity.Property(e => e.FailCode)
                .HasMaxLength(3)
                .IsUnicode(false);

            entity.Property(e => e.FailNote)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.Property(e => e.GrossSettAmt).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.IdDealMaster).HasColumnName("ID_DealMaster");

            entity.Property(e => e.IdLoanMaster).HasColumnName("ID_LoanMaster");

            entity.Property(e => e.InterestRate).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.Isincode)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("ISINCode");

            entity.Property(e => e.LocationCode)
                .HasMaxLength(4)
                .IsUnicode(false);

            entity.Property(e => e.Matching)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            
                
                

            entity.Property(e => e.NetSettAmt).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.Price).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.Seccomm)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("SECComm");

            entity.Property(e => e.SecurityCode)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.SfkaccountCode)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("SFKAccountCode");

            entity.Property(e => e.ShareId).HasColumnName("ShareID");

            entity.Property(e => e.StampDuty).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.Status)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.Stxcomm)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("STXComm");

            entity.Property(e => e.TradeCode)
                .HasMaxLength(10)
                .IsUnicode(false);

            entity.Property(e => e.TradeDate).HasColumnType("datetime");

            entity.Property(e => e.TradeReference)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.TransactionDate)
                .HasColumnType("datetime")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.Vat)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VAT");
        });

        modelBuilder.Entity<ITradePosition>(entity =>
        {
            entity.HasKey(e => e.IdTradePosition);

            entity.ToTable("iTradePosition");

            entity.Property(e => e.IdTradePosition).HasColumnName("ID_TradePosition");

            entity.Property(e => e.BookCost).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.HoldingDate).HasColumnType("datetime");

            entity.Property(e => e.IdDealMaster).HasColumnName("ID_DealMaster");

            entity.Property(e => e.IdLoanMaster).HasColumnName("ID_LoanMaster");

            entity.Property(e => e.Isincode)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("ISINCode");

            entity.Property(e => e.LocationCode)
                .HasMaxLength(4)
                .IsUnicode(false);

            entity.Property(e => e.MarketValue).HasColumnType("decimal(18, 2)");

            
                
                

            entity.Property(e => e.SecurityCode)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.SecurityPrice).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.SfkaccountCode)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("SFKAccountCode");

            entity.Property(e => e.ShareId).HasColumnName("ShareID");

            entity.Property(e => e.Status)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.TransactionDate)
                .HasColumnType("datetime")
                .HasDefaultValueSql("(getdate())");
        });

        modelBuilder.Entity<Ibs2OtherGlmapping>(entity =>
        {
            entity.HasKey(e => e.IdIbs2OtherGlmapping);

            entity.ToTable("Ibs2OtherGLMapping");

            entity.HasIndex(e => new { e.IbsAccountNo, e.FundId }, "Key_Ibs2OtherGLMapping_IbsAccountNo")
                .IsUnique();

            entity.Property(e => e.IdIbs2OtherGlmapping).HasColumnName("ID_Ibs2OtherGLMapping");

            entity.Property(e => e.FundId)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("FundID");

            entity.Property(e => e.IbsAccountNo)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.OtherAccountName)
                .HasMaxLength(200)
                .IsUnicode(false);

            entity.Property(e => e.OtherAccountNo)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.OtherCostCenter)
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<IbsAccountClass>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("IBS_AccountClass");

            entity.Property(e => e.AccountClass)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.AccountTreatment)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.AccountType)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.IdAccountClass)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("ID_AccountClass")
                .IsFixedLength();

            entity.Property(e => e.IdActChartCompany)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("ID_ActChartCompany");
        });

        modelBuilder.Entity<IbsAcode01>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("IBS_ACode01");

            entity.Property(e => e.Description)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.Property(e => e.IbsAcode011)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("IBS_ACode01");
        });

        modelBuilder.Entity<IbsAcode02>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("IBS_ACode02");

            entity.Property(e => e.Description)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.Property(e => e.IbsAcode021)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("IBS_ACode02");
        });

        modelBuilder.Entity<IbsAcode03>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("IBS_ACode03");

            entity.Property(e => e.Description)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.Property(e => e.IbsAcode031)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("IBS_ACode03");
        });

        modelBuilder.Entity<IbsAcode04>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("IBS_ACode04");

            entity.Property(e => e.Description)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.Property(e => e.IbsAcode041)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("IBS_ACode04");
        });

        modelBuilder.Entity<IbsAcode05>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("IBS_ACode05");

            entity.Property(e => e.Description)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.Property(e => e.IbsAcode051)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("IBS_ACode05");
        });

        modelBuilder.Entity<IbsAcodesDefination>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("IBS_ACodesDefination");

            entity.Property(e => e.Acode01Name)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.Acode02Name)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.Acode03Name)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.Acode04Name)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.Acode05Name)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.Acode06Name)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.Acode07Name)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.Acode08Name)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.Acode09Name)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.Acode10Name)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.IdAcodesDefination)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID_ACodesDefination");
        });

        modelBuilder.Entity<IbsActChartCompany>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("Ibs_ActChartCompany");

            entity.Property(e => e.CompanyName)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.IdActChartCompany)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("ID_ActChartCompany");

            entity.Property(e => e.PostingConrol)
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<IbsAnalysisCode>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("IBS_AnalysisCodes");

            entity.Property(e => e.GlacountNo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("GLAcountNo");

            entity.Property(e => e.IdIbsanalysisCodes)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID_IBSAnalysisCodes");
        });

        modelBuilder.Entity<IbsApplication>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("IBS_Application");

            entity.Property(e => e.IdApplication)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("ID_Application");

            entity.Property(e => e.Lic).HasColumnName("LIC");

            entity.Property(e => e.Money4LodgementActNo)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.Money4PaymentActNo)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.Name)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<IbsBank>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("Ibs_Banks");

            entity.Property(e => e.Address01)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.Address02)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.BankCode)
                .HasMaxLength(4)
                .IsUnicode(false);

            entity.Property(e => e.BankGlActNo)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.BankName)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.HqrsortCode)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("HQRSortCode");

            entity.Property(e => e.IdBank)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("ID_Bank");

            entity.Property(e => e.IdState)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("ID_State");

            entity.Property(e => e.SwitchCode)
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<IbsBankAccount>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("IBS_BankAccount");

            entity.Property(e => e.AccountName)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.Balance).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.BankGlActNo)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.BankGlActNoCcenter)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("BankGlActNo_CCenter");

            entity.Property(e => e.ContactPerson)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.ExpireDate).HasColumnType("datetime");

            entity.Property(e => e.ExternalActNo)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.IdBank)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("ID_Bank");

            entity.Property(e => e.IdBankAccount)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("ID_BankAccount");

            entity.Property(e => e.IdBizUnit)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("ID_BizUnit");

            entity.Property(e => e.IdCurrency)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("ID_Currency");

            entity.Property(e => e.IdSerialNo)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID_SerialNo");

            entity.Property(e => e.OverDraftLimit).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.UnClearedEffect).HasColumnType("decimal(18, 2)");
        });

        modelBuilder.Entity<IbsBranch>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("IBS_Branches");

            entity.Property(e => e.AccessLevel)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.IdBranch)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("ID_Branch");

            entity.Property(e => e.Name)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<IbsCategoryClass>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("IBS_CategoryClass");

            entity.Property(e => e.CategoryClass)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.Property(e => e.IdAccountClass)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("ID_AccountClass")
                .IsFixedLength();

            entity.Property(e => e.IdCategoryClass)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("ID_CategoryClass")
                .IsFixedLength();
        });

        modelBuilder.Entity<IbsCountry>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("IBS_Country");

            entity.Property(e => e.Country)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.Property(e => e.IdCountry)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("ID_Country");
        });

        modelBuilder.Entity<IbsCurrency>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("IBS_Currency");

            entity.Property(e => e.Currency)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.IdCurrency)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("ID_Currency");

            entity.Property(e => e.Unit)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<IbsExcRate>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("IBS_ExcRate");

            entity.Property(e => e.CurrencyId)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("CurrencyID");

            entity.Property(e => e.EffectiveDate).HasColumnType("datetime");

            entity.Property(e => e.ExcRateId)
                .ValueGeneratedOnAdd()
                .HasColumnName("ExcRate_ID");

            entity.Property(e => e.ExchangeRate).HasColumnType("decimal(18, 4)");
        });

        modelBuilder.Entity<IbsGlentry>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("IBS_GLEntry");

            entity.Property(e => e.AccountNo)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.Acode01)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ACode01");

            entity.Property(e => e.Acode02)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ACode02");

            entity.Property(e => e.Acode03)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("ACode03");

            entity.Property(e => e.Acode04)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("ACode04");

            entity.Property(e => e.Acode05)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("ACode05");

            entity.Property(e => e.Acode06)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("ACode06");

            entity.Property(e => e.Acode07)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("ACode07");

            entity.Property(e => e.Acode08)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ACode08");

            entity.Property(e => e.Acode09)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ACode09");

            entity.Property(e => e.Acode10)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("ACode10");

            entity.Property(e => e.Amount).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.ChequeNo)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.CustomerCode)
                .HasMaxLength(10)
                .IsUnicode(false);

            entity.Property(e => e.ForexAmount).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.GlpostDate)
                .HasColumnType("datetime")
                .HasColumnName("GLPostDate");

            entity.Property(e => e.Id2Link)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("ID_2_Link");

            entity.Property(e => e.IdApplication)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("ID_Application");

            entity.Property(e => e.IdBankStatement).HasColumnName("ID_BankStatement");

            entity.Property(e => e.IdBranch)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("ID_Branch");

            entity.Property(e => e.IdCurrency)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("ID_Currency");

            entity.Property(e => e.IdGlentry)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID_Glentry");

            entity.Property(e => e.IdJobMaster).HasColumnName("ID_JobMaster");

            entity.Property(e => e.IdLocation)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("ID_Location");

            entity.Property(e => e.IdManyToMany).HasColumnName("ID_ManyToMany");

            entity.Property(e => e.IdMatchMaster).HasColumnName("ID_MatchMaster");

            entity.Property(e => e.IdProductLine)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("ID_ProductLine");

            entity.Property(e => e.Narration)
                .HasMaxLength(200)
                .IsUnicode(false);

            entity.Property(e => e.PayeePayer)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.PostDay)
                .HasMaxLength(8)
                .IsUnicode(false);

            entity.Property(e => e.PostPeriod)
                .HasMaxLength(6)
                .IsUnicode(false);

            entity.Property(e => e.PostWeek)
                .HasMaxLength(6)
                .IsUnicode(false);

            entity.Property(e => e.QtyUnit).HasColumnType("decimal(24, 4)");

            entity.Property(e => e.ReconComments)
                .HasMaxLength(200)
                .IsUnicode(false);

            entity.Property(e => e.SalesAgentCode)
                .HasMaxLength(10)
                .IsUnicode(false);

            entity.Property(e => e.StatementDate).HasColumnType("datetime");

            entity.Property(e => e.TransactionDate).HasColumnType("datetime");

            entity.Property(e => e.Ucid).HasColumnName("UCID");

            entity.Property(e => e.Ueid).HasColumnName("UEID");

            entity.Property(e => e.Upid).HasColumnName("UPID");

            entity.Property(e => e.Uqid).HasColumnName("UQID");

            entity.Property(e => e.Usid).HasColumnName("USID");

            entity.Property(e => e.Utid).HasColumnName("UTID");

            entity.Property(e => e.ValueDate).HasColumnType("datetime");

            entity.Property(e => e.VjNumber)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("VJ_Number");

            entity.Property(e => e.VoucherNo)
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<IbsIReport4Moneytor>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("Ibs_iReport4Moneytor");

            entity.Property(e => e.IbsParameter)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.Property(e => e.IdApplication)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("ID_APPLICATION");

            entity.Property(e => e.IdReportgroup).HasColumnName("ID_REPORTGROUP");

            entity.Property(e => e.Narration)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("NARRATION")
                .IsFixedLength();

            entity.Property(e => e.ReportParameter)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.Property(e => e.Reportfilename)
                .HasMaxLength(254)
                .IsUnicode(false)
                .HasColumnName("REPORTFILENAME");

            entity.Property(e => e.Reportid)
                .ValueGeneratedOnAdd()
                .HasColumnName("REPORTID");

            entity.Property(e => e.Runbefore)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("RUNBEFORE");

            entity.Property(e => e.Sensitivitylevel)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("SENSITIVITYLEVEL")
                .IsFixedLength();

            entity.Property(e => e.Show4All).HasColumnName("SHOW_4_ALL");

            entity.Property(e => e.Show4Contributor).HasColumnName("SHOW_4_CONTRIBUTOR");

            entity.Property(e => e.Show4Portfolio).HasColumnName("SHOW_4_PORTFOLIO");

            entity.Property(e => e.Show4Portfoliogroup).HasColumnName("SHOW_4_PORTFOLIOGROUP");
        });

        modelBuilder.Entity<IbsIReport4MoneytorParameter>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("Ibs_iReport4MoneytorParameters");

            entity.Property(e => e.DefaultValue)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.Property(e => e.IdReportParameter)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID_ReportParameter");

            entity.Property(e => e.ParaDesc)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.ParaName)
                .HasMaxLength(150)
                .IsUnicode(false);

            entity.Property(e => e.ReportId).HasColumnName("ReportID");
        });

        modelBuilder.Entity<IbsIdentifyPeopleWith>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("Ibs_IdentifyPeopleWith");

            entity.Property(e => e.IdIdentifyWith)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("ID_IdentifyWith");

            entity.Property(e => e.IdentifyWith)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<IbsInterApplication>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("IBS_InterApplication");

            entity.Property(e => e.AmountRequested).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.ApprovedBy)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Approved_By");

            entity.Property(e => e.Being)
                .HasMaxLength(200)
                .IsUnicode(false);

            entity.Property(e => e.Beneficiary)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.Property(e => e.CheqNo)
                .HasMaxLength(10)
                .IsUnicode(false);

            entity.Property(e => e.ChequeRequestDate).HasColumnType("datetime");

            entity.Property(e => e.ChequeValueDate).HasColumnType("datetime");

            entity.Property(e => e.CustomerCode)
                .HasMaxLength(10)
                .IsUnicode(false);

            entity.Property(e => e.DbName)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.EftBank2Bank).HasColumnName("EFT_Bank2Bank");

            entity.Property(e => e.ExRate).HasColumnType("decimal(18, 8)");

            entity.Property(e => e.FinalApprovalBy)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("FinalApproval_By");

            entity.Property(e => e.FinallDate).HasColumnType("datetime");

            entity.Property(e => e.ForexAmount).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.IdApplication)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("ID_Application");

            entity.Property(e => e.IdBankAccount)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("ID_BankAccount");

            entity.Property(e => e.IdCallBack).HasColumnName("ID_CallBack");

            entity.Property(e => e.IdCollectionRegister).HasColumnName("ID_CollectionRegister");

            entity.Property(e => e.IdCurrency)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("ID_Currency");

            entity.Property(e => e.IdCustomer).HasColumnName("ID_Customer");

            entity.Property(e => e.IdIManager)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("ID_iManager");

            entity.Property(e => e.IdIbsRequisitionMaster).HasColumnName("ID_Ibs_RequisitionMaster");

            entity.Property(e => e.IdPayThroughSbu)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("ID_Pay_Through_SBU");

            entity.Property(e => e.IdReceiptMaster).HasColumnName("ID_ReceiptMaster");

            entity.Property(e => e.IdRequisitionMaster)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID_RequisitionMaster");

            entity.Property(e => e.LetterText).HasColumnType("text");

            entity.Property(e => e.MergeIdRequisitionMaster).HasColumnName("Merge_ID_RequisitionMaster");

            entity.Property(e => e.Notes).HasColumnType("text");

            entity.Property(e => e.Payee)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.Property(e => e.ProcessedBy)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.PvNumber)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("PV_Number");

            entity.Property(e => e.RefNo)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.RequestType)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.RequesterName)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("Requester_Name");

            entity.Property(e => e.ReversalUtid).HasColumnName("ReversalUTID");

            entity.Property(e => e.ScanDocFileName)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.SecurityNo)
                .HasMaxLength(10)
                .IsUnicode(false);

            entity.Property(e => e.Send2ApplicationId)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("Send2Application_ID");

            entity.Property(e => e.Sign1Id).HasColumnName("Sign1ID");

            entity.Property(e => e.Sign2Id).HasColumnName("Sign2ID");

            entity.Property(e => e.Status)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.StatusDate).HasColumnType("datetime");

            entity.Property(e => e.TransactionDate).HasColumnType("datetime");

            entity.Property(e => e.TransferStatus)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.Utid).HasColumnName("UTID");

            entity.Property(e => e.VatAmount).HasColumnType("decimal(18, 0)");

            entity.Property(e => e.VoucherNo)
                .HasMaxLength(10)
                .IsUnicode(false);

            entity.Property(e => e.WTaxAmount)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("wTaxAmount");
        });

        modelBuilder.Entity<IbsInterfaceManager>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("Ibs_InterfaceManager");

            entity.Property(e => e.DbName)
                .HasMaxLength(150)
                .IsUnicode(false);

            entity.Property(e => e.Description)
                .HasMaxLength(150)
                .IsUnicode(false);

            entity.Property(e => e.IdApplication)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("ID_Application");

            entity.Property(e => e.IdIManager)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("ID_iManager");

            entity.Property(e => e.PrimaryFieldName)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.Property(e => e.ReceiptSpName)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("Receipt_sp_Name");

            entity.Property(e => e.RequisitionSpName)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("Requisition_sp_Name");

            entity.Property(e => e.ReversalSpName)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("Reversal_sp_Name");

            entity.Property(e => e.TblName)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.Property(e => e.VoucherFieldName)
                .HasMaxLength(100)
                .IsUnicode(false);
        });

        modelBuilder.Entity<IbsMainCategory>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("Ibs_MainCategory");

            entity.Property(e => e.IdCategoryClass)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("ID_CategoryClass")
                .IsFixedLength();

            entity.Property(e => e.IdMainCategory)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ID_MainCategory");

            entity.Property(e => e.MainCategory)
                .HasMaxLength(100)
                .IsUnicode(false);
        });

        modelBuilder.Entity<IbsOccupation>(entity =>
        {
            entity.HasKey(e => e.IdOccupation);

            entity.ToTable("IBS_Occupation");

            entity.HasIndex(e => e.Occupation, "Key_IBS_Occupation_Occupation")
                .IsUnique();

            entity.Property(e => e.IdOccupation).HasColumnName("ID_Occupation");

            
                
                

            entity.Property(e => e.Occupation)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.Property(e => e.OccupationCode)
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<IbsPerson>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("Ibs_People");

            entity.Property(e => e.Address01)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.Property(e => e.Address02)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.Property(e => e.AniversaryDate).HasColumnType("datetime");

            entity.Property(e => e.Bvn)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("BVN");

            entity.Property(e => e.Bvnverified).HasColumnName("BVNVerified");

            entity.Property(e => e.CapturedViaBvn).HasColumnName("CapturedViaBVN");

            entity.Property(e => e.ChildDob)
                .HasColumnType("datetime")
                .HasColumnName("ChildDOB");

            entity.Property(e => e.ChildFirstName)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.Property(e => e.ChildGender)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.ChildIdRelationShip).HasColumnName("ChildID_RelationShip");

            entity.Property(e => e.ChildLastName)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.Property(e => e.ChildOtherName)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.Property(e => e.ChildTitle)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.Chnumber)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CHNumber");

            entity.Property(e => e.City)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.Comments).HasColumnType("text");

            entity.Property(e => e.CoporateType)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.CreationDate).HasColumnType("datetime");

            entity.Property(e => e.Cscsno)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CSCSNo");

            entity.Property(e => e.DatabaseName)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.DateBizCommenced).HasColumnType("datetime");

            entity.Property(e => e.Dob)
                .HasColumnType("datetime")
                .HasColumnName("DOB");

            entity.Property(e => e.Email)
                .HasMaxLength(150)
                .IsUnicode(false);

            entity.Property(e => e.EmployerAddress)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.Property(e => e.EmployerCode)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.EmploymentType)
                .HasMaxLength(2)
                .IsUnicode(false);

            entity.Property(e => e.FaceBook)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.Property(e => e.FaxNumber)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.FirstName)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.Property(e => e.Gender)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.HearedFrom)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.IdAgent).HasColumnName("ID_Agent");

            entity.Property(e => e.IdApplication)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("ID_Application");

            entity.Property(e => e.IdCountry)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("ID_Country");

            entity.Property(e => e.IdCustomerType)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("ID_CustomerType");

            entity.Property(e => e.IdEconomicSector).HasColumnName("ID_EconomicSector");

            entity.Property(e => e.IdIdentifyWith)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("ID_IdentifyWith");

            entity.Property(e => e.IdIdplaceOfIssue).HasColumnName("ID_IDPlaceOfIssue");

            entity.Property(e => e.IdIncomeRange).HasColumnName("ID_IncomeRange");

            entity.Property(e => e.IdNatureOfBusiness).HasColumnName("ID_NatureOfBusiness");

            entity.Property(e => e.IdOccupation).HasColumnName("ID_Occupation");

            entity.Property(e => e.IdOriginLga)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("ID_Origin_LGA");

            entity.Property(e => e.IdPlaceOfBirth).HasColumnName("ID_PlaceOfBirth");

            entity.Property(e => e.IdPostalCountry)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("ID_PostalCountry");

            entity.Property(e => e.IdPostalLga)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("ID_PostalLGA");

            entity.Property(e => e.IdPostalState)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("ID_PostalState");

            entity.Property(e => e.IdReligion).HasColumnName("ID_Religion");

            entity.Property(e => e.IdResLga)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("ID_ResLGA");

            entity.Property(e => e.IdRiskProfile)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("ID_RiskProfile")
                .IsFixedLength();

            entity.Property(e => e.IdSourceOfFunds)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("ID_SourceOfFunds");

            entity.Property(e => e.IdState)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("ID_State");

            entity.Property(e => e.IdStateOfOrigin)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("ID_StateOfOrigin");

            entity.Property(e => e.IdentifiedBy)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.IdexpiryDate)
                .HasColumnType("datetime")
                .HasColumnName("IDExpiryDate");

            entity.Property(e => e.IdissueDate)
                .HasColumnType("datetime")
                .HasColumnName("IDIssueDate");

            entity.Property(e => e.Idnumber)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("IDNumber");

            entity.Property(e => e.InHouseNo)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.Instagram)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.Property(e => e.KycComplete).HasColumnName("Kyc_Complete");

            entity.Property(e => e.KycVerifiedDate)
                .HasColumnType("datetime")
                .HasColumnName("Kyc_VerifiedDate");

            entity.Property(e => e.KycVerifiedby)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Kyc_Verifiedby");

            entity.Property(e => e.LastName)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.Property(e => e.LinkedIn)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.Property(e => e.MaidenName)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.Property(e => e.MaritalStatus)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.MobilePhone)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.MotherMaidenName)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.Property(e => e.Nationality)
                .HasMaxLength(3)
                .IsUnicode(false);

            entity.Property(e => e.Nim)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("NIM");

            entity.Property(e => e.OtherNames)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.Property(e => e.OtherPhones)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.PccNo)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.PostalAddress1)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.PostalAddress2)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.PostalCity)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.Rcnumber)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("RCNumber");

            entity.Property(e => e.ResidentPermit)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.RiskClass)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.ScumlregNo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SCUMLRegNo");

            entity.Property(e => e.Smsnotification).HasColumnName("SMSNotification");

            entity.Property(e => e.Status)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.TableName)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.Tin)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("TIN");

            entity.Property(e => e.Title)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.Twiter)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.Property(e => e.Ucid)
                .ValueGeneratedOnAdd()
                .HasColumnName("UCID");

            entity.Property(e => e.Vatno)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("VATNo");

            entity.Property(e => e.WebSite)
                .HasMaxLength(100)
                .IsUnicode(false);
        });

        modelBuilder.Entity<IbsPfa>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("Ibs_PFA");

            entity.Property(e => e.Address01)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.Property(e => e.Address02)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.Property(e => e.ContactPerson)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.Property(e => e.Email)
                .HasMaxLength(150)
                .IsUnicode(false);

            entity.Property(e => e.GsmPhone1)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("GSM_Phone1");

            entity.Property(e => e.GsmPhone2)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("GSM_Phone2");

            entity.Property(e => e.IdPfa)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("ID_PFA");

            entity.Property(e => e.IdState)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("ID_State");

            entity.Property(e => e.PfaName)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("PFA_Name");

            entity.Property(e => e.WebSite)
                .HasMaxLength(150)
                .IsUnicode(false);
        });

        modelBuilder.Entity<IbsPostCode>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("IBS_PostCode");

            entity.Property(e => e.Name)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.PostCode)
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<IbsPostPeriod>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("IBS_PostPeriod");

            entity.Property(e => e.BeginDate).HasColumnType("datetime");

            entity.Property(e => e.EndDate).HasColumnType("datetime");

            entity.Property(e => e.Period)
                .HasMaxLength(30)
                .IsUnicode(false);

            entity.Property(e => e.PostPeriod)
                .HasMaxLength(6)
                .IsUnicode(false);
        });

        modelBuilder.Entity<IbsProduct>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("Ibs_Products");

            entity.Property(e => e.DatabaseName)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.IdApplication)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("ID_Application");

            entity.Property(e => e.ProductName)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.Property(e => e.TableName)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.Upid)
                .ValueGeneratedOnAdd()
                .HasColumnName("UPID");
        });

        modelBuilder.Entity<IbsProductLine>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("IBS_ProductLine");

            entity.Property(e => e.IdProductLine)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("ID_ProductLine");

            entity.Property(e => e.ProductLine)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<IbsRegion>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("Ibs_Region");

            entity.Property(e => e.IdRegion)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("ID_Region");

            entity.Property(e => e.RegionName)
                .HasMaxLength(100)
                .IsUnicode(false);
        });

        modelBuilder.Entity<IbsRequisitionDetail>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("IBS_RequisitionDetail");

            entity.Property(e => e.Acode01)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("ACode01");

            entity.Property(e => e.Acode02)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("ACode02");

            entity.Property(e => e.Acode03)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("ACode03");

            entity.Property(e => e.Acode04)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("ACode04");

            entity.Property(e => e.Acode05)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("ACode05");

            entity.Property(e => e.Amount).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.ApplyVat).HasColumnName("ApplyVAT");

            entity.Property(e => e.CustomerCode)
                .HasMaxLength(10)
                .IsUnicode(false);

            entity.Property(e => e.DbName)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.DetailsOfPayment)
                .HasMaxLength(200)
                .IsUnicode(false);

            entity.Property(e => e.ExRate).HasColumnType("decimal(18, 8)");

            entity.Property(e => e.ForexAmount).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.GlactNo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("GLActNo");

            entity.Property(e => e.IdBankAccount)
                .HasMaxLength(4)
                .HasColumnName("ID_BankAccount");

            entity.Property(e => e.IdBranch)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("ID_Branch");

            entity.Property(e => e.IdCallBack).HasColumnName("ID_CallBack");

            entity.Property(e => e.IdDisbursementType)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("ID_DisbursementType");

            entity.Property(e => e.IdIManager)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ID_iManager");

            entity.Property(e => e.IdLocation)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("ID_Location");

            entity.Property(e => e.IdProductLine)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("ID_ProductLine");

            entity.Property(e => e.IdRequisitionDetails)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID_RequisitionDetails");

            entity.Property(e => e.IdRequisitionMaster).HasColumnName("ID_RequisitionMaster");

            entity.Property(e => e.IdSubCategory)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ID_SubCategory");

            entity.Property(e => e.RequisitionDate).HasColumnType("datetime");

            entity.Property(e => e.SalesAgentCode)
                .HasMaxLength(10)
                .IsUnicode(false);

            entity.Property(e => e.TransactionDate).HasColumnType("datetime");

            entity.Property(e => e.Upid).HasColumnName("UPID");

            entity.Property(e => e.Uqid).HasColumnName("UQID");

            entity.Property(e => e.VatAble).HasColumnName("VAT_Able");

            entity.Property(e => e.WtaxAble).HasColumnName("WTAX_Able");
        });

        modelBuilder.Entity<IbsRequisitionEftdetail>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("IBS_RequisitionEFTDetails");

            entity.Property(e => e.AccountName)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.Property(e => e.AccountNo)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.AccountType)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.Amount).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.CallBackId).HasColumnName("CallBackID");

            entity.Property(e => e.IdBank)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("ID_Bank");

            entity.Property(e => e.IdCustomer).HasColumnName("ID_Customer");

            entity.Property(e => e.IdEftdetails)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID_EFTDetails");

            entity.Property(e => e.IdIManager)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ID_iManager");

            entity.Property(e => e.IdRequisitionMaster).HasColumnName("ID_RequisitionMaster");

            entity.Property(e => e.SortCode)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.Ucid).HasColumnName("UCID");
        });

        modelBuilder.Entity<IbsRequisitionMaster>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("IBS_RequisitionMaster");

            entity.Property(e => e.AmountRequested).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.ApprovedBy)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("Approved_By");

            entity.Property(e => e.Being)
                .HasMaxLength(200)
                .IsUnicode(false);

            entity.Property(e => e.Beneficiary)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.Property(e => e.CheqNo)
                .HasMaxLength(10)
                .IsUnicode(false);

            entity.Property(e => e.ChequeRequestDate).HasColumnType("datetime");

            entity.Property(e => e.ChequeValueDate).HasColumnType("datetime");

            entity.Property(e => e.CustomerCode)
                .HasMaxLength(10)
                .IsUnicode(false);

            entity.Property(e => e.DbName)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.ExRate).HasColumnType("decimal(18, 8)");

            entity.Property(e => e.FinalApprovalBy)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("FinalApproval_By");

            entity.Property(e => e.FinallDate).HasColumnType("datetime");

            entity.Property(e => e.ForexAmount).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.IdApplication)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("ID_Application");

            entity.Property(e => e.IdBankAccount)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("ID_BankAccount");

            entity.Property(e => e.IdCallBack).HasColumnName("ID_CallBack");

            entity.Property(e => e.IdCollectionRegister).HasColumnName("ID_CollectionRegister");

            entity.Property(e => e.IdCurrency)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("ID_Currency");

            entity.Property(e => e.IdCustomer).HasColumnName("ID_Customer");

            entity.Property(e => e.IdDepartment).HasColumnName("ID_Department");

            entity.Property(e => e.IdDisbursementRegister).HasColumnName("ID_DisbursementRegister");

            entity.Property(e => e.IdIManager)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("ID_iManager");

            entity.Property(e => e.IdPayThroughSbu)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("ID_Pay_Through_SBU");

            entity.Property(e => e.IdReceiptMaster).HasColumnName("ID_ReceiptMaster");

            entity.Property(e => e.IdRequisitionMaster)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID_RequisitionMaster");

            entity.Property(e => e.LetterText).HasColumnType("text");

            entity.Property(e => e.MergeIdIbsRequisitionMaster).HasColumnName("Merge_ID_IBS_RequisitionMaster");

            entity.Property(e => e.Notes).HasColumnType("text");

            entity.Property(e => e.Payee)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.Property(e => e.ProcessedBy)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.PvNumber)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("PV_Number");

            entity.Property(e => e.RefNo)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.RequestType)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.RequesterName)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("Requester_Name");

            entity.Property(e => e.ReversalUtid).HasColumnName("ReversalUTID");

            entity.Property(e => e.ScanDocFileName)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.SecurityNo)
                .HasMaxLength(10)
                .IsUnicode(false);

            entity.Property(e => e.Send2ApplicationId)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("Send2Application_ID");

            entity.Property(e => e.Sign1Id).HasColumnName("Sign1ID");

            entity.Property(e => e.Sign2Id).HasColumnName("Sign2ID");

            entity.Property(e => e.Status)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.StatusDate).HasColumnType("datetime");

            entity.Property(e => e.TransactionDate).HasColumnType("datetime");

            entity.Property(e => e.TransferStatus)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.Utid).HasColumnName("UTID");

            entity.Property(e => e.VatAmount).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.VoucherNo)
                .HasMaxLength(10)
                .IsUnicode(false);

            entity.Property(e => e.WTaxAmount)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("wTaxAmount");
        });

        modelBuilder.Entity<IbsRequisitionSplitCheque>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("Ibs_RequisitionSplitCheque");

            entity.Property(e => e.Amount).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.CheqNo)
                .HasMaxLength(10)
                .IsUnicode(false);

            entity.Property(e => e.IdBankAccount)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("ID_BankAccount");

            entity.Property(e => e.IdRequisitionMaster).HasColumnName("ID_RequisitionMaster");

            entity.Property(e => e.IdSplitCheque)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID_SplitCheque");

            entity.Property(e => e.Payee)
                .HasMaxLength(150)
                .IsUnicode(false);
        });

        modelBuilder.Entity<IbsSignatory>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("Ibs_Signatory");

            entity.Property(e => e.FullName)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.IdSignatory)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID_Signatory");

            entity.Property(e => e.IdSignatoryClass)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("ID_SignatoryClass");

            entity.Property(e => e.SecUserId).HasColumnName("SecUserID");

            entity.Property(e => e.Sign1Amount).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.Sign2Amount).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.SignatoryLevel)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.Signature).HasColumnType("image");
        });

        modelBuilder.Entity<IbsSourceOfFund>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("IBS_SourceOfFund");

            entity.Property(e => e.IdSourceOfFund)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("ID_SourceOfFund");

            entity.Property(e => e.SourceOfFund)
                .HasMaxLength(150)
                .IsUnicode(false);
        });

        modelBuilder.Entity<IbsState>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("Ibs_States");

            entity.Property(e => e.IdCountry)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("ID_Country");

            entity.Property(e => e.IdState)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("ID_State");

            entity.Property(e => e.Title)
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<IbsSubCategory>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("IBS_SubCategory");

            entity.Property(e => e.AccountTreatment)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.ConGlactNo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("ConGLActNo");

            entity.Property(e => e.GlactNo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("GLActNo");

            entity.Property(e => e.IdMainCategory)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ID_MainCategory");

            entity.Property(e => e.IdSubCategory)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ID_SubCategory");

            entity.Property(e => e.RequireAcode1).HasColumnName("RequireACODE1");

            entity.Property(e => e.RequireAcode10).HasColumnName("RequireACODE10");

            entity.Property(e => e.RequireAcode2).HasColumnName("RequireACODE2");

            entity.Property(e => e.RequireAcode3).HasColumnName("RequireACODE3");

            entity.Property(e => e.RequireAcode4).HasColumnName("RequireACODE4");

            entity.Property(e => e.RequireAcode5).HasColumnName("RequireACODE5");

            entity.Property(e => e.RequireAcode6).HasColumnName("RequireACODE6");

            entity.Property(e => e.RequireAcode7).HasColumnName("RequireACODE7");

            entity.Property(e => e.RequireAcode8).HasColumnName("RequireACODE8");

            entity.Property(e => e.RequireAcode9).HasColumnName("RequireACODE9");

            entity.Property(e => e.RequireUcid).HasColumnName("RequireUCID");

            entity.Property(e => e.RequireUeid).HasColumnName("RequireUEID");

            entity.Property(e => e.RequireUpid).HasColumnName("RequireUPID");

            entity.Property(e => e.RequireUqid).HasColumnName("RequireUQID");

            entity.Property(e => e.RequireUsid).HasColumnName("RequireUSID");

            entity.Property(e => e.RequireUtid).HasColumnName("RequireUTID");

            entity.Property(e => e.SocfIdAccountTag).HasColumnName("SOCF_ID_AccountTag");

            entity.Property(e => e.SocieIdAccountTag).HasColumnName("SOCIE_ID_AccountTag");

            entity.Property(e => e.SofpIdAccountTag).HasColumnName("SOFP_ID_AccountTag");

            entity.Property(e => e.SoplIdAccountTag).HasColumnName("SOPL_ID_AccountTag");

            entity.Property(e => e.SubCategory)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.Property(e => e.TaxCode)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.Usr01IdAccountTag).HasColumnName("USR01_ID_AccountTag");

            entity.Property(e => e.Usr02IdAccountTag).HasColumnName("USR02_ID_AccountTag");

            entity.Property(e => e.Usr03IdAccountTag).HasColumnName("USR03_ID_AccountTag");

            entity.Property(e => e.Usr04IdAccountTag).HasColumnName("USR04_ID_AccountTag");

            entity.Property(e => e.Usr05IdAccountTag).HasColumnName("USR05_ID_AccountTag");
        });

        modelBuilder.Entity<IbsTransaction>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("Ibs_Transactions");

            entity.Property(e => e.Amount).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.ApprovedBy)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.ApprovedDate).HasColumnType("datetime");

            entity.Property(e => e.CaptureDate).HasColumnType("datetime");

            entity.Property(e => e.CapturedBy)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.DatabaseName)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.Id2Link)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("ID_2_Link");

            entity.Property(e => e.IdApplication)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("ID_Application");

            entity.Property(e => e.IdTransClass)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("ID_TransClass")
                .IsFixedLength();

            entity.Property(e => e.Narration)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.Property(e => e.ReversalId).HasColumnName("ReversalID");

            entity.Property(e => e.Status)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.TableName)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.Ucid).HasColumnName("UCID");

            entity.Property(e => e.Ueid).HasColumnName("UEID");

            entity.Property(e => e.Upid).HasColumnName("UPID");

            entity.Property(e => e.Uqid).HasColumnName("UQID");

            entity.Property(e => e.Usid).HasColumnName("USID");

            entity.Property(e => e.Utid)
                .ValueGeneratedOnAdd()
                .HasColumnName("UTID");
        });

        modelBuilder.Entity<IbsTransactionClass>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("Ibs_TransactionClass");

            entity.Property(e => e.IdTransClass)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("ID_TransClass")
                .IsFixedLength();

            entity.Property(e => e.TransClass)
                .HasMaxLength(100)
                .IsUnicode(false);
        });

        modelBuilder.Entity<IbsVoucherNo>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("IBS_VoucherNo");

            entity.Property(e => e.DoNotExportToExternalGl).HasColumnName("DoNotExportToExternalGL");

            entity.Property(e => e.GlpostDate)
                .HasColumnType("datetime")
                .HasColumnName("GLPostDate");

            entity.Property(e => e.IdApplication)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("ID_Application");

            entity.Property(e => e.IdBranch)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("ID_Branch");

            entity.Property(e => e.IdVoucher)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID_Voucher");

            entity.Property(e => e.PostDay)
                .HasMaxLength(8)
                .IsUnicode(false);

            entity.Property(e => e.PostPeriod)
                .HasMaxLength(6)
                .IsUnicode(false);

            entity.Property(e => e.PostWeek)
                .HasMaxLength(6)
                .IsUnicode(false);

            entity.Property(e => e.PostedBy)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.PrepairedBy)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.Title)
                .HasMaxLength(150)
                .IsUnicode(false);

            entity.Property(e => e.VoucherNo)
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<IfrsTbhfsHft>(entity =>
        {
            entity.HasNoKey();

            entity.ToTable("IFRS_TBHFS_HFT");

            entity.Property(e => e.AccruedBf).HasColumnName("Accrued_BF");

            entity.Property(e => e.AccruedCf)
                .HasColumnType("money")
                .HasColumnName("Accrued_CF");

            entity.Property(e => e.AccruedPrd)
                .HasColumnType("money")
                .HasColumnName("Accrued_PRD");

            entity.Property(e => e.Addition).HasColumnType("money");

            entity.Property(e => e.CleanPrice).HasColumnType("money");

            entity.Property(e => e.CloseBalance)
                .HasColumnType("money")
                .HasColumnName("Close_Balance");

            entity.Property(e => e.CouponRate).HasColumnName("Coupon_Rate");

            entity.Property(e => e.Disposals).HasColumnType("money");

            entity.Property(e => e.EffectiveDate)
                .HasColumnType("datetime")
                .HasColumnName("Effective_Date");

            entity.Property(e => e.IdPortfolioGroup).HasColumnName("ID_PortfolioGroup");

            entity.Property(e => e.IdPortfolioGroupName)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("ID_PortfolioGroupName");

            entity.Property(e => e.IssueDate)
                .HasColumnType("datetime")
                .HasColumnName("Issue_Date");

            entity.Property(e => e.MarketValue)
                .HasColumnType("money")
                .HasColumnName("Market_Value");

            entity.Property(e => e.MaturityDate)
                .HasColumnType("datetime")
                .HasColumnName("Maturity_Date");

            entity.Property(e => e.MaturityDate2)
                .HasColumnType("datetime")
                .HasColumnName("Maturity_Date2");

            entity.Property(e => e.Narration)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.OpenBalance)
                .HasColumnType("money")
                .HasColumnName("Open_Balance");

            entity.Property(e => e.Portfolio)
                .HasMaxLength(150)
                .IsUnicode(false);

            entity.Property(e => e.PortfolioId).HasColumnName("PortfolioID");

            entity.Property(e => e.PremiumDiscount).HasColumnName("Premium_Discount");

            entity.Property(e => e.Price).HasColumnType("money");

            entity.Property(e => e.Received).HasColumnType("money");

            entity.Property(e => e.TreatmentType)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Treatment_Type");

            entity.Property(e => e.ValueDate)
                .HasColumnType("datetime")
                .HasColumnName("Value_Date");
        });

        modelBuilder.Entity<IfrsTempBondHtm>(entity =>
        {
            entity.HasNoKey();

            entity.ToTable("IFRS_TempBondHTM");

            entity.Property(e => e.AccuralBf)
                .HasColumnType("money")
                .HasColumnName("AccuralBF");

            entity.Property(e => e.AccuralCf)
                .HasColumnType("money")
                .HasColumnName("AccuralCF");

            entity.Property(e => e.AccuralPrd)
                .HasColumnType("money")
                .HasColumnName("AccuralPRD");

            entity.Property(e => e.Addition).HasColumnType("money");

            entity.Property(e => e.CleanPrice).HasColumnType("money");

            entity.Property(e => e.CloseBalance).HasColumnType("money");

            entity.Property(e => e.CouponRate).HasColumnType("decimal(18, 0)");

            entity.Property(e => e.Disposals).HasColumnType("money");

            entity.Property(e => e.EffectiveDate).HasColumnType("datetime");

            entity.Property(e => e.IdPortFoliGroup).HasColumnName("ID_PortFoliGroup");

            entity.Property(e => e.IssueDate).HasColumnType("datetime");

            entity.Property(e => e.MarketValue).HasColumnType("money");

            entity.Property(e => e.MaturityDate).HasColumnType("datetime");

            entity.Property(e => e.MaturityDate1)
                .HasColumnType("datetime")
                .HasColumnName("Maturity_Date");

            entity.Property(e => e.Narration)
                .HasMaxLength(450)
                .IsUnicode(false);

            entity.Property(e => e.OpenBalance).HasColumnType("money");

            entity.Property(e => e.PortFoliGroupName)
                .HasMaxLength(450)
                .IsUnicode(false);

            entity.Property(e => e.PortFolio)
                .HasMaxLength(450)
                .IsUnicode(false);

            entity.Property(e => e.PortFolioId).HasColumnName("PortFolioID");

            entity.Property(e => e.Price).HasColumnType("money");

            entity.Property(e => e.Received).HasColumnType("money");

            entity.Property(e => e.ValueDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<IfrsTreasuryBill>(entity =>
        {
            entity.HasNoKey();

            entity.ToTable("IFRS_Treasury_Bills");

            entity.Property(e => e.AcrBf)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("Acr_bf");

            entity.Property(e => e.AcrCf)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("Acr_cf");

            entity.Property(e => e.AcrPl)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("Acr_PL");

            entity.Property(e => e.Addition).HasColumnType("decimal(18, 0)");

            entity.Property(e => e.BeginDate).HasColumnType("datetime");

            entity.Property(e => e.BookValue).HasColumnType("decimal(18, 0)");

            entity.Property(e => e.Comments).HasColumnType("decimal(18, 0)");

            entity.Property(e => e.DealId).HasColumnName("DealID");

            entity.Property(e => e.DealTypeId)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("DealTypeID");

            entity.Property(e => e.Description)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.Property(e => e.Disposals).HasColumnType("decimal(18, 0)");

            entity.Property(e => e.EffectiveDate).HasColumnType("datetime");

            entity.Property(e => e.EndDate).HasColumnType("datetime");

            entity.Property(e => e.GrossRecd).HasColumnType("decimal(18, 0)");

            entity.Property(e => e.IntAdj).HasColumnType("decimal(18, 0)");

            entity.Property(e => e.IntRate).HasColumnType("decimal(18, 0)");

            entity.Property(e => e.MaturityDate).HasColumnType("datetime");

            entity.Property(e => e.NetPl)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("Net_PL");

            entity.Property(e => e.OpenBalance).HasColumnType("decimal(18, 0)");

            entity.Property(e => e.PortfolioId).HasColumnName("PortfolioID");

            entity.Property(e => e.RpDpSchdId).HasColumnName("RpDpSchd_ID");

            entity.Property(e => e.WithTax).HasColumnType("decimal(18, 0)");
        });

        modelBuilder.Entity<IfrsTreasuryPlacement>(entity =>
        {
            entity.HasNoKey();

            entity.ToTable("IFRS_Treasury_Placement");

            entity.Property(e => e.AcrBf)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("Acr_bf");

            entity.Property(e => e.AcrCf)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("Acr_cf");

            entity.Property(e => e.AcrPl)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("Acr_PL");

            entity.Property(e => e.Addition).HasColumnType("decimal(18, 0)");

            entity.Property(e => e.BeginDate).HasColumnType("datetime");

            entity.Property(e => e.BookValue).HasColumnType("decimal(18, 0)");

            entity.Property(e => e.Comments).HasColumnType("decimal(18, 0)");

            entity.Property(e => e.DealId).HasColumnName("DealID");

            entity.Property(e => e.DealTypeId)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("DealTypeID");

            entity.Property(e => e.Description)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.Property(e => e.Disposals).HasColumnType("decimal(18, 0)");

            entity.Property(e => e.EffectiveDate).HasColumnType("datetime");

            entity.Property(e => e.EndDate).HasColumnType("datetime");

            entity.Property(e => e.GrossRecd).HasColumnType("decimal(18, 0)");

            entity.Property(e => e.IntAdj).HasColumnType("decimal(18, 0)");

            entity.Property(e => e.IntRate).HasColumnType("decimal(18, 0)");

            entity.Property(e => e.MaturityDate).HasColumnType("datetime");

            entity.Property(e => e.NetPl)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("Net_PL");

            entity.Property(e => e.OpenBalance).HasColumnType("decimal(18, 0)");

            entity.Property(e => e.PortfolioId).HasColumnName("PortfolioID");

            entity.Property(e => e.RpDpSchdId).HasColumnName("RpDpSchd_ID");

            entity.Property(e => e.WithTax).HasColumnType("decimal(18, 0)");
        });

        modelBuilder.Entity<Ifrstemp>(entity =>
        {
            entity.HasNoKey();

            entity.ToTable("IFRSTemp");

            entity.Property(e => e.AcrBf)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("Acr_bf");

            entity.Property(e => e.AcrCf)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("Acr_cf");

            entity.Property(e => e.AcrPl)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("Acr_PL");

            entity.Property(e => e.Addition).HasColumnType("decimal(18, 0)");

            entity.Property(e => e.BeginDate).HasColumnType("datetime");

            entity.Property(e => e.CleanPrice).HasColumnType("decimal(18, 0)");

            entity.Property(e => e.CloseBalance).HasColumnType("decimal(18, 0)");

            entity.Property(e => e.CouponRate).HasColumnType("decimal(18, 0)");

            entity.Property(e => e.Disposals).HasColumnType("decimal(18, 0)");

            entity.Property(e => e.EffectiveDate).HasColumnType("datetime");

            entity.Property(e => e.EndDate).HasColumnType("datetime");

            entity.Property(e => e.FaceValue).HasColumnType("decimal(18, 0)");

            entity.Property(e => e.GrossRecd).HasColumnType("decimal(18, 0)");

            entity.Property(e => e.IntAdj).HasColumnType("decimal(18, 0)");

            entity.Property(e => e.IntRate).HasColumnType("decimal(18, 0)");

            entity.Property(e => e.IssueDate).HasColumnType("datetime");

            entity.Property(e => e.LoanId).HasColumnName("LoanID");

            entity.Property(e => e.LoanTypeId).HasColumnName("LoanTypeID");

            entity.Property(e => e.MarketValue).HasColumnType("decimal(18, 0)");

            entity.Property(e => e.MaturityDate).HasColumnType("datetime");

            entity.Property(e => e.MrkPrice).HasColumnType("decimal(18, 0)");

            entity.Property(e => e.Narration)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.Property(e => e.NetPl)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("Net_PL");

            entity.Property(e => e.OpenBalance).HasColumnType("decimal(18, 0)");

            entity.Property(e => e.Portfolio)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.Property(e => e.PortfolioId).HasColumnName("PortfolioID");

            entity.Property(e => e.PremiumDiscount).HasColumnName("Premium/Discount");

            entity.Property(e => e.Price).HasColumnType("decimal(18, 0)");

            entity.Property(e => e.QtyUnit).HasColumnType("decimal(18, 0)");

            entity.Property(e => e.RpLnSchdId).HasColumnName("RpLnSchd_ID");

            entity.Property(e => e.Symbol)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.ValueDate).HasColumnType("datetime");

            entity.Property(e => e.WithTax).HasColumnType("decimal(18, 0)");
        });

        modelBuilder.Entity<IfrstempEquity>(entity =>
        {
            entity.HasNoKey();

            entity.ToTable("IFRSTempEquity");

            entity.Property(e => e.BeginDate).HasColumnType("datetime");

            entity.Property(e => e.CostAdd)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("Cost_add");

            entity.Property(e => e.CostBf)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("Cost_bf");

            entity.Property(e => e.CostCf)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("Cost_cf");

            entity.Property(e => e.CostDisp)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("Cost_disp");

            entity.Property(e => e.EndDate).HasColumnType("datetime");

            entity.Property(e => e.EqSchdId).HasColumnName("EqSchdID");

            entity.Property(e => e.MarketPrice).HasColumnType("decimal(18, 0)");

            entity.Property(e => e.MarketValue).HasColumnType("decimal(18, 0)");

            entity.Property(e => e.NetAssetValue).HasColumnType("decimal(18, 0)");

            entity.Property(e => e.PortfolioId).HasColumnName("PortfolioID");

            entity.Property(e => e.Share)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.ShareAdd).HasColumnName("Share_add");

            entity.Property(e => e.ShareBf).HasColumnName("Share_bf");

            entity.Property(e => e.ShareCf).HasColumnName("Share_cf");

            entity.Property(e => e.ShareDisp).HasColumnName("Share_disp");

            entity.Property(e => e.ShareId).HasColumnName("ShareID");

            entity.Property(e => e.ShareType)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<ImpPrtContributor>(entity =>
        {
            entity.HasKey(e => e.IdImpPrtContributor)
                .HasName("PK_TmpPortfolioContributor");

            entity.ToTable("ImpPrtContributor");

            entity.HasIndex(e => e.AccountCode, "Key_ImpPrtContributor_AccountCode")
                .IsUnique();

            entity.HasIndex(e => e.FullName, "Key_TmpPortfolioContributor_FullName");

            entity.Property(e => e.IdImpPrtContributor).HasColumnName("ID_ImpPrtContributor");

            entity.Property(e => e.AccountCode)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.AccountNo)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.Address01)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.Property(e => e.Address02)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.Property(e => e.AgentCode)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.AgentName)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.ApprovedBy)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.Bvn)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("BVN");

            entity.Property(e => e.CapturedBy)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.ChildOtherNames)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.ChildSurName)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.ChildTitle)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Child_Title");

            entity.Property(e => e.City)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.Comments).HasColumnType("text");

            entity.Property(e => e.DateApproved).HasColumnType("datetime");

            entity.Property(e => e.DateCaptured).HasColumnType("datetime");

            entity.Property(e => e.DateOfBirth).HasColumnType("datetime");

            entity.Property(e => e.DateOpened).HasColumnType("datetime");

            entity.Property(e => e.Email)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.Property(e => e.ExpiryDate).HasColumnType("datetime");

            entity.Property(e => e.ExtReferenceId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("Ext_Reference_ID");

            entity.Property(e => e.FirstName)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.FullName)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.Property(e => e.IdBank)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("ID_Bank");

            entity.Property(e => e.IdCurrency)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("ID_Currency");

            entity.Property(e => e.IdIdentifyWith)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("ID_IdentifyWith");

            entity.Property(e => e.IdNumber)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("ID_Number");

            entity.Property(e => e.IdPortfolioContributorType).HasColumnName("ID_PortfolioContributorType");

            entity.Property(e => e.IdReferedByBranch)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("ID_ReferedByBranch");

            entity.Property(e => e.IdRiskLevel).HasColumnName("ID_RiskLevel");

            entity.Property(e => e.IdSourceBranch)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("ID_Source_Branch");

            entity.Property(e => e.IdSourceOfFund)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("ID_SourceOfFund");

            entity.Property(e => e.IdState)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("ID_State");

            entity.Property(e => e.ImportBy)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.IncomeDistribute)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.InitalAmount).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.IssueDate).HasColumnType("datetime");

            entity.Property(e => e.JointOtherNames)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.Property(e => e.JointSurName)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.JointTitle)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Joint_Title");

            entity.Property(e => e.LastName)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.MinorDateOfBirth).HasColumnType("datetime");

            entity.Property(e => e.MobileNo)
                .HasMaxLength(50)
                .IsUnicode(false);

            
                
                

            entity.Property(e => e.NameOfSignatory)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("Name_Of_Signatory");

            entity.Property(e => e.NextOfKin)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.Property(e => e.NoOfUnits).HasColumnType("decimal(31, 4)");

            entity.Property(e => e.OfferType)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Offer_Type");

            entity.Property(e => e.Rcnumber)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("RCNumber");

            entity.Property(e => e.RcregisterDate)
                .HasColumnType("datetime")
                .HasColumnName("RCRegisterDate");

            entity.Property(e => e.SponsorDateOfBirth)
                .HasColumnType("datetime")
                .HasColumnName("Sponsor_DateOfBirth");

            entity.Property(e => e.SponsorOtherName)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("Sponsor_OtherName");

            entity.Property(e => e.SponsorSurname)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("Sponsor_Surname");

            entity.Property(e => e.SponsorTitle)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Sponsor_Title");

            entity.Property(e => e.Status)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.Telephone)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.Property(e => e.Title)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.Ucid).HasColumnName("UCID");
        });

        modelBuilder.Entity<ImpPrtContributorAccount>(entity =>
        {
            entity.HasKey(e => e.IdImpPrtContributoAccount);

            entity.ToTable("ImpPrtContributorAccount");

            entity.HasIndex(e => e.UniqueId, "Key_ImpPrtContributorAccount_UniqueID");

            entity.Property(e => e.IdImpPrtContributoAccount).HasColumnName("ID_ImpPrtContributoAccount");

            entity.Property(e => e.AccountCode)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.AdditionalContribution).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.AdditionalContributionUnit).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.AgentCode)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.AgentName)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.Property(e => e.Amount).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.ApprovedBy)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.CapturedBy)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.ChequeNo)
                .HasMaxLength(10)
                .IsUnicode(false);

            entity.Property(e => e.Comments).HasColumnType("text");

            entity.Property(e => e.DateApproved).HasColumnType("datetime");

            entity.Property(e => e.DateCaptured).HasColumnType("datetime");

            entity.Property(e => e.Employee).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.Employer).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.IdBankAccount)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("ID_BankAccount");

            entity.Property(e => e.IdReferedByBranch)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("ID_ReferedByBranch");

            entity.Property(e => e.Intrest).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.Narration)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.Property(e => e.Otherpayment10)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("otherpayment10");

            entity.Property(e => e.Otherpayment4)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("otherpayment4");

            entity.Property(e => e.Otherpayment5)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("otherpayment5");

            entity.Property(e => e.Otherpayment6)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("otherpayment6");

            entity.Property(e => e.Otherpayment7)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("otherpayment7");

            entity.Property(e => e.Otherpayment8)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("otherpayment8");

            entity.Property(e => e.Otherpayment9)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("otherpayment9");

            entity.Property(e => e.ProductCode)
                .HasMaxLength(10)
                .IsUnicode(false);

            entity.Property(e => e.ReceiptDate).HasColumnType("datetime");

            entity.Property(e => e.ReceiptType)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.Status)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.TransRefNo)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.TransactionDate).HasColumnType("datetime");

            entity.Property(e => e.UniqueId).HasColumnName("UniqueID");

            entity.Property(e => e.ValueDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<IntTradeEquity>(entity =>
        {
            entity.HasKey(e => e.IdIntTradeEquity);

            entity.ToTable("IntTrade_Equity");

            entity.HasIndex(e => e.InvestmentDescription, "Key_IntTrade_Equity_InvestmentDescription");

            entity.Property(e => e.IdIntTradeEquity).HasColumnName("ID_IntTradeEquity");

            entity.Property(e => e.AccruedInterest).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.Book)
                .HasMaxLength(15)
                .IsUnicode(false);

            entity.Property(e => e.ClearingFees).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.ClearingPrimeBroker)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.Comments).HasColumnType("text");

            entity.Property(e => e.Commission).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.DtceuroClear)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasColumnName("DTCEuroClear");

            entity.Property(e => e.EntryDate).HasColumnType("datetime");

            entity.Property(e => e.ExchangeFeesTaxes).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.ExecutingBroker)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.ImpliedRepoRate).HasColumnType("decimal(18, 4)");

            entity.Property(e => e.InternalTradeReferenceNo)
                .HasMaxLength(24)
                .IsUnicode(false);

            entity.Property(e => e.InvestmentCurrency)
                .HasMaxLength(4)
                .IsUnicode(false);

            entity.Property(e => e.InvestmentDescription)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.InvestmentIdentifier)
                .HasMaxLength(24)
                .IsUnicode(false);

            entity.Property(e => e.LegalEntity)
                .HasMaxLength(15)
                .IsUnicode(false);

            
                
                

            entity.Property(e => e.NetMoney).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.OriginalFaceAmount).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.Price).HasColumnType("decimal(18, 6)");

            entity.Property(e => e.ProceedsCost).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.SecurityType)
                .HasMaxLength(10)
                .IsUnicode(false);

            entity.Property(e => e.SettlementCurrency)
                .HasMaxLength(4)
                .IsUnicode(false);

            entity.Property(e => e.SettlementDate).HasColumnType("datetime");

            entity.Property(e => e.Source)
                .HasMaxLength(24)
                .IsUnicode(false);

            entity.Property(e => e.SpecialInstructions)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.Status)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.Strategy)
                .HasMaxLength(30)
                .IsUnicode(false);

            entity.Property(e => e.TradeDate).HasColumnType("datetime");

            entity.Property(e => e.TradeType)
                .HasMaxLength(4)
                .IsUnicode(false);

            entity.Property(e => e.TraderName)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.TransactionCode)
                .HasMaxLength(4)
                .IsUnicode(false);
        });

        modelBuilder.Entity<IntTradeEquitySecurityType>(entity =>
        {
            entity.HasKey(e => e.SecurityType);

            entity.ToTable("IntTrade_EquitySecurityTypes");

            entity.HasIndex(e => e.Description, "Key_IntTrade_EquitySecurityTypes_Description")
                .IsUnique();

            entity.Property(e => e.SecurityType)
                .HasMaxLength(10)
                .IsUnicode(false);

            entity.Property(e => e.Description)
                .HasMaxLength(100)
                .IsUnicode(false);

            
                
                
        });

        modelBuilder.Entity<IntTradeEquityTradeType>(entity =>
        {
            entity.HasKey(e => e.TradeType);

            entity.ToTable("IntTrade_EquityTradeType");

            entity.HasIndex(e => e.Description, "Key_IntTrade_EquityTradeType_Description")
                .IsUnique();

            entity.Property(e => e.TradeType)
                .HasMaxLength(4)
                .IsUnicode(false);

            entity.Property(e => e.Description)
                .HasMaxLength(100)
                .IsUnicode(false);

            
                
                
        });

        modelBuilder.Entity<IntTradeEquityTransactionCode>(entity =>
        {
            entity.HasKey(e => e.TransCode);

            entity.ToTable("IntTrade_EquityTransactionCode");

            entity.HasIndex(e => e.Description, "Key_IntTrade_EquityTransactionTypes_Description")
                .IsUnique();

            entity.Property(e => e.TransCode)
                .HasMaxLength(4)
                .IsUnicode(false);

            entity.Property(e => e.Description)
                .HasMaxLength(100)
                .IsUnicode(false);

            
                
                
        });

        modelBuilder.Entity<IntegraToMoneytorTab>(entity =>
        {
            entity.HasKey(e => e.Id2moneytor);

            entity.ToTable("Integra_to_MoneytorTab");

            entity.Property(e => e.Id2moneytor).HasColumnName("ID2Moneytor");

            entity.Property(e => e.ActCode).HasMaxLength(50);

            entity.Property(e => e.BrokerId)
                .HasMaxLength(50)
                .HasColumnName("BrokerID");

            entity.Property(e => e.Comments).HasColumnType("text");

            entity.Property(e => e.Commission).HasColumnType("money");

            entity.Property(e => e.Consideration).HasColumnType("money");

            entity.Property(e => e.ContractNoteNo).HasMaxLength(50);

            entity.Property(e => e.CostOfShares).HasColumnType("money");

            entity.Property(e => e.Cscsfees)
                .HasColumnType("money")
                .HasColumnName("CSCSFEES");

            entity.Property(e => e.Cscsid)
                .HasMaxLength(50)
                .HasColumnName("CSCSID");

            entity.Property(e => e.InvestorAccountNo).HasMaxLength(50);

            
                
                

            entity.Property(e => e.Narration).HasMaxLength(200);

            entity.Property(e => e.Nsefees)
                .HasColumnType("money")
                .HasColumnName("NSEFEES");

            entity.Property(e => e.OtherFees).HasColumnType("money");

            entity.Property(e => e.Processed)
                .HasMaxLength(1)
                .HasColumnName("processed");

            entity.Property(e => e.QtyUnit).HasColumnType("money");

            entity.Property(e => e.Refid)
                .HasMaxLength(50)
                .HasColumnName("refid");

            entity.Property(e => e.Secfees)
                .HasColumnType("money")
                .HasColumnName("SECFEES");

            entity.Property(e => e.StampDuty).HasColumnType("money");

            entity.Property(e => e.Symbol).HasMaxLength(50);

            entity.Property(e => e.TotalCostSalesProceed)
                .HasColumnType("money")
                .HasColumnName("TotalCost_SalesProceed");

            entity.Property(e => e.TransType).HasMaxLength(50);

            entity.Property(e => e.TransactCost).HasColumnType("money");

            entity.Property(e => e.UnitPrice).HasColumnType("money");

            entity.Property(e => e.ValueDate).HasColumnType("datetime");

            entity.Property(e => e.Vat)
                .HasColumnType("money")
                .HasColumnName("VAT");
        });

        modelBuilder.Entity<Interface2BankSystem>(entity =>
        {
            entity.HasKey(e => e.IdGlentry);

            entity.ToTable("Interface2BankSystem");

            entity.Property(e => e.IdGlentry)
                .ValueGeneratedNever()
                .HasColumnName("ID_Glentry");

            entity.Property(e => e.ExportDate).HasColumnType("datetime");

            
                
                
        });

        modelBuilder.Entity<InternalTransfer>(entity =>
        {
            entity.HasKey(e => e.IdInternalTransfer);

            entity.ToTable("InternalTransfer");

            entity.Property(e => e.IdInternalTransfer).HasColumnName("ID_InternalTransfer");

            entity.Property(e => e.Amount).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.FromDealId).HasColumnName("From_DealID");

            entity.Property(e => e.GlPostPeriod)
                .HasMaxLength(6)
                .IsUnicode(false);

            entity.Property(e => e.GlpostDate)
                .HasColumnType("datetime")
                .HasColumnName("GLPostDate");

            entity.Property(e => e.IdBranch)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("ID_Branch");

            
                
                

            entity.Property(e => e.Narration)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.PrepairedBy)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.SettlementDate)
                .HasColumnType("datetime")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.ToDealId).HasColumnName("To_DealID");

            entity.Property(e => e.TransferDate).HasColumnType("datetime");

            entity.Property(e => e.TransferType)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.VoucherNo)
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<InvestmentModule>(entity =>
        {
            entity.HasKey(e => e.IdInvstModule);

            entity.HasIndex(e => e.InvestmentModule1, "FK_InvestmentModules")
                .IsUnique();

            entity.HasIndex(e => e.Description, "FK_InvestmentModules_Descriptn")
                .IsUnique();

            entity.Property(e => e.IdInvstModule).HasColumnName("ID_InvstModule");

            entity.Property(e => e.Description)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.InvestmentModule1)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("InvestmentModule");
        });

        modelBuilder.Entity<InvestmentType>(entity =>
        {
            entity.HasKey(e => e.IdInvestmentType);

            entity.ToTable("InvestmentType");

            entity.HasIndex(e => e.InvestmentType1, "Key_InvestmentType_InvestmentType")
                .IsUnique();

            entity.Property(e => e.IdInvestmentType)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("ID_InvestmentType");

            entity.Property(e => e.Arrangement)
                .HasMaxLength(2)
                .IsUnicode(false);

            entity.Property(e => e.InvestmentClass)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.InvestmentType1)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("InvestmentType");

            entity.Property(e => e.IssueBasedOn)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.IssuerBasedOn)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.MaxPerIssue).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.MaxPerIssuer).HasColumnType("decimal(18, 2)");

            
                
                

            entity.Property(e => e.RegulatoryMax).HasColumnType("decimal(18, 2)");
        });

        modelBuilder.Entity<KinRelationship>(entity =>
        {
            entity.HasKey(e => e.IdKinRelationship);

            entity.ToTable("KinRelationship");

            entity.HasIndex(e => e.IdKinRelationship, "Key_KinRelationship_KinRelationship")
                .IsUnique();

            entity.Property(e => e.IdKinRelationship).HasColumnName("ID_KinRelationship");

            entity.Property(e => e.KniRelationship)
                .HasMaxLength(100)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Ln2Gl>(entity =>
        {
            entity.HasKey(e => e.IdLn2Gl)
                .HasName("KeyLn2GL");

            entity.ToTable("Ln2GL");

            entity.HasIndex(e => e.PortfolioId, "KeyLn2GLPortID");

            entity.HasIndex(e => e.LoanTypeId, "KeyLn2GLTypeID");

            entity.HasIndex(e => new { e.IdPortfolioGroup, e.LoanTypeId }, "Key_Ln2GL_ID_PortfolioGroup_LoanTypeID")
                .IsUnique();

            entity.Property(e => e.IdLn2Gl).HasColumnName("ID_Ln2GL");

            entity.Property(e => e.ChangeInBondValueGlActNo)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.ChangeInBondValueGlActNoCcenter)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("ChangeInBondValueGlActNo_CCenter");

            entity.Property(e => e.GlaccrualActNo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("GLAccrualActNo");

            entity.Property(e => e.GlaccrualActNoCcenter)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("GLAccrualActNo_CCenter");

            entity.Property(e => e.GlassetActNo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("GLAssetActNo");

            entity.Property(e => e.GlassetActNoCcenter)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("GLAssetActNo_CCenter");

            entity.Property(e => e.GldiscAssetActNo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("GLDiscAssetActNo");

            entity.Property(e => e.GldiscAssetActNoCcenter)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("GLDiscAssetActNo_CCenter");

            entity.Property(e => e.GldiscGainActNo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("GLDiscGainActNo");

            entity.Property(e => e.GldiscGainActNoCcenter)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("GLDiscGainActNo_CCenter");

            entity.Property(e => e.GlexpenseActNo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("GLExpenseActNo");

            entity.Property(e => e.GlexpenseActNoCcenter)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("GLExpenseActNo_CCenter");

            entity.Property(e => e.GlgainLossActNo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("GLGainLossActNo");

            entity.Property(e => e.GlgainLossActNoCcenter)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("GLGainLossActNo_CCenter");

            entity.Property(e => e.GlincomeActNo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("GLIncomeActNo");

            entity.Property(e => e.GlincomeActNoCcenter)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("GLIncomeActNo_CCenter");

            entity.Property(e => e.GllossActNo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("GLLoss_ActNo");

            entity.Property(e => e.GllossActNoCcenter)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("GLLoss_ActNo_CCenter");

            entity.Property(e => e.GlpremAssetActNo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("GLPremAssetActNo");

            entity.Property(e => e.GlpremAssetActNoCcenter)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("GLPremAssetActNo_CCenter");

            entity.Property(e => e.GlpremLossActNo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("GLPremLossActNo");

            entity.Property(e => e.GlpremLossActNoCcenter)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("GLPremLossActNo_CCenter");

            entity.Property(e => e.IdPortfolioGroup).HasColumnName("ID_PortfolioGroup");

            entity.Property(e => e.LoanTypeId).HasColumnName("LoanTypeID");

            entity.Property(e => e.PortfolioId).HasColumnName("PortfolioID");

            entity.Property(e => e.Title)
                .HasMaxLength(200)
                .IsUnicode(false);

            entity.Property(e => e.UnRealisedGain)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.UnRealisedGainCcenter)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("UnRealisedGain_CCenter");

            entity.Property(e => e.UnRealisedLoss)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.UnRealisedLossCcenter)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("UnRealisedLoss_CCenter");
        });

        modelBuilder.Entity<LnAcrInt>(entity =>
        {
            entity.HasKey(e => e.TransactionId)
                .HasName("KeyDealAcrInterest1");

            entity.ToTable("LnAcrInt");

            entity.HasIndex(e => e.LoanId, "KeyLoanID");

            entity.Property(e => e.TransactionId).HasColumnName("TransactionID");

            entity.Property(e => e.AccruedInterest).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.CrDr)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.LoanId).HasColumnName("LoanID");

            
                
                

            entity.Property(e => e.Narration)
                .HasMaxLength(40)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.Post2Gl).HasColumnName("Post2GL");

            entity.Property(e => e.ValueDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<LnAdj>(entity =>
        {
            entity.HasKey(e => e.LoanId);

            entity.ToTable("LnAdj");

            entity.Property(e => e.LoanId)
                .ValueGeneratedNever()
                .HasColumnName("LoanID");

            entity.Property(e => e.IntAdj).HasColumnType("decimal(18, 2)");
        });

        modelBuilder.Entity<LnBal>(entity =>
        {
            entity.HasKey(e => e.SerialNo)
                .HasName("KeyLoanBalances1");

            entity.ToTable("LnBal");

            entity.HasIndex(e => e.LoanId, "KeyLoanID");

            entity.Property(e => e.Balance).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.BeginDate).HasColumnType("datetime");

            entity.Property(e => e.IntAmount).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.IntRate).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.LoanId).HasColumnName("LoanID");

            
                
                

            entity.Property(e => e.Notes)
                .HasMaxLength(40)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.Post2Gl)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.ValueDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<LnChangeInBondValue>(entity =>
        {
            entity.HasKey(e => e.IdChangeInBondValue)
                .HasName("PK_ChangeInBondValue");

            entity.ToTable("LnChangeInBondValue");

            entity.HasIndex(e => new { e.IdPortfolio, e.ValuationDate, e.LoanId }, "Key_LnChangeInBondValue_NoUnique");

            entity.Property(e => e.IdChangeInBondValue).HasColumnName("ID_ChangeInBondValue");

            entity.Property(e => e.Amount).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.CostOfBond).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.CurMrkPrice).HasColumnType("decimal(18, 4)");

            entity.Property(e => e.GlpostDate)
                .HasColumnType("datetime")
                .HasColumnName("GLPostDate");

            entity.Property(e => e.IdPortfolio).HasColumnName("ID_Portfolio");

            entity.Property(e => e.LoanId).HasColumnName("LoanID");

            entity.Property(e => e.PostedBy)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.PrvMrkPrice).HasColumnType("decimal(18, 4)");

            entity.Property(e => e.QtyUnit).HasColumnType("decimal(31, 4)");

            entity.Property(e => e.ReversalId).HasColumnName("ReversalID");

            entity.Property(e => e.ValuationDate).HasColumnType("datetime");

            entity.Property(e => e.VoucherNo)
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<LnInStop>(entity =>
        {
            entity.HasKey(e => e.StopId)
                .HasName("KeyLnStopID");

            entity.ToTable("LnInStop");

            entity.HasIndex(e => new { e.LoanId, e.EffectiveDate }, "KeyLnStopSort");

            entity.HasIndex(e => e.LoanId, "KeyStopLoanID");

            entity.Property(e => e.StopId)
                .ValueGeneratedNever()
                .HasColumnName("StopID");

            entity.Property(e => e.EffectiveDate).HasColumnType("datetime");

            entity.Property(e => e.LoanId).HasColumnName("LoanID");

            
                
                

            entity.Property(e => e.Narration)
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<LnIntRat>(entity =>
        {
            entity.HasKey(e => e.IntRateId)
                .HasName("KeyIntRateID");

            entity.ToTable("LnIntRat");

            entity.HasIndex(e => new { e.FloatingIntType, e.EffectiveDate }, "KeyEffDate")
                .IsUnique();

            entity.Property(e => e.IntRateId).HasColumnName("IntRateID");

            entity.Property(e => e.EffectiveDate).HasColumnType("datetime");

            
                
                

            entity.Property(e => e.Rate).HasColumnType("decimal(31, 8)");
        });

        modelBuilder.Entity<LnIntRem>(entity =>
        {
            entity.HasKey(e => e.IntReminderId)
                .HasName("KeyIntReminderID");

            entity.ToTable("LnIntRem");

            entity.HasIndex(e => e.LoanId, "KeyLoanID");

            entity.HasIndex(e => e.IntScheduleId, "KeySchedule");

            entity.Property(e => e.IntReminderId).HasColumnName("IntReminderID");

            entity.Property(e => e.ExpectedDate).HasColumnType("datetime");

            entity.Property(e => e.IntAdjustment).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.IntExpected).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.IntReceived).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.IntScheduleId).HasColumnName("IntScheduleID");

            entity.Property(e => e.LoanId).HasColumnName("LoanID");

            
                
                
        });

        modelBuilder.Entity<LnIntSch>(entity =>
        {
            entity.HasKey(e => e.IntScheduleId)
                .HasName("KeyIntScheduleID");

            entity.ToTable("LnIntSch");

            entity.HasIndex(e => e.LoanId, "KeyIntLoanID");

            entity.Property(e => e.IntScheduleId).HasColumnName("IntScheduleID");

            entity.Property(e => e.Add2BaseInterestRate).HasColumnType("decimal(18, 8)");

            entity.Property(e => e.EffectiveIntRate).HasColumnType("decimal(18, 8)");

            entity.Property(e => e.FixedInterestRate).HasColumnType("decimal(18, 8)");

            entity.Property(e => e.FloatingIntRateInUse).HasColumnType("decimal(18, 8)");

            entity.Property(e => e.IntEndDate).HasColumnType("datetime");

            entity.Property(e => e.IntPaymentGap)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.IntStartDate).HasColumnType("datetime");

            entity.Property(e => e.IntStatus)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.InterestType)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.LastResetDate).HasColumnType("datetime");

            entity.Property(e => e.LoanId).HasColumnName("LoanID");

            entity.Property(e => e.MaxInterestRate).HasColumnType("decimal(18, 8)");

            entity.Property(e => e.MinInterestRate).HasColumnType("decimal(18, 8)");

            
                
                

            entity.Property(e => e.ResetFloatGap)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<LnIntTyp>(entity =>
        {
            entity.HasKey(e => e.FloatingIntTypeId)
                .HasName("KeyIntTypeID");

            entity.ToTable("LnIntTyp");

            entity.HasIndex(e => e.Title, "KeyIntTypeTitle")
                .IsUnique();

            entity.Property(e => e.FloatingIntTypeId).HasColumnName("FloatingIntTypeID");

            
                
                

            entity.Property(e => e.Title)
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<LnInterestAccrualSchedule>(entity =>
        {
            entity.HasKey(e => e.IdLnInterestAccrualSchedule);

            entity.ToTable("LnInterestAccrualSchedule");

            entity.Property(e => e.IdLnInterestAccrualSchedule).HasColumnName("ID_LnInterestAccrualSchedule");

            entity.Property(e => e.BeginDate).HasColumnType("datetime");

            entity.Property(e => e.CloseBalance).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.ExpCoupon).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.IntRate).HasColumnType("decimal(18, 8)");

            entity.Property(e => e.Interest).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.LastCouponDate).HasColumnType("datetime");

            entity.Property(e => e.NextCouponDate).HasColumnType("datetime");

            entity.Property(e => e.OpenBalance).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.PrincipalPaid).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.SumCoupon).HasColumnType("decimal(18, 2)");
        });

        modelBuilder.Entity<LnIvcmandateDetail>(entity =>
        {
            entity.HasKey(e => e.IdIvcmandateDetails);

            entity.ToTable("LnIVCMandateDetails");

            entity.Property(e => e.IdIvcmandateDetails).HasColumnName("ID_IVCMandateDetails");

            entity.Property(e => e.EnforceBy)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.IdIvcmasterMandate).HasColumnName("ID_IVCMasterMandate");

            entity.Property(e => e.MaxCleanPrice).HasColumnType("decimal(18, 8)");

            
                
                

            entity.Property(e => e.QtyReceived).HasColumnType("decimal(18, 0)");

            entity.Property(e => e.QtyRequested).HasColumnType("decimal(18, 0)");

            entity.Property(e => e.Symbol)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.TargetYield).HasColumnType("decimal(18, 2)");
        });

        modelBuilder.Entity<LnIvcmandateMaster>(entity =>
        {
            entity.HasKey(e => e.IdIvcmasterMandate);

            entity.ToTable("LnIVCMandateMaster");

            entity.HasIndex(e => e.Narration, "Key_LnMandateMaster_Narration");

            entity.Property(e => e.IdIvcmasterMandate).HasColumnName("ID_IVCMasterMandate");

            entity.Property(e => e.ApprovedBy)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.CapturedBy)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.Comments).HasColumnType("text");

            entity.Property(e => e.EffectiveDate).HasColumnType("datetime");

            entity.Property(e => e.ExpireDate).HasColumnType("datetime");

            entity.Property(e => e.IdPortfolio).HasColumnName("ID_Portfolio");

            entity.Property(e => e.MandateType)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            
                
                

            entity.Property(e => e.Narration)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.Status)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<LnMast>(entity =>
        {
            entity.HasKey(e => e.LoanId)
                .HasName("KeyLoanID");

            entity.ToTable("LnMast");

            entity.HasIndex(e => e.CustomerId, "KeyCustomer");

            entity.HasIndex(e => new { e.InvestType, e.LoanId }, "KeyLnGlLink");

            entity.HasIndex(e => e.LoanTypeId, "KeyLoanType2");

            entity.HasIndex(e => e.Narration, "KeyNarration");

            entity.Property(e => e.AcrBf)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("Acr_BF");

            entity.Property(e => e.AmortYieldRate).HasColumnType("decimal(20, 15)");

            entity.Property(e => e.BankId).HasColumnName("BankID");

            entity.Property(e => e.BrokerId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("BrokerID");

            entity.Property(e => e.ChequeNo)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.Comments).HasColumnType("text");

            entity.Property(e => e.Commission).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.ContractNoteNo)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.CostPrice).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.CumInterest).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.CurrencyId)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("CurrencyID")
                .IsFixedLength();

            entity.Property(e => e.CustomerId).HasColumnName("CustomerID");

            entity.Property(e => e.Discount).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.EffectiveDate).HasColumnType("datetime");

            entity.Property(e => e.EirRate)
                .HasColumnType("decimal(20, 15)")
                .HasColumnName("EIR_Rate");

            entity.Property(e => e.ExRate).HasColumnType("decimal(18, 4)");

            entity.Property(e => e.IdBankAccount)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("ID_BankAccount");

            entity.Property(e => e.IdBranch)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("ID_Branch");

            entity.Property(e => e.IdLoanMandateDetails).HasColumnName("ID_LoanMandateDetails");

            entity.Property(e => e.IdLocation)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("ID_Location");

            entity.Property(e => e.IdPortfolioCustodian).HasColumnName("ID_PortfolioCustodian");

            entity.Property(e => e.IdProductLine)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("ID_ProductLine");

            entity.Property(e => e.IdSettlementModes).HasColumnName("ID_SettlementModes");

            entity.Property(e => e.IdTransactionProcess).HasColumnName("ID_TransactionProcess");

            entity.Property(e => e.IdTreatmentType)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("ID_TreatmentType");

            entity.Property(e => e.IntRepaid).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.InterestBfAdjustment).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.InvestType)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.IssueRate).HasColumnType("decimal(28, 20)");

            entity.Property(e => e.IssueType)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.LastTransDate).HasColumnType("datetime");

            entity.Property(e => e.LoanTypeId).HasColumnName("LoanTypeID");

            entity.Property(e => e.MaturityDate).HasColumnType("datetime");

            
                
                

            entity.Property(e => e.Narration)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.NorminalCost).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.NseCscsfees)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("NseCSCSFees");

            entity.Property(e => e.OtherFees).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.OverRideCouponBf).HasColumnName("OverRideCoupon_bf");

            entity.Property(e => e.Premuim).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.PrnRepaid).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.PurchasedCoupon).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.QtyRedeemed).HasColumnType("decimal(26, 8)");

            entity.Property(e => e.QtyUnit).HasColumnType("decimal(28, 4)");

            entity.Property(e => e.SecFees).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.SettlementDate).HasColumnType("datetime");

            entity.Property(e => e.StampDuty).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.Status)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.StockExchangeId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("StockExchangeID");

            entity.Property(e => e.Symbol)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.TransactionCost).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.TransferNo)
                .HasMaxLength(15)
                .IsUnicode(false);

            entity.Property(e => e.TtransactionDate).HasColumnType("datetime");

            entity.Property(e => e.UnitCost).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.Vat)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VAT");

            entity.Property(e => e.WriteOffType)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.YieldOverRideAmorise).HasColumnName("YieldOverRide_Amorise");

            entity.Property(e => e.YieldOverRidePurchase).HasColumnName("YieldOverRide_Purchase");

            entity.Property(e => e.YieldRate).HasColumnType("decimal(20, 15)");
        });

        modelBuilder.Entity<LnMstAll>(entity =>
        {
            entity.HasKey(e => e.LoanAllocationId)
                .HasName("KeyLoanAllocationID");

            entity.ToTable("LnMstAll");

            entity.HasIndex(e => e.LoanId, "KeyLoanID");

            entity.HasIndex(e => new { e.LoanId, e.PortfolioId }, "KeyLoanPortfolio");

            entity.Property(e => e.LoanAllocationId).HasColumnName("LoanAllocationID");

            entity.Property(e => e.Amount).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.IntReceived).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.LoanId).HasColumnName("LoanID");

            
                
                

            entity.Property(e => e.PortfolioId).HasColumnName("PortfolioID");

            entity.Property(e => e.PrnReceived).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.QtyUnit).HasColumnType("decimal(24, 4)");

            entity.Property(e => e.ValueDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<LnOkay>(entity =>
        {
            entity.HasNoKey();

            entity.ToTable("LnOkay");

            entity.Property(e => e.LoanId).HasColumnName("LoanID");
        });

        modelBuilder.Entity<LnPay>(entity =>
        {
            entity.HasKey(e => e.PaymentId)
                .HasName("KeyPaymentID1");

            entity.ToTable("LnPay");

            entity.HasIndex(e => e.PaymentType, "IX_LnPay_PaymentType");

            entity.HasIndex(e => e.LoanId, "KeyLoanID");

            entity.HasIndex(e => e.ValueDate, "Key_LnPay_ValueDate");

            entity.Property(e => e.PaymentId).HasColumnName("PaymentID");

            entity.Property(e => e.Amount).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.CapturedBy)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.CheqNo)
                .HasMaxLength(10)
                .IsUnicode(false);

            entity.Property(e => e.CouponDueDate).HasColumnType("datetime");

            entity.Property(e => e.CurrencyId)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("CurrencyID");

            entity.Property(e => e.GlPostPeriod)
                .HasMaxLength(6)
                .IsUnicode(false);

            entity.Property(e => e.GlpostDate)
                .HasColumnType("datetime")
                .HasColumnName("GLPostDate");

            entity.Property(e => e.IdBankAccount)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("ID_BankAccount");

            entity.Property(e => e.IdLnSymbolReceipt).HasColumnName("ID_LnSymbolReceipt");

            entity.Property(e => e.IdTerminate).HasColumnName("ID_Terminate");

            entity.Property(e => e.IntAdjustment).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.IntAmount).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.LoanId).HasColumnName("LoanID");

            
                
                

            entity.Property(e => e.Narration)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.Property(e => e.PaymentType)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.PrnAmount).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.ProfitLossOnDisposal).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.QtyRedeemed).HasColumnType("decimal(28, 8)");

            entity.Property(e => e.ReceiptNo)
                .HasMaxLength(10)
                .IsUnicode(false);

            entity.Property(e => e.ReceiptType)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.RepaymentRate).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.ReversalId).HasColumnName("ReversalID");

            entity.Property(e => e.SalesProceed).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.SettlementDate).HasColumnType("datetime");

            entity.Property(e => e.SourceBankId)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("SourceBankID");

            entity.Property(e => e.SourceLocation)
                .HasMaxLength(10)
                .IsUnicode(false);

            entity.Property(e => e.TransactionDate)
                .HasColumnType("datetime")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.ValueDate).HasColumnType("datetime");

            entity.Property(e => e.VoucherNo)
                .HasMaxLength(10)
                .IsUnicode(false);

            entity.Property(e => e.WithTaxReceiptNo)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.WitholdingTax).HasColumnType("decimal(18, 2)");
        });

        modelBuilder.Entity<LnPayAdjustment>(entity =>
        {
            entity.HasKey(e => e.IdLnPayAdjustment);

            entity.ToTable("LnPayAdjustment");

            entity.Property(e => e.IdLnPayAdjustment).HasColumnName("ID_LnPayAdjustment");

            entity.Property(e => e.AdjustPrnInt)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.AdjustmentEffect)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.Amount).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.Approvedby)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.CapturedBy)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.Comments).HasColumnType("text");

            entity.Property(e => e.IntAmount).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.LoanId).HasColumnName("LoanID");

            entity.Property(e => e.Narration)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.PrnAmount).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.QtyRedeemed).HasColumnType("decimal(28, 8)");

            entity.Property(e => e.ReversalId).HasColumnName("ReversalID");

            entity.Property(e => e.Status)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.TransactionDate).HasColumnType("datetime");

            entity.Property(e => e.ValueDate).HasColumnType("datetime");

            entity.Property(e => e.VoucherNo)
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<LnPayAll>(entity =>
        {
            entity.HasKey(e => e.PayAllocationId)
                .HasName("KeyPayAllocation");

            entity.ToTable("LnPayAll");

            entity.HasIndex(e => new { e.PortfolioId, e.ValueDate }, "IX_LnPayAll_PortfolioID_ValueDate_LoanID_PaymentID_Amount");

            entity.HasIndex(e => e.PortfolioId, "KeyLnPaPortID");

            entity.HasIndex(e => new { e.LoanId, e.PortfolioId }, "KeyLnpAlLoanPrt");

            entity.HasIndex(e => e.PaymentId, "KeyPaymentID");

            entity.Property(e => e.PayAllocationId).HasColumnName("PayAllocationID");

            entity.Property(e => e.Amount).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.IntAdjustment).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.IntAmount).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.LoanId).HasColumnName("LoanID");

            
                
                

            entity.Property(e => e.PaymentId).HasColumnName("PaymentID");

            entity.Property(e => e.PaymentType)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.PortfolioId).HasColumnName("PortfolioID");

            entity.Property(e => e.PrnAmount).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.ProfitLossOnDisposal).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.QtyRedeemed).HasColumnType("decimal(28, 8)");

            entity.Property(e => e.SalesProceed).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.ValueDate).HasColumnType("datetime");

            entity.Property(e => e.WitholdingTax).HasColumnType("decimal(18, 2)");
        });

        modelBuilder.Entity<LnPrice>(entity =>
        {
            entity.HasKey(e => e.SerialNo)
                .HasName("KeySerialNo");

            entity.HasIndex(e => e.LoanId, "KeyLoanID");

            entity.HasIndex(e => new { e.Symbol, e.QoutedDate }, "Key_LnPrices_Unique")
                .IsUnique();

            entity.Property(e => e.BidPrice).HasColumnType("decimal(28, 20)");

            entity.Property(e => e.CustomerId).HasColumnName("CustomerID");

            entity.Property(e => e.LoanId).HasColumnName("LoanID");

            
                
                

            entity.Property(e => e.OfferPrice).HasColumnType("decimal(28, 20)");

            entity.Property(e => e.QoutedDate).HasColumnType("datetime");

            entity.Property(e => e.Symbol)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.TickerNo)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("TickerNO")
                .IsFixedLength();
        });

        modelBuilder.Entity<LnPrnRem>(entity =>
        {
            entity.HasKey(e => e.PrnReminderId)
                .HasName("KeyPrnReminderID");

            entity.ToTable("LnPrnRem");

            entity.HasIndex(e => e.LoanId, "KeyLoanID");

            entity.HasIndex(e => e.PrnScheduleId, "KeyScheduleID");

            entity.Property(e => e.PrnReminderId).HasColumnName("PrnReminderID");

            entity.Property(e => e.ExpectedDate).HasColumnType("datetime");

            entity.Property(e => e.LoanId).HasColumnName("LoanID");

            
                
                

            entity.Property(e => e.PrnReceived).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.PrnRepayment).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.PrnScheduleId).HasColumnName("PrnScheduleID");

            entity.Property(e => e.RePaymentRate).HasColumnType("decimal(18, 2)");
        });

        modelBuilder.Entity<LnPrnSch>(entity =>
        {
            entity.HasKey(e => e.PrnScheduleId)
                .HasName("KeyPayScheduleID");

            entity.ToTable("LnPrnSch");

            entity.HasIndex(e => e.LoanId, "KeyPrnLoanID");

            entity.Property(e => e.PrnScheduleId).HasColumnName("PrnScheduleID");

            entity.Property(e => e.LoanId).HasColumnName("LoanID");

            
                
                

            entity.Property(e => e.PrnEndDate).HasColumnType("datetime");

            entity.Property(e => e.PrnPaymentGap)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.PrnPaymentType)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.PrnStartDate).HasColumnType("datetime");

            entity.Property(e => e.PrnStatus)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<LnRepaySchedule>(entity =>
        {
            entity.HasKey(e => e.IdLnRepaySchedule);

            entity.ToTable("LnRepaySchedule");

            entity.HasIndex(e => new { e.LoanId, e.DueDate, e.IntPerDay }, "Key_LnRepaySchedule_4_Speed");

            entity.HasIndex(e => new { e.LoanId, e.DueDate }, "Key_LnRepaySchedule_LoanByDate");

            entity.Property(e => e.IdLnRepaySchedule).HasColumnName("ID_LnRepaySchedule");

            entity.Property(e => e.Amount).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.CloseBalance).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.DueDate).HasColumnType("datetime");

            entity.Property(e => e.GlPostPeriod)
                .HasMaxLength(6)
                .IsUnicode(false);

            entity.Property(e => e.GlpostDate)
                .HasColumnType("datetime")
                .HasColumnName("GLPostDate");

            entity.Property(e => e.IntAmount).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.IntPerDay).HasColumnType("decimal(18, 8)");

            
                
                

            entity.Property(e => e.OpenBalance).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.PrnAmount).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.ReversalId).HasColumnName("ReversalID");

            entity.Property(e => e.VoucherNo)
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<LnSalesProceed>(entity =>
        {
            entity.HasKey(e => e.IdSalesProceed);

            entity.ToTable("LnSalesProceed");

            entity.Property(e => e.IdSalesProceed).HasColumnName("ID_SalesProceed");

            entity.Property(e => e.Amount).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.CheqNo)
                .HasMaxLength(10)
                .IsUnicode(false);

            entity.Property(e => e.CurrencyId)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("CurrencyID");

            entity.Property(e => e.GlPostPeriod)
                .HasMaxLength(6)
                .IsUnicode(false);

            entity.Property(e => e.GlpostDate)
                .HasColumnType("datetime")
                .HasColumnName("GLPostDate");

            entity.Property(e => e.IdBankAccount)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("ID_BankAccount");

            entity.Property(e => e.IdLnTerminate).HasColumnName("ID_LnTerminate");

            entity.Property(e => e.IntAmount).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.LoanId).HasColumnName("LoanID");

            
                
                

            entity.Property(e => e.Narration)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.PrnAmount).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.QtyRedeemed).HasColumnType("decimal(28, 8)");

            entity.Property(e => e.ReceiptNo)
                .HasMaxLength(10)
                .IsUnicode(false);

            entity.Property(e => e.ReceiptType)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.ReversalId).HasColumnName("ReversalID");

            entity.Property(e => e.SettlementDate).HasColumnType("datetime");

            entity.Property(e => e.SourceBankId)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("SourceBankID");

            entity.Property(e => e.SourceLocation)
                .HasMaxLength(10)
                .IsUnicode(false);

            entity.Property(e => e.TransactionDate)
                .HasColumnType("datetime")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.ValueDate).HasColumnType("datetime");

            entity.Property(e => e.VoucherNo)
                .HasMaxLength(10)
                .IsUnicode(false);

            entity.Property(e => e.WithTaxReceiptNo)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.WitholdingTax).HasColumnType("decimal(18, 2)");
        });

        modelBuilder.Entity<LnStageredPrnSchedule>(entity =>
        {
            entity.HasKey(e => e.IdStageredPrnSchedule);

            entity.ToTable("LnStageredPrnSchedule");

            entity.HasIndex(e => new { e.Symbol, e.DueDate }, "Key_LnStageredPrnSchedule_Unique")
                .IsUnique();

            entity.Property(e => e.IdStageredPrnSchedule).HasColumnName("ID_StageredPrnSchedule");

            entity.Property(e => e.DueDate).HasColumnType("datetime");

            entity.Property(e => e.PrnPercentDue).HasColumnType("decimal(18, 10)");

            entity.Property(e => e.RepaymentRate).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.Symbol)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<LnSymbol>(entity =>
        {
            entity.HasKey(e => e.Symbol);

            entity.ToTable("LnSymbol");

            entity.HasIndex(e => e.Description, "Key_LnSymbol_Description");

            entity.Property(e => e.Symbol)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.Add2BaseInterestRate).HasColumnType("decimal(18, 8)");

            entity.Property(e => e.AmountIssued).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.BeginDate).HasColumnType("datetime");

            entity.Property(e => e.DaysInYear)
                .HasMaxLength(10)
                .IsUnicode(false);

            entity.Property(e => e.Description)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.EffectiveIntRate).HasColumnType("decimal(18, 8)");

            entity.Property(e => e.EndDate).HasColumnType("datetime");

            entity.Property(e => e.FixedInterestRate).HasColumnType("decimal(18, 8)");

            entity.Property(e => e.IdCurrency)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("ID_Currency");

            entity.Property(e => e.IdCustomer).HasColumnName("ID_Customer");

            entity.Property(e => e.IntEndDate).HasColumnType("datetime");

            entity.Property(e => e.IntPaymentGap)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.IntStartDate).HasColumnType("datetime");

            entity.Property(e => e.InterestType)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.LastResetDate).HasColumnType("datetime");

            entity.Property(e => e.LoanTypeId).HasColumnName("LoanTypeID");

            entity.Property(e => e.MaxInterestRate).HasColumnType("decimal(18, 8)");

            entity.Property(e => e.MinInterestRate).HasColumnType("decimal(18, 8)");

            
                
                

            entity.Property(e => e.PrnEndDate).HasColumnType("datetime");

            entity.Property(e => e.PrnPaymentGap)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.PrnPaymentType)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.PrnStartDate).HasColumnType("datetime");

            entity.Property(e => e.QtyIssued).HasColumnType("decimal(38, 0)");

            entity.Property(e => e.Rating)
                .HasMaxLength(10)
                .IsUnicode(false);

            entity.Property(e => e.RepaymentRate).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.ResetFloatGap)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<LnSymbolReceipt>(entity =>
        {
            entity.HasKey(e => e.IdLnSymbolReceipt);

            entity.ToTable("LnSymbolReceipt");

            entity.HasIndex(e => e.Narration, "Key_LnSymbolReceipt_Narration");

            entity.Property(e => e.IdLnSymbolReceipt).HasColumnName("ID_LnSymbolReceipt");

            entity.Property(e => e.Amount).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.ApprovedBy)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.CapturedBy)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.CheqNo)
                .HasMaxLength(10)
                .IsUnicode(false);

            entity.Property(e => e.Comments).HasColumnType("text");

            entity.Property(e => e.CouponDueDate).HasColumnType("datetime");

            entity.Property(e => e.CurrencyId)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("CurrencyID");

            entity.Property(e => e.GlPostPeriod)
                .HasMaxLength(6)
                .IsUnicode(false);

            entity.Property(e => e.GlpostDate)
                .HasColumnType("datetime")
                .HasColumnName("GLPostDate");

            entity.Property(e => e.IdBankAccount)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("ID_BankAccount");

            entity.Property(e => e.IdPortfolio).HasColumnName("ID_Portfolio");

            entity.Property(e => e.IntAdjustment).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.IntAmount).HasColumnType("decimal(18, 2)");

            
                
                

            entity.Property(e => e.Narration)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.PaymentType)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.PrevCouponDate).HasColumnType("datetime");

            entity.Property(e => e.PrnAmount).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.ReceiptNo)
                .HasMaxLength(10)
                .IsUnicode(false);

            entity.Property(e => e.ReceiptType)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.ReversalId).HasColumnName("ReversalID");

            entity.Property(e => e.ShortFallExcess).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.SourceBankId)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("SourceBankID");

            entity.Property(e => e.SourceLocation)
                .HasMaxLength(10)
                .IsUnicode(false);

            entity.Property(e => e.Status)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.Symbol)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.TransactionDate)
                .HasColumnType("datetime")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.TreatDifferenceAs)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.ValueDate).HasColumnType("datetime");

            entity.Property(e => e.VoucherNo)
                .HasMaxLength(10)
                .IsUnicode(false);

            entity.Property(e => e.WitholdingTax).HasColumnType("decimal(18, 2)");
        });

        modelBuilder.Entity<LnSymbolReceiptDetail>(entity =>
        {
            entity.HasKey(e => e.IdLnSymbolReceiptDetails);

            entity.Property(e => e.IdLnSymbolReceiptDetails).HasColumnName("ID_LnSymbolReceiptDetails");

            entity.Property(e => e.Amount).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.IdLnSymbolReceipt).HasColumnName("ID_LnSymbolReceipt");

            entity.Property(e => e.IntAdjustment).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.IntAmount).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.IntExpected).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.LoanId).HasColumnName("LoanID");

            
                
                

            entity.Property(e => e.Narration)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.PrnAmount).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.PrnExpected).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.QtyRedeemed).HasColumnType("decimal(28, 8)");

            entity.Property(e => e.RepaymentRate).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.ShortFallExcess).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.ValueDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<LnTerminate>(entity =>
        {
            entity.HasKey(e => e.IdLnTerminate);

            entity.ToTable("LnTerminate");

            entity.HasIndex(e => new { e.LoanId, e.TerminationDate, e.Status }, "LnTerminate_Speedup_01");

            entity.Property(e => e.IdLnTerminate).HasColumnName("ID_LnTerminate");

            entity.Property(e => e.BalanceWriteOff).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.BrokerId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("BrokerID");

            entity.Property(e => e.CapturedBy)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.Comments).HasColumnType("text");

            entity.Property(e => e.Commission).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.ContractNoteId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("ContractNoteID");

            entity.Property(e => e.ContractNoteNo)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.CostOfBond).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.CostPrice).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.CumInterest).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.Discount).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.GlPostPeriod)
                .HasMaxLength(6)
                .IsUnicode(false);

            entity.Property(e => e.GlpostDate)
                .HasColumnType("datetime")
                .HasColumnName("GLPostDate");

            entity.Property(e => e.IdBankaccount)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("id_bankaccount");

            entity.Property(e => e.IdLoanMandateDetails).HasColumnName("ID_LoanMandateDetails");

            entity.Property(e => e.Interest2Reverse).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.IssueRate).HasColumnType("decimal(28, 20)");

            entity.Property(e => e.IssueType)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.LastPostDate).HasColumnType("datetime");

            entity.Property(e => e.LastWriteOffDate).HasColumnType("datetime");

            entity.Property(e => e.LoanId).HasColumnName("LoanID");

            entity.Property(e => e.ManualSalesCoupon).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.MartketValue).HasColumnType("decimal(18, 2)");

            
                
                

            entity.Property(e => e.NewEffectiveDate).HasColumnType("datetime");

            entity.Property(e => e.NewMaturityDate).HasColumnType("datetime");

            entity.Property(e => e.NewNorminalCost).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.NewYieldRate).HasColumnType("decimal(20, 15)");

            entity.Property(e => e.NorminalValueBf)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("NorminalValue_bf");

            entity.Property(e => e.NseCscsfees)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("NseCSCSFees");

            entity.Property(e => e.OtherFees).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.PremDisc2Post).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.PremDisc2Reverse).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.PremDisc2date)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("PremDisc_2Date");

            entity.Property(e => e.PremDisc4Period).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.PremDiscBal)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("PremDisc_Bal");

            entity.Property(e => e.PremDiscBf)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("PremDisc_BF");

            entity.Property(e => e.PremDiscCf)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("PremDisc_Cf");

            entity.Property(e => e.PremDiscIncep2Date).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.PremDiscSold)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("PremDisc_Sold");

            entity.Property(e => e.PremDiscSold2)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("PremDisc_Sold2");

            entity.Property(e => e.PremDiscUnSold)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("PremDisc_UnSold");

            entity.Property(e => e.Premuim).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.PrnCostBf)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("PrnCost_bf");

            entity.Property(e => e.PrnCostCf)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("PrnCost_cf");

            entity.Property(e => e.PrnCostSold)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("PrnCost_Sold");

            entity.Property(e => e.ProfLoss).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.QtySold).HasColumnType("decimal(24, 4)");

            entity.Property(e => e.QtyUnitBf)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("QtyUnit_bf");

            entity.Property(e => e.SalesProceed).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.SecFees).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.SettlementDate).HasColumnType("datetime");

            entity.Property(e => e.StampDuty).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.Status)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.Taxes).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.TerminationDate).HasColumnType("datetime");

            entity.Property(e => e.TerminationReason)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.Property(e => e.TerminationType)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.TotalCost).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.TransactionCost).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.TransactionDate).HasColumnType("datetime");

            entity.Property(e => e.TransferNo)
                .HasMaxLength(15)
                .IsUnicode(false);

            entity.Property(e => e.UnEarnedInterest).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.UnRealiseGainLoss).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.UnitPrice).HasColumnType("decimal(28, 20)");

            entity.Property(e => e.Vat)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VAT");

            entity.Property(e => e.VoucherNo)
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<LnTerminateAllocation>(entity =>
        {
            entity.HasKey(e => e.IdLnTerminateAllocation);

            entity.ToTable("LnTerminateAllocation");

            entity.Property(e => e.IdLnTerminateAllocation).HasColumnName("ID_LnTerminateAllocation");

            entity.Property(e => e.CostOfBond).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.CostPrice).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.IdLnTerminate).HasColumnName("ID_LnTerminate");

            entity.Property(e => e.IntAmount).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.Interest2Reverse).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.LoanId).HasColumnName("LoanID");

            entity.Property(e => e.ManualSalesCoupon).HasColumnType("decimal(18, 2)");

            
                
                

            entity.Property(e => e.PortfolioId).HasColumnName("PortfolioID");

            entity.Property(e => e.PremDisc2Post).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.PremDisc2Reverse).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.PremDiscSold)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("PremDisc_Sold");

            entity.Property(e => e.PremDiscSold2)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("PremDisc_Sold2");

            entity.Property(e => e.ProfitLoss).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.QtySold).HasColumnType("decimal(24, 4)");

            entity.Property(e => e.SalesProceed).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.UnRealiseGainLoss).HasColumnType("decimal(18, 2)");
        });

        modelBuilder.Entity<LnTmpPrn>(entity =>
        {
            entity.HasKey(e => e.PrnReminderId);

            entity.ToTable("LnTmpPrn");

            entity.HasIndex(e => e.LoanId, "Key_LnTmpPrn_LoanID");

            entity.Property(e => e.PrnReminderId).HasColumnName("PrnReminderID");

            entity.Property(e => e.DueDate).HasColumnType("datetime");

            entity.Property(e => e.LoanId).HasColumnName("LoanID");

            
                
                

            entity.Property(e => e.PrnRepayment).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.RePaymentRate).HasColumnType("decimal(18, 2)");
        });

        modelBuilder.Entity<LnTreatmentType>(entity =>
        {
            entity.HasKey(e => e.IdTreatmentType);

            entity.ToTable("LnTreatmentType");

            entity.HasIndex(e => e.Treatment, "Key_LnTreatmentType_Treatment")
                .IsUnique();

            entity.Property(e => e.IdTreatmentType)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("ID_TreatmentType");

            entity.Property(e => e.AmortisePremiumOrDiscount)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.Treatment)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.ValuationMethod)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<LnType>(entity =>
        {
            entity.HasKey(e => e.LoanTypeId)
                .HasName("KEyLoanType");

            entity.HasIndex(e => e.Title, "KeyTitle9")
                .IsUnique();

            entity.HasIndex(e => e.IdOutCashForeCastClass, "Key_LnTypes_ID_OutCashForeCastClass");

            entity.Property(e => e.LoanTypeId).HasColumnName("LoanTypeID");

            entity.Property(e => e.IdCashForeCastClass)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("ID_CashForeCastClass");

            entity.Property(e => e.IdInvestmentType)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("ID_InvestmentType");

            entity.Property(e => e.IdOutCashForeCastClass)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("ID_OutCashForeCastClass");

            entity.Property(e => e.IdSettlementModes).HasColumnName("ID_SettlementModes");

            
                
                

            entity.Property(e => e.PencomCode)
                .HasMaxLength(10)
                .IsUnicode(false);

            entity.Property(e => e.Title)
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<LnWriteOff>(entity =>
        {
            entity.HasKey(e => e.IdLnWriteOff);

            entity.ToTable("LnWriteOff");

            entity.HasIndex(e => new { e.LoanId, e.WriteOffDate }, "<Name of Missing Index, sysname,>");

            entity.Property(e => e.IdLnWriteOff).HasColumnName("ID_LnWriteOff");

            entity.Property(e => e.Amount).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.CloseBalance).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.Eiramount)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("EIRAmount");

            entity.Property(e => e.GlPostPeriod)
                .HasMaxLength(6)
                .IsUnicode(false);

            entity.Property(e => e.GlpostDate)
                .HasColumnType("datetime")
                .HasColumnName("GLPostDate");

            entity.Property(e => e.LoanId).HasColumnName("LoanID");

            
                
                

            entity.Property(e => e.OpenBalace).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.ReversalId).HasColumnName("ReversalID");

            entity.Property(e => e.VoucherNo)
                .HasMaxLength(10)
                .IsUnicode(false);

            entity.Property(e => e.WriteOffDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<LnWriteOffSave>(entity =>
        {
            entity.HasNoKey();

            entity.ToTable("LnWriteOff_Save");

            entity.Property(e => e.Amount).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.CloseBalance).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.Eiramount)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("EIRAmount");

            entity.Property(e => e.GlPostPeriod)
                .HasMaxLength(6)
                .IsUnicode(false);

            entity.Property(e => e.GlpostDate)
                .HasColumnType("datetime")
                .HasColumnName("GLPostDate");

            entity.Property(e => e.IdLnWriteOff).HasColumnName("ID_LnWriteOff");

            entity.Property(e => e.LoanId).HasColumnName("LoanID");

            ;

            entity.Property(e => e.OpenBalace).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.ReversalId).HasColumnName("ReversalID");

            entity.Property(e => e.VoucherNo)
                .HasMaxLength(10)
                .IsUnicode(false);

            entity.Property(e => e.WriteOffDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<LnYieldHistory>(entity =>
        {
            entity.HasKey(e => e.IdYieldHistory);

            entity.ToTable("LnYieldHistory");

            entity.Property(e => e.IdYieldHistory).HasColumnName("ID_YieldHistory");

            entity.Property(e => e.EffectiveDate).HasColumnType("datetime");

            
                
                

            entity.Property(e => e.YieldRate).HasColumnType("decimal(20, 15)");
        });

        modelBuilder.Entity<Loan2Convert>(entity =>
        {
            entity.HasKey(e => e.IdLoan2Convert);

            entity.ToTable("Loan2Convert");

            entity.HasIndex(e => e.Reason4Conversion, "Keyoan2Convert_Reason4Conversion");

            entity.Property(e => e.IdLoan2Convert).HasColumnName("ID_Loan2Convert");

            entity.Property(e => e.AmortYieldRate).HasColumnType("decimal(20, 15)");

            entity.Property(e => e.ApprovedBy)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.CapturedBy)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.Capturedate).HasColumnType("datetime");

            entity.Property(e => e.Comments).HasColumnType("text");

            entity.Property(e => e.DiffPremDisc2Post).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.EffectiveDate).HasColumnType("datetime");

            entity.Property(e => e.LoanId).HasColumnName("LoanID");

            entity.Property(e => e.NewIdTreatmentType)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("New_ID_TreatmentType");

            entity.Property(e => e.NewPremDisc2Date).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.OldIdTreatmentType)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("Old_ID_TreatmentType");

            entity.Property(e => e.PostedPremDisc2Date).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.Reason4Conversion)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.Property(e => e.Status)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.VoucherNo)
                .HasMaxLength(10)
                .IsUnicode(false);

            entity.Property(e => e.WriteOffType)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.YieldOverRideAmorise).HasColumnName("YieldOverRide_Amorise");

            entity.Property(e => e.YieldOverRidePurchase).HasColumnName("YieldOverRide_Purchase");
        });

        modelBuilder.Entity<Loan2Correct>(entity =>
        {
            entity.HasKey(e => e.IdLoan2Correct);

            entity.ToTable("Loan2Correct");

            entity.Property(e => e.IdLoan2Correct).HasColumnName("ID_Loan2Correct");

            entity.Property(e => e.ApprovedBy)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.CapturedBy)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.Capturedate).HasColumnType("datetime");

            entity.Property(e => e.Comments).HasColumnType("text");

            entity.Property(e => e.DiffInterest2Post).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.EffectiveDate).HasColumnType("datetime");

            entity.Property(e => e.LoanId).HasColumnName("LoanID");

            entity.Property(e => e.NewInterest2Date).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.NewInterestRate)
                .HasColumnType("decimal(18, 8)")
                .HasColumnName("New_InterestRate");

            entity.Property(e => e.NewMaturityDate)
                .HasColumnType("datetime")
                .HasColumnName("New_MaturityDate");

            entity.Property(e => e.NewPrincpalType)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("New_PrincpalType")
                .IsFixedLength();

            entity.Property(e => e.NewSymbol)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("New_Symbol");

            entity.Property(e => e.OldInterestRate)
                .HasColumnType("decimal(18, 8)")
                .HasColumnName("Old_InterestRate");

            entity.Property(e => e.OldPrincpalType)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("Old_PrincpalType")
                .IsFixedLength();

            entity.Property(e => e.OldSymbol)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Old_Symbol");

            entity.Property(e => e.PostedInterest2Date).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.Reason4Correction)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.Property(e => e.Status)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<Loan2CovertAmortSchedule>(entity =>
        {
            entity.HasKey(e => e.IdBondIrr);

            entity.ToTable("Loan2CovertAmortSchedule");

            entity.HasIndex(e => e.IdLoan2Convert, "Key_Loan2CovertAmortSchedule_IDLoan2Convert");

            entity.Property(e => e.IdBondIrr).HasColumnName("ID_BondIrr");

            entity.Property(e => e.AmortAmount).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.Amount).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.BeginDate).HasColumnType("datetime");

            entity.Property(e => e.DueDate).HasColumnType("datetime");

            entity.Property(e => e.IdLoan2Convert).HasColumnName("ID_Loan2Convert");

            entity.Property(e => e.IrrIntAmount)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("IrrInt_Amount");

            entity.Property(e => e.PrnBf)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("Prn_bf");

            entity.Property(e => e.PrnCf)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("Prn_cf");
        });

        modelBuilder.Entity<LoanBalance>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("LoanBalances");

            entity.Property(e => e.Balance).HasColumnType("decimal(38, 2)");

            entity.Property(e => e.LoanId).ValueGeneratedOnAdd();
        });

        modelBuilder.Entity<LoanBalances4Valuation>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("LoanBalances4Valuation");

            entity.Property(e => e.Balance).HasColumnType("decimal(38, 2)");

            entity.Property(e => e.LoanId).ValueGeneratedOnAdd();
        });

        modelBuilder.Entity<LoanMandateDetail>(entity =>
        {
            entity.HasKey(e => e.IdLoanMandateDetails);

            entity.Property(e => e.IdLoanMandateDetails).HasColumnName("ID_LoanMandateDetails");

            entity.Property(e => e.BuyerName)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.CleanPrice).HasColumnType("decimal(28, 20)");

            entity.Property(e => e.Comments).HasColumnType("text");

            entity.Property(e => e.Consideration).HasColumnType("decimal(20, 2)");

            entity.Property(e => e.Cscsid)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CSCSID");

            entity.Property(e => e.DaysBf).HasColumnName("Days_bf");

            entity.Property(e => e.EntryDate).HasColumnType("datetime");

            entity.Property(e => e.ExRate).HasColumnType("decimal(18, 4)");

            entity.Property(e => e.IdBankAccount)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("ID_BankAccount");

            entity.Property(e => e.IdIvcmandateDetails).HasColumnName("ID_IVCMandateDetails");

            entity.Property(e => e.IdLoanMandateMaster).HasColumnName("ID_LoanMandateMaster");

            entity.Property(e => e.IdPortfolio).HasColumnName("ID_portfolio");

            entity.Property(e => e.IdPortfolioCustodian).HasColumnName("ID_PortfolioCustodian");

            entity.Property(e => e.IdSettlementModes).HasColumnName("ID_SettlementModes");

            entity.Property(e => e.IdTreatmentType)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("ID_TreatmentType");

            entity.Property(e => e.IntCalcMethod)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.InvestorActNo)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.IssueType)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.LastCouponDate).HasColumnType("datetime");

            entity.Property(e => e.LoanId).HasColumnName("LoanID");

            entity.Property(e => e.ManualPurchaseCoupon).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.NorminalValue).HasColumnType("decimal(20, 2)");

            entity.Property(e => e.OverRideCouponBf).HasColumnName("OverRideCoupon_bf");

            entity.Property(e => e.ParValue).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.PremiumDiscount).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.PurCouponAdjustment).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.PurchaseCoupon).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.QtyUnits).HasColumnType("decimal(20, 0)");

            entity.Property(e => e.ReferenceNo)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.SellerName)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.SettlementDate).HasColumnType("datetime");

            entity.Property(e => e.Status)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.Symbol)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.YieldToMaturity).HasColumnType("decimal(20, 15)");
        });

        modelBuilder.Entity<LoanMandateMaster>(entity =>
        {
            entity.HasKey(e => e.IdLoanMandateMaster);

            entity.ToTable("LoanMandateMaster");

            entity.HasIndex(e => e.Narration, "Key_LoanMandateMaster_Narration");

            entity.Property(e => e.IdLoanMandateMaster).HasColumnName("ID_LoanMandateMaster");

            entity.Property(e => e.Amount).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.ApprovalDate).HasColumnType("datetime");

            entity.Property(e => e.ApprovedBy)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.BrokerId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("BrokerID");

            entity.Property(e => e.CapturedBy)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.Comments).HasColumnType("text");

            entity.Property(e => e.ExpireDate).HasColumnType("datetime");

            entity.Property(e => e.IdComplianceOverRideMaster).HasColumnName("ID_ComplianceOverRideMaster");

            entity.Property(e => e.IdPortfolio).HasColumnName("ID_Portfolio");

            entity.Property(e => e.MandateDate).HasColumnType("datetime");

            
                
                

            entity.Property(e => e.Narration)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.Reference)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.Property(e => e.ReviewedBy)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.SettlementDate).HasColumnType("datetime");

            entity.Property(e => e.Status)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.TransType)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<LoanPortfolioDistribution>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("LoanPortfolioDistribution");

            entity.Property(e => e.BondType)
                .HasMaxLength(3)
                .IsUnicode(false);

            entity.Property(e => e.Id)
                .ValueGeneratedOnAdd()
                .HasColumnName("id");

            entity.Property(e => e.NorminalValue).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.PortfolioId).HasColumnName("PortfolioID");

            entity.Property(e => e.QtyBalance).HasColumnType("decimal(28, 4)");

            entity.Property(e => e.Symbol)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Location>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("Location");

            entity.Property(e => e.IdLocation)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("ID_Location");

            entity.Property(e => e.Location1)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Location");
        });

        modelBuilder.Entity<LogFundImport>(entity =>
        {
            entity.HasKey(e => e.IdLogFundImport);

            entity.ToTable("Log_FundImport");

            entity.Property(e => e.IdLogFundImport).HasColumnName("ID_LogFundImport");

            entity.Property(e => e.Comments).HasColumnType("text");

            entity.Property(e => e.CreationDate).HasColumnType("datetime");

            entity.Property(e => e.DataFileName)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.Property(e => e.IdLogMaster).HasColumnName("ID_LogMaster");

            entity.Property(e => e.IdPortfolio).HasColumnName("ID_Portfolio");

            
                
                
        });

        modelBuilder.Entity<LogMaster>(entity =>
        {
            entity.HasKey(e => e.IdLogMaster);

            entity.ToTable("Log_Master");

            entity.Property(e => e.IdLogMaster).HasColumnName("ID_LogMaster");

            entity.Property(e => e.CapturedBy)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.LogDate).HasColumnType("datetime");

            
                
                

            entity.Property(e => e.ProcessName)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<LogSettlementConfirmation>(entity =>
        {
            entity.HasKey(e => e.IdLogSettlementConfirmation)
                .HasName("PK_LogSettlementConfirmation");

            entity.ToTable("Log_SettlementConfirmation");

            entity.HasIndex(e => e.TradeCode, "Key_Log_SettlementConfirmation_TradeCode");

            entity.Property(e => e.IdLogSettlementConfirmation).HasColumnName("ID_LogSettlementConfirmation");

            entity.Property(e => e.Amount).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.Comments).HasColumnType("text");

            entity.Property(e => e.CreationDate).HasColumnType("datetime");

            entity.Property(e => e.DataFileName)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.Property(e => e.IdLogMaster).HasColumnName("ID_LogMaster");

            
                
                

            entity.Property(e => e.Problem).HasColumnType("text");

            entity.Property(e => e.SfkaccountCode)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("SFKAccountCode");

            entity.Property(e => e.SymBol)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.TradeCode)
                .HasMaxLength(10)
                .IsUnicode(false);

            entity.Property(e => e.TradeReference)
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Logging>(entity =>
        {
            entity.HasKey(e => e.InternalId);

            entity.ToTable("Logging");

            entity.Property(e => e.InternalId).HasColumnName("InternalID");

            entity.Property(e => e.ActionDone)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("Action_Done");

            entity.Property(e => e.Audit).HasColumnType("datetime");

            entity.Property(e => e.Ip)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("IP");

            entity.Property(e => e.Pk)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("PK");

            entity.Property(e => e.ProcedureName)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("Procedure_Name");

            entity.Property(e => e.SessionId)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("SessionID");

            entity.Property(e => e.TableName)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("Table_Name");

            entity.Property(e => e.UserId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("UserID");
        });

        modelBuilder.Entity<ManagementFeesRate>(entity =>
        {
            entity.HasKey(e => e.IdManagementFeesRate);

            entity.ToTable("ManagementFeesRate");

            entity.Property(e => e.IdManagementFeesRate).HasColumnName("ID_ManagementFeesRate");

            entity.Property(e => e.BeginAmount).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.EndAmount).HasColumnType("decimal(18, 2)");

            
                
                

            entity.Property(e => e.PcmmgtFees)
                .HasColumnType("decimal(18, 8)")
                .HasColumnName("PCMMgtFees");

            entity.Property(e => e.PfamgtFees)
                .HasColumnType("decimal(18, 8)")
                .HasColumnName("PFAMgtFees");

            entity.Property(e => e.PfcmgtFees)
                .HasColumnType("decimal(18, 8)")
                .HasColumnName("PFCMgtFees");
        });

        modelBuilder.Entity<MergerLink>(entity =>
        {
            entity.HasKey(e => e.IdMargerLink);

            entity.ToTable("MergerLink");

            entity.HasIndex(e => new { e.DatabaseName, e.TableName, e.OldLinkKey }, "Key_MergerLink_Unique")
                .IsUnique();

            entity.Property(e => e.IdMargerLink)
                .ValueGeneratedNever()
                .HasColumnName("ID_MargerLink");

            entity.Property(e => e.DatabaseName)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.NewLinkKey)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.Property(e => e.OldLinkKey)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.Property(e => e.TableName)
                .HasMaxLength(100)
                .IsUnicode(false);
        });

        modelBuilder.Entity<MigrationHistory>(entity =>
        {
            entity.HasKey(e => new { e.MigrationId, e.ContextKey })
                .HasName("PK_dbo.__MigrationHistory");

            entity.ToTable("__MigrationHistory");

            entity.Property(e => e.MigrationId).HasMaxLength(150);

            entity.Property(e => e.ContextKey).HasMaxLength(300);

            entity.Property(e => e.ProductVersion).HasMaxLength(32);
        });

        modelBuilder.Entity<MoneyDetail>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("MoneyDetail");

            entity.Property(e => e.Acode01)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("ACode01");

            entity.Property(e => e.Acode02)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("ACode02");

            entity.Property(e => e.Acode03)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("ACode03");

            entity.Property(e => e.Acode04)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("ACode04");

            entity.Property(e => e.Acode05)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("ACode05");

            entity.Property(e => e.Amount).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.ApplyVat).HasColumnName("ApplyVAT");

            entity.Property(e => e.CustomerCode)
                .HasMaxLength(10)
                .IsUnicode(false);

            entity.Property(e => e.DetailsOfPayment)
                .HasMaxLength(200)
                .IsUnicode(false);

            entity.Property(e => e.ExRate).HasColumnType("decimal(18, 8)");

            entity.Property(e => e.ForexAmount).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.GlactNo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("GLActNo");

            entity.Property(e => e.IdApplication)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("ID_Application");

            entity.Property(e => e.IdBranch)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("ID_Branch");

            entity.Property(e => e.IdLocation)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("ID_Location");

            entity.Property(e => e.IdMoneyDetail)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID_MoneyDetail");

            entity.Property(e => e.IdMoneyMaster).HasColumnName("ID_MoneyMaster");

            entity.Property(e => e.IdProductLine)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("ID_ProductLine");

            entity.Property(e => e.IdReceiptMaster).HasColumnName("ID_ReceiptMaster");

            entity.Property(e => e.IdRequisitionMaster).HasColumnName("ID_RequisitionMaster");

            entity.Property(e => e.IdSubCategory)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ID_SubCategory");

            entity.Property(e => e.RequisitionDate).HasColumnType("datetime");

            entity.Property(e => e.SalesAgentCode)
                .HasMaxLength(10)
                .IsUnicode(false);

            entity.Property(e => e.Ucid).HasColumnName("UCID");

            entity.Property(e => e.Ueid).HasColumnName("UEID");

            entity.Property(e => e.Upid).HasColumnName("UPID");

            entity.Property(e => e.Uqid).HasColumnName("UQID");

            entity.Property(e => e.Usid).HasColumnName("USID");
        });

        modelBuilder.Entity<MoneyMarketAlert>(entity =>
        {
            entity.HasKey(e => e.IdMoneyMarketAlert);

            entity.ToTable("MoneyMarketAlert");

            entity.Property(e => e.IdMoneyMarketAlert).HasColumnName("ID_MoneyMarketAlert");

            entity.Property(e => e.DateCreated).HasColumnType("datetime");

            entity.Property(e => e.DateTriggered).HasColumnType("datetime");

            entity.Property(e => e.MaturityDate).HasColumnType("datetime");

            entity.Property(e => e.Type)
                .HasMaxLength(1)
                .IsFixedLength();

            entity.Property(e => e.UserName).HasMaxLength(50);
        });

        modelBuilder.Entity<MoneyMarketExposureDealSlip>(entity =>
        {
            entity.HasKey(e => e.IdMoneyMarketExposureDealSlip);

            entity.ToTable("MoneyMarketExposureDealSlip");

            entity.HasIndex(e => new { e.IdMoneyMarketExposureMaster, e.NoOfDays }, "Key_MoneyMarketExposureDealSlip_Days");

            entity.HasIndex(e => new { e.IdMoneyMarketExposureMaster, e.NoOfDays }, "Key_MoneyMarketExposureDealSlip_Unique")
                .IsUnique();

            entity.Property(e => e.IdMoneyMarketExposureDealSlip).HasColumnName("ID_MoneyMarketExposureDealSlip");

            entity.Property(e => e.DealSlipAmount).HasColumnType("decimal(24, 2)");

            entity.Property(e => e.IdDealType)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("ID_DealType");

            entity.Property(e => e.IdMoneyMarketExposureMaster).HasColumnName("ID_MoneyMarketExposureMaster");

            entity.Property(e => e.IdPortfolioCashForecastMaster).HasColumnName("ID_PortfolioCashForecastMaster");

            
                
                
        });

        modelBuilder.Entity<MoneyMarketExposureDetail>(entity =>
        {
            entity.HasKey(e => e.IdMoneyMarketExposureDetails);

            entity.HasIndex(e => new { e.IdCustomer, e.IdMoneyMarketExposureMaster }, "Key_MoneyMarketExposureDetails_Unique")
                .IsUnique();

            entity.HasIndex(e => e.IdMoneyMarketExposureMaster, "key_MoneyMarketExposureDetails_ID_MoneyMarketExposureMaster");

            entity.Property(e => e.IdMoneyMarketExposureDetails).HasColumnName("ID_MoneyMarketExposureDetails");

            entity.Property(e => e.CustomerExposure).HasColumnType("decimal(24, 2)");

            entity.Property(e => e.CustomerLimit).HasColumnType("decimal(24, 2)");

            entity.Property(e => e.DealAmount).HasColumnType("decimal(24, 2)");

            entity.Property(e => e.FaceValue).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.IdComplianceOverrideDetails).HasColumnName("ID_ComplianceOverrideDetails");

            entity.Property(e => e.IdCustomer).HasColumnName("ID_Customer");

            entity.Property(e => e.IdCustomerBranch).HasColumnName("ID_CustomerBranch");

            entity.Property(e => e.IdDealType)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("ID_DealType");

            entity.Property(e => e.IdMoneyMarketExposureMaster).HasColumnName("ID_MoneyMarketExposureMaster");

            entity.Property(e => e.IdSettlementModes).HasColumnName("ID_SettlementModes");

            entity.Property(e => e.Int15Days).HasColumnType("decimal(18, 8)");

            entity.Property(e => e.Int15DaysYield).HasColumnType("decimal(18, 8)");

            entity.Property(e => e.Int180Days).HasColumnType("decimal(18, 8)");

            entity.Property(e => e.Int180DaysYield).HasColumnType("decimal(18, 8)");

            entity.Property(e => e.Int180aDays).HasColumnType("decimal(18, 8)");

            entity.Property(e => e.Int180aDaysYield).HasColumnType("decimal(18, 8)");

            entity.Property(e => e.Int180bDays).HasColumnType("decimal(18, 8)");

            entity.Property(e => e.Int180bDaysYield).HasColumnType("decimal(18, 8)");

            entity.Property(e => e.Int180cDays).HasColumnType("decimal(18, 8)");

            entity.Property(e => e.Int180cDaysYield).HasColumnType("decimal(18, 8)");

            entity.Property(e => e.Int180dDays).HasColumnType("decimal(18, 8)");

            entity.Property(e => e.Int180dDaysYield).HasColumnType("decimal(18, 8)");

            entity.Property(e => e.Int180eDays).HasColumnType("decimal(18, 8)");

            entity.Property(e => e.Int180eDaysYield).HasColumnType("decimal(18, 8)");

            entity.Property(e => e.Int30Days).HasColumnType("decimal(18, 8)");

            entity.Property(e => e.Int30DaysYield).HasColumnType("decimal(18, 8)");

            entity.Property(e => e.Int60Days).HasColumnType("decimal(18, 8)");

            entity.Property(e => e.Int60DaysYield).HasColumnType("decimal(18, 8)");

            entity.Property(e => e.Int90Days).HasColumnType("decimal(18, 8)");

            entity.Property(e => e.Int90DaysYield).HasColumnType("decimal(18, 8)");

            entity.Property(e => e.IntRate).HasColumnType("decimal(18, 8)");

            entity.Property(e => e.InterestMode)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.InvestibleAmount).HasColumnType("decimal(24, 2)");

            entity.Property(e => e.MoneyMarketExposure).HasColumnType("decimal(24, 2)");

            entity.Property(e => e.MoneyMarketLimit).HasColumnType("decimal(24, 2)");

            
                
                

            entity.Property(e => e.Remarks)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.Property(e => e.RiskRating)
                .HasMaxLength(10)
                .IsUnicode(false);

            entity.Property(e => e.UnUtilisedAmount).HasColumnType("decimal(18, 2)");
        });

        modelBuilder.Entity<MoneyMarketExposureMaster>(entity =>
        {
            entity.HasKey(e => e.IdMoneyMarketExposureMaster);

            entity.ToTable("MoneyMarketExposureMaster");

            entity.HasIndex(e => e.Narration, "Key_MoneyMarketExposureMaster_Narration");

            entity.HasIndex(e => new { e.IdPortfolio, e.ExposureDate, e.IdCurrency }, "Key_MoneyMarketExposureMaster_Unique");

            entity.Property(e => e.IdMoneyMarketExposureMaster).HasColumnName("ID_MoneyMarketExposureMaster");

            entity.Property(e => e.ApprovedBy)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.Comments).HasColumnType("text");

            entity.Property(e => e.ExposureDate).HasColumnType("datetime");

            entity.Property(e => e.Fund4MoneyMarket).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.Fund4Others).HasColumnType("decimal(18, 0)");

            entity.Property(e => e.FundAvailable).HasColumnType("decimal(24, 2)");

            entity.Property(e => e.IdComplianceOverRideMaster).HasColumnName("ID_ComplianceOverRideMaster");

            entity.Property(e => e.IdCurrency)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("ID_Currency");

            entity.Property(e => e.IdDealType)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("ID_DealType");

            entity.Property(e => e.IdInvestmentType)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("ID_InvestmentType");

            entity.Property(e => e.IdPortfolio).HasColumnName("ID_Portfolio");

            entity.Property(e => e.IdPortfolioCashForecastMaster).HasColumnName("ID_PortfolioCashForecastMaster");

            entity.Property(e => e.InterestMode)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            
                
                

            entity.Property(e => e.Narration)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.PrepairedBy)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.ReviewedBy)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.Status)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.ValuationDateUsed).HasColumnType("datetime");
        });

        modelBuilder.Entity<MoneyMarketQoutation2DealSlip>(entity =>
        {
            entity.HasKey(e => e.IdMoneyMarketQoutation2DealSlip);

            entity.ToTable("MoneyMarketQoutation2DealSlip");

            entity.HasIndex(e => new { e.IdCustomer, e.IdMoneyMarketExposureMaster }, "Key_MMQoute2DealSlip_Speed01");

            entity.HasIndex(e => e.RollOverFromDealId, "Key_MoneyMarketQoutation2DealSlip_RollOverFrom_DealID");

            entity.Property(e => e.IdMoneyMarketQoutation2DealSlip).HasColumnName("ID_MoneyMarketQoutation2DealSlip");

            entity.Property(e => e.Amt2Add).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.Amt2Withdraw).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.BestFaceValue).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.BookingDate).HasColumnType("datetime");

            entity.Property(e => e.BrokerId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("BrokerID");

            entity.Property(e => e.CompoundIntType)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.DealAmount).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.EffectiveYield).HasColumnType("decimal(22, 15)");

            entity.Property(e => e.ExRate).HasColumnType("decimal(18, 4)");

            entity.Property(e => e.FaceValue).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.IdBankAccount)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("ID_BankAccount");

            entity.Property(e => e.IdCustomer).HasColumnName("ID_Customer");

            entity.Property(e => e.IdCustomerBranch).HasColumnName("ID_CustomerBranch");

            entity.Property(e => e.IdDealMaster).HasColumnName("ID_DealMaster");

            entity.Property(e => e.IdDealType)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("ID_DealType");

            entity.Property(e => e.IdMoneyMarketExposureDetails).HasColumnName("ID_MoneyMarketExposureDetails");

            entity.Property(e => e.IdMoneyMarketExposureMaster).HasColumnName("ID_MoneyMarketExposureMaster");

            entity.Property(e => e.IdPortfolioCustodian).HasColumnName("ID_PortfolioCustodian");

            entity.Property(e => e.IdSettlementModes).HasColumnName("ID_SettlementModes");

            entity.Property(e => e.IdTbillTreatmentType)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("ID_TBillTreatmentType");

            entity.Property(e => e.IdTransMarket).HasColumnName("ID_TransMarket");

            entity.Property(e => e.IntRate).HasColumnType("decimal(18, 8)");

            entity.Property(e => e.InterestAmount).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.InterestMode)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.InvestibleAmount).HasColumnType("decimal(24, 2)");

            entity.Property(e => e.ManagementFeesRate).HasColumnType("decimal(18, 4)");

            
                
                

            entity.Property(e => e.Remarks)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.Property(e => e.RollOverFromDealId).HasColumnName("RollOverFrom_DealID");

            entity.Property(e => e.RollOverType)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.Wam)
                .HasColumnType("decimal(18, 8)")
                .HasColumnName("WAM");

            entity.Property(e => e.WithholdTaxAmount).HasColumnType("decimal(18, 2)");
        });

        modelBuilder.Entity<MoneyMarketResult>(entity =>
        {
            entity.HasNoKey();

            entity.ToTable("MoneyMarket_Result");

            entity.Property(e => e.Customerid)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("CUSTOMERID");

            entity.Property(e => e.Dealdate)
                .HasColumnType("datetime")
                .HasColumnName("DEALDATE");

            entity.Property(e => e.EndDate).HasColumnType("datetime");

            entity.Property(e => e.IdMoneyMarketBerawData).HasColumnName("ID_MoneyMarketBERawData");

            entity.Property(e => e.IdMoneyMarketResult)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID_MoneyMarketResult");

            entity.Property(e => e.Interestrate)
                .HasColumnType("decimal(31, 2)")
                .HasColumnName("INTERESTRATE");

            entity.Property(e => e.Maturitydate)
                .HasColumnType("datetime")
                .HasColumnName("MATURITYDATE");

            entity.Property(e => e.Mmbenbank)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("MMBENBANK");

            entity.Property(e => e.Ourremarks)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("OURREMARKS");

            entity.Property(e => e.Principal)
                .HasColumnType("decimal(31, 2)")
                .HasColumnName("PRINCIPAL");

            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .IsUnicode(false);

            entity.Property(e => e.Totinterestamt)
                .HasColumnType("decimal(31, 2)")
                .HasColumnName("TOTINTERESTAMT");

            entity.Property(e => e.TransId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("TransID");

            entity.Property(e => e.Valuedate)
                .HasColumnType("datetime")
                .HasColumnName("VALUEDATE");

            entity.Property(e => e.WeightReturns).HasColumnType("decimal(18, 8)");

            entity.Property(e => e.WeightedAverage).HasColumnType("decimal(18, 8)");
        });

        modelBuilder.Entity<MoneyMarketTbillFairValue>(entity =>
        {
            entity.HasKey(e => e.IdTbillFairValue);

            entity.ToTable("MoneyMarketTBillFairValue");

            entity.Property(e => e.IdTbillFairValue).HasColumnName("ID_TBillFairValue");

            entity.Property(e => e.AmortisedCost).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.AnnualEir)
                .HasColumnType("decimal(25, 15)")
                .HasColumnName("AnnualEIR");

            entity.Property(e => e.AssetValue).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.DiscountFactor).HasColumnType("decimal(25, 15)");

            entity.Property(e => e.GainLoss).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.IdDealMaster).HasColumnName("ID_DealMaster");

            entity.Property(e => e.IdTreatmentType)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("ID_TreatmentType");

            entity.Property(e => e.Mtm2value)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("MTM2Value");

            entity.Property(e => e.MtmCost)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("MTM_Cost");

            entity.Property(e => e.Mtmvalue)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("MTMValue");

            entity.Property(e => e.ValuationDate).HasColumnType("datetime");

            entity.Property(e => e.VoucherNo)
                .HasMaxLength(10)
                .IsUnicode(false);

            entity.Property(e => e.YieldRate).HasColumnType("decimal(25, 15)");
        });

        modelBuilder.Entity<MoneyMaster>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("MoneyMaster");

            entity.Property(e => e.Amount).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.Being)
                .HasMaxLength(200)
                .IsUnicode(false);

            entity.Property(e => e.Beneficiary)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.Property(e => e.ChequeDate).HasColumnType("datetime");

            entity.Property(e => e.ChequeNo)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.ChqAmount).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.DateCollected).HasColumnType("datetime");

            entity.Property(e => e.ExRate).HasColumnType("decimal(18, 8)");

            entity.Property(e => e.ForexAmount).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.GlpostDate)
                .HasColumnType("datetime")
                .HasColumnName("GLPostDate");

            entity.Property(e => e.GlpostPeriod)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasColumnName("GLPostPeriod");

            entity.Property(e => e.IdApplication)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("ID_Application");

            entity.Property(e => e.IdBankAccount)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("ID_BankAccount");

            entity.Property(e => e.IdBankStatement).HasColumnName("ID_BankStatement");

            entity.Property(e => e.IdConfirmation).HasColumnName("ID_Confirmation");

            entity.Property(e => e.IdEftdetails).HasColumnName("ID_EFTDetails");

            entity.Property(e => e.IdGlentry).HasColumnName("ID_GLEntry");

            entity.Property(e => e.IdManyToMany).HasColumnName("ID_ManyToMany");

            entity.Property(e => e.IdMatchMaster).HasColumnName("ID_MatchMaster");

            entity.Property(e => e.IdMoneyMaster)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID_MoneyMaster");

            entity.Property(e => e.IdProductLine)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("ID_ProductLine");

            entity.Property(e => e.IdReceiptMaster).HasColumnName("ID_ReceiptMaster");

            entity.Property(e => e.IdRequisitionMaster).HasColumnName("ID_RequisitionMaster");

            entity.Property(e => e.MatchedBy)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.Notes).HasColumnType("text");

            entity.Property(e => e.PayeePayer)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.Property(e => e.ReceiptType)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.ReconComments).HasColumnType("text");

            entity.Property(e => e.RequestType)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.ReversalId).HasColumnName("ReversalID");

            entity.Property(e => e.SecurityNo)
                .HasMaxLength(10)
                .IsUnicode(false);

            entity.Property(e => e.Sign1Id).HasColumnName("Sign1ID");

            entity.Property(e => e.Sign2Id).HasColumnName("Sign2ID");

            entity.Property(e => e.SourceBankId)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("SourceBankID");

            entity.Property(e => e.SourceLocation)
                .HasMaxLength(10)
                .IsUnicode(false);

            entity.Property(e => e.StatementDate).HasColumnType("datetime");

            entity.Property(e => e.Status)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.StatusDate).HasColumnType("datetime");

            entity.Property(e => e.TransactionDate).HasColumnType("datetime");

            entity.Property(e => e.UnMatchedBy)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.Utid).HasColumnName("UTID");

            entity.Property(e => e.ValueDate).HasColumnType("datetime");

            entity.Property(e => e.VjNumber)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("VJ_Number");

            entity.Property(e => e.VoucherNo)
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Myportfolioaccount>(entity =>
        {
            entity.HasNoKey();

            entity.ToTable("myportfolioaccount");

            entity.Property(e => e.Amount).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.ChequeNo)
                .HasMaxLength(10)
                .IsUnicode(false);

            entity.Property(e => e.CurExRate).HasColumnType("decimal(18, 6)");

            entity.Property(e => e.GlPostPeriod)
                .HasMaxLength(6)
                .IsUnicode(false);

            entity.Property(e => e.GlpostDate)
                .HasColumnType("datetime")
                .HasColumnName("GLPostDate");

            entity.Property(e => e.IdBankAccount)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("ID_BankAccount");

            entity.Property(e => e.IdCashForeCastClass)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("ID_CashForeCastClass");

            entity.Property(e => e.IdCurrency)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("ID_Currency");

            entity.Property(e => e.IdInvestmentType)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("ID_InvestmentType");

            entity.Property(e => e.IdPortfolio).HasColumnName("ID_Portfolio");

            entity.Property(e => e.IdPortfolioAccount)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID_PortfolioAccount");

            entity.Property(e => e.IdPortfolioContributorAccount).HasColumnName("ID_PortfolioContributorAccount");

            ;

            entity.Property(e => e.Narration)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.Property(e => e.ReceiptNo)
                .HasMaxLength(10)
                .IsUnicode(false);

            entity.Property(e => e.ReceiptPaymentType)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.ReversalId).HasColumnName("ReversalID");

            entity.Property(e => e.SettlementDate).HasColumnType("datetime");

            entity.Property(e => e.SorceLocation)
                .HasMaxLength(10)
                .IsUnicode(false);

            entity.Property(e => e.SourceBankId)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("SourceBankID");

            entity.Property(e => e.TrackCode)
                .HasMaxLength(10)
                .IsUnicode(false);

            entity.Property(e => e.TransactionDate).HasColumnType("datetime");

            entity.Property(e => e.TransactionType)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.ValueDate).HasColumnType("datetime");

            entity.Property(e => e.VoucherNo)
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<NetBondValueAiico>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("Net_BondValue_Aiico");

            entity.Property(e => e.Amount).HasColumnType("decimal(19, 2)");

            entity.Property(e => e.AssetValue).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.BeginDate).HasColumnType("datetime");

            entity.Property(e => e.CleanAmount).HasColumnType("decimal(38, 6)");

            entity.Property(e => e.FaceValue).HasColumnType("decimal(19, 2)");

            entity.Property(e => e.FixedInterestRate).HasColumnType("decimal(18, 8)");

            entity.Property(e => e.IdPortfolio).HasColumnName("Id_portfolio");

            entity.Property(e => e.Interest2Date).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.MaturityDate).HasColumnType("datetime");

            entity.Property(e => e.NorminalCost).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.PrnCostSold)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("PrnCost_Sold");

            entity.Property(e => e.Symbol)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.Title)
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.ValuationDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<NetBondValueAiicoNew>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("Net_BondValue_Aiico_New");

            entity.Property(e => e.AssetValue).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.Consideration).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.CostPrice).HasColumnType("decimal(38, 2)");

            entity.Property(e => e.FaceValue).HasColumnType("decimal(19, 2)");

            entity.Property(e => e.IdPortfolio).HasColumnName("ID_Portfolio");

            entity.Property(e => e.Interest2Date).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.InvestType)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.IssueRate).HasColumnType("decimal(28, 20)");

            entity.Property(e => e.LoanTypeId).HasColumnName("LoanTypeID");

            entity.Property(e => e.NorminalCost).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.PrnCostSold)
                .HasColumnType("decimal(38, 2)")
                .HasColumnName("PrnCost_Sold");

            entity.Property(e => e.Qtyunit).HasColumnType("decimal(28, 4)");

            entity.Property(e => e.Symbol)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.TotalCost).HasColumnType("decimal(38, 2)");

            entity.Property(e => e.ValuationDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<Nlmastm>(entity =>
        {
            entity.HasNoKey();

            entity.ToTable("nlmastm");

            entity.Property(e => e.AlphaCode)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("alpha_code")
                .IsFixedLength();

            entity.Property(e => e.Analysis1)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("analysis1")
                .IsFixedLength();

            entity.Property(e => e.Analysis2)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("analysis2")
                .IsFixedLength();

            entity.Property(e => e.Analysis3)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("analysis3")
                .IsFixedLength();

            entity.Property(e => e.ArchivePeriod).HasColumnName("archive_period");

            entity.Property(e => e.Comments)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("comments")
                .IsFixedLength();

            entity.Property(e => e.CreditDebitInd)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("credit_debit_ind")
                .IsFixedLength();

            entity.Property(e => e.CurrencyCode)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("currency_code")
                .IsFixedLength();

            entity.Property(e => e.CurrentBalRep).HasColumnName("current_bal_rep");

            entity.Property(e => e.CurrentBalance).HasColumnName("current_balance");

            entity.Property(e => e.Description)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("description")
                .IsFixedLength();

            entity.Property(e => e.DirectPosting)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("direct_posting")
                .IsFixedLength();

            entity.Property(e => e.Element1)
                .HasMaxLength(16)
                .IsUnicode(false)
                .HasColumnName("element1")
                .IsFixedLength();

            entity.Property(e => e.Element2)
                .HasMaxLength(14)
                .IsUnicode(false)
                .HasColumnName("element2")
                .IsFixedLength();

            entity.Property(e => e.Element3)
                .HasMaxLength(12)
                .IsUnicode(false)
                .HasColumnName("element3")
                .IsFixedLength();

            entity.Property(e => e.Element4)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("element4")
                .IsFixedLength();

            entity.Property(e => e.Element5)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasColumnName("element5")
                .IsFixedLength();

            entity.Property(e => e.FutrYearMoveme01).HasColumnName("futr_year_moveme01");

            entity.Property(e => e.FutrYearMoveme02).HasColumnName("futr_year_moveme02");

            entity.Property(e => e.FutrYearMoveme03).HasColumnName("futr_year_moveme03");

            entity.Property(e => e.FutrYearMoveme04).HasColumnName("futr_year_moveme04");

            entity.Property(e => e.FutrYearMoveme05).HasColumnName("futr_year_moveme05");

            entity.Property(e => e.FutrYearMoveme06).HasColumnName("futr_year_moveme06");

            entity.Property(e => e.FutrYearMoveme07).HasColumnName("futr_year_moveme07");

            entity.Property(e => e.FutrYearMoveme08).HasColumnName("futr_year_moveme08");

            entity.Property(e => e.FutrYearMoveme09).HasColumnName("futr_year_moveme09");

            entity.Property(e => e.FutrYearMoveme10).HasColumnName("futr_year_moveme10");

            entity.Property(e => e.FutrYearMoveme11).HasColumnName("futr_year_moveme11");

            entity.Property(e => e.FutrYearMoveme12).HasColumnName("futr_year_moveme12");

            entity.Property(e => e.FutrYearMoveme13).HasColumnName("futr_year_moveme13");

            entity.Property(e => e.FutrYearMoveme14).HasColumnName("futr_year_moveme14");

            entity.Property(e => e.FutrYearMoveme15).HasColumnName("futr_year_moveme15");

            entity.Property(e => e.FutrYearMoveme16).HasColumnName("futr_year_moveme16");

            entity.Property(e => e.FutrYearMoveme17).HasColumnName("futr_year_moveme17");

            entity.Property(e => e.FutrYearMoveme18).HasColumnName("futr_year_moveme18");

            entity.Property(e => e.FutrYearRep01).HasColumnName("futr_year_rep01");

            entity.Property(e => e.FutrYearRep02).HasColumnName("futr_year_rep02");

            entity.Property(e => e.FutrYearRep03).HasColumnName("futr_year_rep03");

            entity.Property(e => e.FutrYearRep04).HasColumnName("futr_year_rep04");

            entity.Property(e => e.FutrYearRep05).HasColumnName("futr_year_rep05");

            entity.Property(e => e.FutrYearRep06).HasColumnName("futr_year_rep06");

            entity.Property(e => e.FutrYearRep07).HasColumnName("futr_year_rep07");

            entity.Property(e => e.FutrYearRep08).HasColumnName("futr_year_rep08");

            entity.Property(e => e.FutrYearRep09).HasColumnName("futr_year_rep09");

            entity.Property(e => e.FutrYearRep10).HasColumnName("futr_year_rep10");

            entity.Property(e => e.FutrYearRep11).HasColumnName("futr_year_rep11");

            entity.Property(e => e.FutrYearRep12).HasColumnName("futr_year_rep12");

            entity.Property(e => e.FutrYearRep13).HasColumnName("futr_year_rep13");

            entity.Property(e => e.FutrYearRep14).HasColumnName("futr_year_rep14");

            entity.Property(e => e.FutrYearRep15).HasColumnName("futr_year_rep15");

            entity.Property(e => e.FutrYearRep16).HasColumnName("futr_year_rep16");

            entity.Property(e => e.FutrYearRep17).HasColumnName("futr_year_rep17");

            entity.Property(e => e.FutrYearRep18).HasColumnName("futr_year_rep18");

            entity.Property(e => e.Kind)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("kind")
                .IsFixedLength();

            entity.Property(e => e.LineNumber)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("line_number")
                .IsFixedLength();

            entity.Property(e => e.Memo)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("memo")
                .IsFixedLength();

            entity.Property(e => e.NominalCode)
                .HasMaxLength(16)
                .IsUnicode(false)
                .HasColumnName("nominal_code")
                .IsFixedLength();

            entity.Property(e => e.OpenPerBal).HasColumnName("open_per_bal");

            entity.Property(e => e.OpenPerBalRep).HasColumnName("open_per_bal_rep");

            entity.Property(e => e.OpenYearBalRep).HasColumnName("open_year_bal_rep");

            entity.Property(e => e.OpeningYearBal).HasColumnName("opening_year_bal");

            entity.Property(e => e.PeriodActual01).HasColumnName("period_actual01");

            entity.Property(e => e.PeriodActual02).HasColumnName("period_actual02");

            entity.Property(e => e.PeriodActual03).HasColumnName("period_actual03");

            entity.Property(e => e.PeriodActual04).HasColumnName("period_actual04");

            entity.Property(e => e.PeriodActual05).HasColumnName("period_actual05");

            entity.Property(e => e.PeriodActual06).HasColumnName("period_actual06");

            entity.Property(e => e.PeriodActual07).HasColumnName("period_actual07");

            entity.Property(e => e.PeriodActual08).HasColumnName("period_actual08");

            entity.Property(e => e.PeriodActual09).HasColumnName("period_actual09");

            entity.Property(e => e.PeriodActual10).HasColumnName("period_actual10");

            entity.Property(e => e.PeriodActual11).HasColumnName("period_actual11");

            entity.Property(e => e.PeriodActual12).HasColumnName("period_actual12");

            entity.Property(e => e.PeriodActual13).HasColumnName("period_actual13");

            entity.Property(e => e.PeriodActual14).HasColumnName("period_actual14");

            entity.Property(e => e.PeriodActual15).HasColumnName("period_actual15");

            entity.Property(e => e.PeriodActual16).HasColumnName("period_actual16");

            entity.Property(e => e.PeriodActual17).HasColumnName("period_actual17");

            entity.Property(e => e.PeriodActual18).HasColumnName("period_actual18");

            entity.Property(e => e.PeriodActualRe01).HasColumnName("period_actual_re01");

            entity.Property(e => e.PeriodActualRe02).HasColumnName("period_actual_re02");

            entity.Property(e => e.PeriodActualRe03).HasColumnName("period_actual_re03");

            entity.Property(e => e.PeriodActualRe04).HasColumnName("period_actual_re04");

            entity.Property(e => e.PeriodActualRe05).HasColumnName("period_actual_re05");

            entity.Property(e => e.PeriodActualRe06).HasColumnName("period_actual_re06");

            entity.Property(e => e.PeriodActualRe07).HasColumnName("period_actual_re07");

            entity.Property(e => e.PeriodActualRe08).HasColumnName("period_actual_re08");

            entity.Property(e => e.PeriodActualRe09).HasColumnName("period_actual_re09");

            entity.Property(e => e.PeriodActualRe10).HasColumnName("period_actual_re10");

            entity.Property(e => e.PeriodActualRe11).HasColumnName("period_actual_re11");

            entity.Property(e => e.PeriodActualRe12).HasColumnName("period_actual_re12");

            entity.Property(e => e.PeriodActualRe13).HasColumnName("period_actual_re13");

            entity.Property(e => e.PeriodActualRe14).HasColumnName("period_actual_re14");

            entity.Property(e => e.PeriodActualRe15).HasColumnName("period_actual_re15");

            entity.Property(e => e.PeriodActualRe16).HasColumnName("period_actual_re16");

            entity.Property(e => e.PeriodActualRe17).HasColumnName("period_actual_re17");

            entity.Property(e => e.PeriodActualRe18).HasColumnName("period_actual_re18");

            entity.Property(e => e.PrevAdjRep).HasColumnName("prev_adj_rep");

            entity.Property(e => e.PrevYearAdj).HasColumnName("prev_year_adj");

            entity.Property(e => e.PrevYearMoveme01).HasColumnName("prev_year_moveme01");

            entity.Property(e => e.PrevYearMoveme02).HasColumnName("prev_year_moveme02");

            entity.Property(e => e.PrevYearMoveme03).HasColumnName("prev_year_moveme03");

            entity.Property(e => e.PrevYearMoveme04).HasColumnName("prev_year_moveme04");

            entity.Property(e => e.PrevYearMoveme05).HasColumnName("prev_year_moveme05");

            entity.Property(e => e.PrevYearMoveme06).HasColumnName("prev_year_moveme06");

            entity.Property(e => e.PrevYearMoveme07).HasColumnName("prev_year_moveme07");

            entity.Property(e => e.PrevYearMoveme08).HasColumnName("prev_year_moveme08");

            entity.Property(e => e.PrevYearMoveme09).HasColumnName("prev_year_moveme09");

            entity.Property(e => e.PrevYearMoveme10).HasColumnName("prev_year_moveme10");

            entity.Property(e => e.PrevYearMoveme11).HasColumnName("prev_year_moveme11");

            entity.Property(e => e.PrevYearMoveme12).HasColumnName("prev_year_moveme12");

            entity.Property(e => e.PrevYearMoveme13).HasColumnName("prev_year_moveme13");

            entity.Property(e => e.PrevYearMoveme14).HasColumnName("prev_year_moveme14");

            entity.Property(e => e.PrevYearMoveme15).HasColumnName("prev_year_moveme15");

            entity.Property(e => e.PrevYearMoveme16).HasColumnName("prev_year_moveme16");

            entity.Property(e => e.PrevYearMoveme17).HasColumnName("prev_year_moveme17");

            entity.Property(e => e.PrevYearMoveme18).HasColumnName("prev_year_moveme18");

            entity.Property(e => e.PrevYearOpenBal).HasColumnName("prev_year_open_bal");

            entity.Property(e => e.PrevYearOpenRep).HasColumnName("prev_year_open_rep");

            entity.Property(e => e.PrevYearRep01).HasColumnName("prev_year_rep01");

            entity.Property(e => e.PrevYearRep02).HasColumnName("prev_year_rep02");

            entity.Property(e => e.PrevYearRep03).HasColumnName("prev_year_rep03");

            entity.Property(e => e.PrevYearRep04).HasColumnName("prev_year_rep04");

            entity.Property(e => e.PrevYearRep05).HasColumnName("prev_year_rep05");

            entity.Property(e => e.PrevYearRep06).HasColumnName("prev_year_rep06");

            entity.Property(e => e.PrevYearRep07).HasColumnName("prev_year_rep07");

            entity.Property(e => e.PrevYearRep08).HasColumnName("prev_year_rep08");

            entity.Property(e => e.PrevYearRep09).HasColumnName("prev_year_rep09");

            entity.Property(e => e.PrevYearRep10).HasColumnName("prev_year_rep10");

            entity.Property(e => e.PrevYearRep11).HasColumnName("prev_year_rep11");

            entity.Property(e => e.PrevYearRep12).HasColumnName("prev_year_rep12");

            entity.Property(e => e.PrevYearRep13).HasColumnName("prev_year_rep13");

            entity.Property(e => e.PrevYearRep14).HasColumnName("prev_year_rep14");

            entity.Property(e => e.PrevYearRep15).HasColumnName("prev_year_rep15");

            entity.Property(e => e.PrevYearRep16).HasColumnName("prev_year_rep16");

            entity.Property(e => e.PrevYearRep17).HasColumnName("prev_year_rep17");

            entity.Property(e => e.PrevYearRep18).HasColumnName("prev_year_rep18");

            entity.Property(e => e.Revalue)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("revalue")
                .IsFixedLength();

            entity.Property(e => e.Spare)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("spare")
                .IsFixedLength();

            entity.Property(e => e.Status)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("status")
                .IsFixedLength();

            entity.Property(e => e.SummaryPosting)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("summary_posting")
                .IsFixedLength();
        });

        modelBuilder.Entity<Nltranm>(entity =>
        {
            entity.HasNoKey();

            entity.ToTable("nltranm");

            entity.Property(e => e.AccountCode)
                .HasMaxLength(16)
                .IsUnicode(false)
                .HasColumnName("account_code")
                .IsFixedLength();

            entity.Property(e => e.AnalysisCode1)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("analysis_code1")
                .IsFixedLength();

            entity.Property(e => e.AnalysisCode2)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("analysis_code2")
                .IsFixedLength();

            entity.Property(e => e.AnalysisCode3)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("analysis_code3")
                .IsFixedLength();

            entity.Property(e => e.BatchReference)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("batch_reference")
                .IsFixedLength();

            entity.Property(e => e.CurrencyAmount).HasColumnName("currency_amount");

            entity.Property(e => e.CurrencyCode)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("currency_code")
                .IsFixedLength();

            entity.Property(e => e.CurrencyType)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("currency_type")
                .IsFixedLength();

            entity.Property(e => e.Element1)
                .HasMaxLength(16)
                .IsUnicode(false)
                .HasColumnName("element1")
                .IsFixedLength();

            entity.Property(e => e.Element2)
                .HasMaxLength(14)
                .IsUnicode(false)
                .HasColumnName("element2")
                .IsFixedLength();

            entity.Property(e => e.Element3)
                .HasMaxLength(12)
                .IsUnicode(false)
                .HasColumnName("element3")
                .IsFixedLength();

            entity.Property(e => e.Element4)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("element4")
                .IsFixedLength();

            entity.Property(e => e.Element5)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasColumnName("element5")
                .IsFixedLength();

            entity.Property(e => e.ExchangeRate).HasColumnName("exchange_rate");

            entity.Property(e => e.FromPeriod)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("from_period")
                .IsFixedLength();

            entity.Property(e => e.HistoryRef)
                .HasMaxLength(13)
                .IsUnicode(false)
                .HasColumnName("history_ref")
                .IsFixedLength();

            entity.Property(e => e.JournalAmount).HasColumnName("journal_amount");

            entity.Property(e => e.JournalDate)
                .HasColumnType("datetime")
                .HasColumnName("journal_date");

            entity.Property(e => e.JournalDesc)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("journal_desc")
                .IsFixedLength();

            entity.Property(e => e.JournalNumber)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("journal_number")
                .IsFixedLength();

            entity.Property(e => e.Multidiv)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("multidiv")
                .IsFixedLength();

            entity.Property(e => e.NlContra)
                .HasMaxLength(16)
                .IsUnicode(false)
                .HasColumnName("nl_contra")
                .IsFixedLength();

            entity.Property(e => e.Nlyear)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("nlyear")
                .IsFixedLength();

            entity.Property(e => e.Origin)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("origin")
                .IsFixedLength();

            entity.Property(e => e.Period).HasColumnName("period");

            entity.Property(e => e.PostDate)
                .HasColumnType("datetime")
                .HasColumnName("post_date");

            entity.Property(e => e.PostingCode)
                .HasMaxLength(16)
                .IsUnicode(false)
                .HasColumnName("posting_code")
                .IsFixedLength();

            entity.Property(e => e.PreBaseAmt).HasColumnName("pre_base_amt");

            entity.Property(e => e.PreReptAmt).HasColumnName("pre_rept_amt");

            entity.Property(e => e.ReportAmount).HasColumnName("report_amount");

            entity.Property(e => e.RevalueStatus)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("revalue_status")
                .IsFixedLength();

            entity.Property(e => e.Seq)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("seq")
                .IsFixedLength();

            entity.Property(e => e.Source1)
                .HasMaxLength(24)
                .IsUnicode(false)
                .HasColumnName("source1")
                .IsFixedLength();

            entity.Property(e => e.Source2)
                .HasMaxLength(24)
                .IsUnicode(false)
                .HasColumnName("source2")
                .IsFixedLength();

            entity.Property(e => e.Spare)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("spare")
                .IsFixedLength();

            entity.Property(e => e.TransPeriod)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("trans_period")
                .IsFixedLength();

            entity.Property(e => e.TransactionDate)
                .HasColumnType("datetime")
                .HasColumnName("transaction_date");

            entity.Property(e => e.TransactionGroup)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("transaction_group")
                .IsFixedLength();

            entity.Property(e => e.UniqueNo).HasColumnName("unique_no");

            entity.Property(e => e.VatCode)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("vat_code")
                .IsFixedLength();
        });

        modelBuilder.Entity<Notification2Log>(entity =>
        {
            entity.HasKey(e => e.IdNotification2Log);

            entity.ToTable("Notification2Log");

            entity.Property(e => e.IdNotification2Log).HasColumnName("ID_Notification2Log");

            entity.Property(e => e.Comments).HasColumnType("text");

            entity.Property(e => e.EMailIsHtml).HasColumnName("eMailIsHtml");

            entity.Property(e => e.EMailMessage)
                .HasColumnType("text")
                .HasColumnName("eMailMessage");

            entity.Property(e => e.EMailStatus)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("eMailStatus")
                .IsFixedLength();

            entity.Property(e => e.IdPortfolio).HasColumnName("ID_Portfolio");

            entity.Property(e => e.IdPortfolioContributor).HasColumnName("ID_PortfolioContributor");

            entity.Property(e => e.IdPortfolioContributorAccount).HasColumnName("ID_PortfolioContributorAccount");

            entity.Property(e => e.LogType)
                .HasMaxLength(20)
                .IsUnicode(false);

            
                
                

            entity.Property(e => e.RequestDate).HasColumnType("datetime");

            entity.Property(e => e.ResponseDate).HasColumnType("datetime");

            entity.Property(e => e.SentDate).HasColumnType("datetime");

            entity.Property(e => e.SmsStatus)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("SMS_Status")
                .IsFixedLength();

            entity.Property(e => e.Smsmessage)
                .HasColumnType("text")
                .HasColumnName("SMSMessage");

            entity.Property(e => e.Status)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.Subject)
                .HasMaxLength(100)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Olddd>(entity =>
        {
            entity.HasNoKey();

            entity.ToTable("_OLDDD");

            entity.Property(e => e.AssetValue).HasColumnType("decimal(18, 0)");

            entity.Property(e => e.Commission).HasColumnType("decimal(18, 0)");

            entity.Property(e => e.CostOfAsset).HasColumnType("decimal(18, 0)");

            entity.Property(e => e.CurMrkPrice).HasColumnType("decimal(18, 0)");

            entity.Property(e => e.ExpectedBonus).HasColumnType("decimal(18, 0)");

            entity.Property(e => e.ExpectedDividend).HasColumnType("decimal(18, 0)");

            entity.Property(e => e.GainLoss).HasColumnType("decimal(18, 0)");

            entity.Property(e => e.Id2link).HasColumnName("ID2Link");

            entity.Property(e => e.IdCustomer).HasColumnName("ID_Customer");

            entity.Property(e => e.IdInv)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("ID_Inv");

            entity.Property(e => e.IdInvestmentType)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("ID_InvestmentType");

            entity.Property(e => e.IdPortfolio).HasColumnName("ID_Portfolio");

            entity.Property(e => e.IdValuation)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID_Valuation");

            entity.Property(e => e.Interest2Date).HasColumnType("decimal(18, 0)");

            entity.Property(e => e.InvestmentModule)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.NseCscsfees)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("NseCSCSFees");

            entity.Property(e => e.OtherFees).HasColumnType("decimal(18, 0)");

            entity.Property(e => e.Qty).HasColumnType("decimal(18, 0)");

            entity.Property(e => e.SecFees).HasColumnType("decimal(18, 0)");

            entity.Property(e => e.StampDuty).HasColumnType("decimal(18, 0)");

            entity.Property(e => e.TransactionCost).HasColumnType("decimal(18, 0)");

            entity.Property(e => e.ValuationDate).HasColumnType("datetime");

            entity.Property(e => e.Vat)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("VAT");

            entity.Property(e => e.VoucherNo)
                .HasMaxLength(10)
                .IsUnicode(false);

            entity.Property(e => e.WithholdingTax).HasColumnType("decimal(18, 0)");
        });

        modelBuilder.Entity<OnlinePortfolio>(entity =>
        {
            entity.HasKey(e => e.ID);

            entity.ToTable("OnlinePortfolio");

            entity.Property(e => e.ID)
                .ValueGeneratedNever()
                .HasColumnName("ID");

            entity.Property(e=>e.IdPortfolio)
            .HasColumnName("ID_Portfolio");

            entity.Property(e => e.AccountNumber).HasMaxLength(10);

            entity.Property(e => e.BankCode).HasMaxLength(7);

            entity.Property(e => e.Description).HasMaxLength(2000);

            entity.Property(e => e.FundType).HasMaxLength(100);

            entity.Property(e => e.IncomeDistribution).HasMaxLength(100);

            entity.Property(e => e.MinSubAmount).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.MinimumAdditionalInvestment).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.PayStackAccountCode).HasMaxLength(20);

            entity.Property(e => e.PortfolioImage).HasMaxLength(3000);

            entity.Property(e => e.ProductType)
                .HasMaxLength(6)
                .IsFixedLength();

            entity.Property(e => e.RedemptionPeriod).HasMaxLength(500);

            entity.Property(e => e.RiskLevel).HasMaxLength(100);

            entity.Property(e => e.Trustees).HasMaxLength(100);

            entity.Property(e => e.YeildDescription).HasMaxLength(500);
        });

        modelBuilder.Entity<Order>(entity =>
        {
            entity.ToTable("Order");

            entity.Property(e => e.AccountNo)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.AddressLine1).HasMaxLength(150);

            entity.Property(e => e.AddressLine2).HasMaxLength(50);

            entity.Property(e => e.BankAccountName)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.Property(e => e.Bvn)
                .HasMaxLength(11)
                .HasColumnName("BVN")
                .IsFixedLength();

            entity.Property(e => e.DateOfBirth).HasColumnType("datetime");

            entity.Property(e => e.Email).HasMaxLength(50);

            entity.Property(e => e.Gender)
                .HasMaxLength(3)
                .IsUnicode(false);

            entity.Property(e => e.IdBank)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("ID_Bank");

            entity.Property(e => e.IdIdentifyWith)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("ID_IdentifyWith");

            entity.Property(e => e.IdNumber)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("ID_Number");

            entity.Property(e => e.IdState)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("ID_State");

            entity.Property(e => e.IdcardExpiredDate)
                .HasColumnType("datetime")
                .HasColumnName("IDCardExpiredDate");

            entity.Property(e => e.IdcardIssuedDate)
                .HasColumnType("datetime")
                .HasColumnName("IDCardIssuedDate");

            entity.Property(e => e.NextOfKin)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.Property(e => e.OrderDate).HasColumnType("datetime");

            entity.Property(e => e.OrderReference).HasMaxLength(50);

            entity.Property(e => e.Othername).HasMaxLength(50);

            entity.Property(e => e.PaymentReference).HasMaxLength(50);

            entity.Property(e => e.PaymentStatus).HasDefaultValueSql("((0))");

            entity.Property(e => e.Phone).HasMaxLength(20);

            entity.Property(e => e.Surname).HasMaxLength(50);

            entity.Property(e => e.Title)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<OrderDetail>(entity =>
        {
            entity.ToTable("OrderDetail");

            entity.Property(e => e.OrderReference).HasMaxLength(20);

            entity.Property(e => e.UnitPrice).HasColumnType("decimal(18, 0)");
        });

        modelBuilder.Entity<PencomChartOfAccount>(entity =>
        {
            entity.HasKey(e => e.IdPencomChartOfAccount);

            entity.ToTable("Pencom_ChartOfAccount");

            entity.HasIndex(e => e.PencomAccountNo, "Key_Pencom_ChartOfAccount")
                .IsUnique();

            entity.Property(e => e.IdPencomChartOfAccount).HasColumnName("ID_PencomChartOfAccount");

            entity.Property(e => e.AccountName)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.Property(e => e.Formular)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.Property(e => e.Galaxy1AccountNo)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.Galaxy2AccountNo)
                .HasMaxLength(20)
                .IsUnicode(false);

            
                
                

            entity.Property(e => e.PencomAccountNo)
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<PencomChartOfAccount02>(entity =>
        {
            entity.HasKey(e => e.IdPencomChartOfAccount02);

            entity.ToTable("Pencom_ChartOfAccount_02");

            entity.HasIndex(e => e.PencomAccountNo, "Key_Pencom_ChartOfAccount_02")
                .IsUnique();

            entity.Property(e => e.IdPencomChartOfAccount02).HasColumnName("ID_PencomChartOfAccount_02");

            entity.Property(e => e.AccountName)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.Property(e => e.Formular)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.Property(e => e.Galaxy1AccountNo)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.Galaxy2AccountNo)
                .HasMaxLength(20)
                .IsUnicode(false);

            
                
                

            entity.Property(e => e.PencomAccountNo)
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<PencomChartOfAccount03>(entity =>
        {
            entity.HasKey(e => e.IdPencomChartOfAccount03);

            entity.ToTable("Pencom_ChartOfAccount_03");

            entity.HasIndex(e => e.PencomAccountNo, "Key_Pencom_ChartOfAccount_03")
                .IsUnique();

            entity.Property(e => e.IdPencomChartOfAccount03).HasColumnName("ID_PencomChartOfAccount_03");

            entity.Property(e => e.AccountName)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.Property(e => e.Formular)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.Property(e => e.Galaxy1AccountNo)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.Galaxy2AccountNo)
                .HasMaxLength(20)
                .IsUnicode(false);

            
                
                

            entity.Property(e => e.PencomAccountNo)
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<PencomInstitutionCode>(entity =>
        {
            entity.HasKey(e => e.InstitutionCode);

            entity.ToTable("Pencom_InstitutionCode");

            entity.Property(e => e.InstitutionCode)
                .HasMaxLength(10)
                .IsUnicode(false);

            entity.Property(e => e.InstitutionName)
                .HasMaxLength(100)
                .IsUnicode(false);

            
                
                
        });

        modelBuilder.Entity<PencomMfr104>(entity =>
        {
            entity.HasKey(e => e.IdPencomMfr104);

            entity.ToTable("Pencom_MFR104");

            entity.HasIndex(e => e.MfrCode, "Key_Pencom_MFR104")
                .IsUnique();

            entity.Property(e => e.IdPencomMfr104).HasColumnName("ID_PencomMFR104");

            entity.Property(e => e.Formular)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.Property(e => e.Galaxy1AccountNo)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.Galaxy2AccountNo)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.MfrCode)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("MFR_Code");

            entity.Property(e => e.MfrName)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("MFR_Name");

            
                
                
        });

        modelBuilder.Entity<PencomMfr105>(entity =>
        {
            entity.HasKey(e => e.IdPencomMfr105);

            entity.ToTable("Pencom_MFR105");

            entity.HasIndex(e => e.MfrCode, "Key_Pencom_MFR105")
                .IsUnique();

            entity.Property(e => e.IdPencomMfr105).HasColumnName("ID_PencomMFR105");

            entity.Property(e => e.Formular)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.Property(e => e.Galaxy1AccountNo)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.Galaxy2AccountNo)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.MfrCode)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("MFR_Code");

            entity.Property(e => e.MfrName)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("MFR_Name");

            
                
                
        });

        modelBuilder.Entity<PencomMfr135>(entity =>
        {
            entity.HasKey(e => e.IdPencomMfr135);

            entity.ToTable("Pencom_MFR135");

            entity.HasIndex(e => e.MfrCode, "Key_Pencom_MFR135")
                .IsUnique();

            entity.Property(e => e.IdPencomMfr135).HasColumnName("ID_PencomMFR135");

            entity.Property(e => e.Formular)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.Property(e => e.Galaxy1AccountNo)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.Galaxy2AccountNo)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.MfrCode)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("MFR_Code");

            entity.Property(e => e.MfrName)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("MFR_Name");

            
                
                
        });

        modelBuilder.Entity<PencomMfr141>(entity =>
        {
            entity.HasKey(e => e.IdPencomMfr141);

            entity.ToTable("Pencom_MFR141");

            entity.HasIndex(e => e.MfrCode, "Key_Pencom_MFR141")
                .IsUnique();

            entity.Property(e => e.IdPencomMfr141).HasColumnName("ID_PencomMFR141");

            entity.Property(e => e.Formular)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.Property(e => e.Galaxy1AccountNo)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.Galaxy2AccountNo)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.MfrCode)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("MFR_Code");

            entity.Property(e => e.MfrName)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("MFR_Name");

            
                
                
        });

        modelBuilder.Entity<PencomMfr201>(entity =>
        {
            entity.HasKey(e => e.IdPencomMfr201);

            entity.ToTable("Pencom_MFR201");

            entity.HasIndex(e => e.MfrCode, "Key_Pencom_MFR201")
                .IsUnique();

            entity.Property(e => e.IdPencomMfr201).HasColumnName("ID_PencomMFR201");

            entity.Property(e => e.Formular)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.Property(e => e.Galaxy1AccountNo)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.Galaxy2AccountNo)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.MfrCode)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("MFR_Code");

            entity.Property(e => e.MfrName)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("MFR_Name");

            
                
                
        });

        modelBuilder.Entity<PencomMfr202>(entity =>
        {
            entity.HasKey(e => e.IdPencomMfr202);

            entity.ToTable("Pencom_MFR202");

            entity.HasIndex(e => e.MfrCode, "Key_Pencom_MFR202")
                .IsUnique();

            entity.Property(e => e.IdPencomMfr202).HasColumnName("ID_PencomMFR202");

            entity.Property(e => e.Formular)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.Property(e => e.Galaxy1AccountNo)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.Galaxy2AccountNo)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.MfrCode)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("MFR_Code");

            entity.Property(e => e.MfrName)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("MFR_Name");

            
                
                
        });

        modelBuilder.Entity<PencomMfr205>(entity =>
        {
            entity.HasKey(e => e.IdPencomMfr205);

            entity.ToTable("Pencom_MFR205");

            entity.HasIndex(e => e.MfrCode, "Key_Pencom_MFR205")
                .IsUnique();

            entity.Property(e => e.IdPencomMfr205).HasColumnName("ID_PencomMFR205");

            entity.Property(e => e.Formular)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.Property(e => e.Galaxy1AccountNo)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.Galaxy2AccountNo)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.MfrCode)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("MFR_Code");

            entity.Property(e => e.MfrName)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("MFR_Name");

            
                
                
        });

        modelBuilder.Entity<PencomMfr206>(entity =>
        {
            entity.HasKey(e => e.IdPencomMfr206);

            entity.ToTable("Pencom_MFR206");

            entity.HasIndex(e => e.MfrCode, "Key_Pencom_MFR206")
                .IsUnique();

            entity.Property(e => e.IdPencomMfr206).HasColumnName("ID_PencomMFR206");

            entity.Property(e => e.Formular)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.Property(e => e.Galaxy1AccountNo)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.Galaxy2AccountNo)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.MfrCode)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("MFR_Code");

            entity.Property(e => e.MfrName)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("MFR_Name");

            
                
                
        });

        modelBuilder.Entity<PencomQar100>(entity =>
        {
            entity.HasKey(e => e.IdPencomQar100);

            entity.ToTable("Pencom_QAR100");

            entity.HasIndex(e => e.PencomAccountNo, "Key_Pencom_QAR100_PencomAccountNo")
                .IsUnique();

            entity.Property(e => e.IdPencomQar100).HasColumnName("ID_PencomQAR100");

            entity.Property(e => e.AccountName)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.Property(e => e.Formular)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.Property(e => e.Galaxy1AccountNo)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.Galaxy2AccountNo)
                .HasMaxLength(20)
                .IsUnicode(false);

            
                
                

            entity.Property(e => e.PencomAccountNo)
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<PencomQar200>(entity =>
        {
            entity.HasKey(e => e.IdPencomQar200);

            entity.ToTable("Pencom_QAR200");

            entity.HasIndex(e => e.PencomAccountNo, "Key_Pencom_QAR200_PencomAccountNo")
                .IsUnique();

            entity.Property(e => e.IdPencomQar200).HasColumnName("ID_PencomQAR200");

            entity.Property(e => e.AccountName)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.Property(e => e.Formular)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.Property(e => e.Galaxy1AccountNo)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.Galaxy2AccountNo)
                .HasMaxLength(20)
                .IsUnicode(false);

            
                
                

            entity.Property(e => e.PencomAccountNo)
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<PencomQcfr100>(entity =>
        {
            entity.HasKey(e => e.IdPencomQcfr100);

            entity.ToTable("Pencom_QCFR100");

            entity.Property(e => e.IdPencomQcfr100).HasColumnName("ID_PencomQCFR100");

            entity.Property(e => e.AccountName)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.Property(e => e.Formular)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.Property(e => e.Galaxy1AccountNo)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.Galaxy2AccountNo)
                .HasMaxLength(20)
                .IsUnicode(false);

            
                
                

            entity.Property(e => e.PencomAccountNo)
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<PencomQcfr200>(entity =>
        {
            entity.HasKey(e => e.IdPencomQcfr200);

            entity.ToTable("Pencom_QCFR200");

            entity.Property(e => e.IdPencomQcfr200).HasColumnName("ID_PencomQCFR200");

            entity.Property(e => e.AccountName)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.Property(e => e.Formular)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.Property(e => e.Galaxy1AccountNo)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.Galaxy2AccountNo)
                .HasMaxLength(20)
                .IsUnicode(false);

            
                
                

            entity.Property(e => e.PencomAccountNo)
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<PencomQcr100>(entity =>
        {
            entity.HasKey(e => e.IdPencomQcr100);

            entity.ToTable("Pencom_QCR100");

            entity.Property(e => e.IdPencomQcr100).HasColumnName("ID_PencomQCR100");

            entity.Property(e => e.AccountName)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.Property(e => e.Formular)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.Property(e => e.Galaxy1AccountNo)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.Galaxy2AccountNo)
                .HasMaxLength(20)
                .IsUnicode(false);

            
                
                

            entity.Property(e => e.PencomAccountNo)
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<PencomQcr200>(entity =>
        {
            entity.HasKey(e => e.IdPencomQcr200);

            entity.ToTable("Pencom_QCR200");

            entity.Property(e => e.IdPencomQcr200).HasColumnName("ID_PencomQCR200");

            entity.Property(e => e.AccountName)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.Property(e => e.Formular)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.Property(e => e.Galaxy1AccountNo)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.Galaxy2AccountNo)
                .HasMaxLength(20)
                .IsUnicode(false);

            
                
                

            entity.Property(e => e.PencomAccountNo)
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<PencomState>(entity =>
        {
            entity.HasKey(e => e.CodeNo);

            entity.ToTable("PENCOM_STATE");

            entity.Property(e => e.CodeNo)
                .HasMaxLength(10)
                .HasColumnName("CODE_NO");

            
                
                

            entity.Property(e => e.State)
                .HasMaxLength(20)
                .HasColumnName("STATE");
        });

        modelBuilder.Entity<Pfamfr144>(entity =>
        {
            entity.HasKey(e => e.IdPfamfr144);

            entity.ToTable("PFAMFR144");

            entity.Property(e => e.IdPfamfr144).HasColumnName("ID_PFAMFR144");

            entity.Property(e => e.ActiveMembers).HasColumnName("active-members");

            entity.Property(e => e.Code)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("code");

            entity.Property(e => e.DefferredPensioners).HasColumnName("defferred-pensioners");

            entity.Property(e => e.ItemCode).HasColumnName("item-code");

            entity.Property(e => e.ItemDesc)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("item-desc");

            entity.Property(e => e.Pensioners).HasColumnName("pensioners");

            entity.Property(e => e.SerialNo).HasColumnName("serial-no");

            entity.Property(e => e.Total).HasColumnName("total");

            entity.Property(e => e.TransactionDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<Portfolio>(entity =>
        {
            entity.HasKey(e => e.IdPortfolio);

            entity.ToTable("Portfolio");

            entity.HasIndex(e => e.Portfolio1, "FK_Portfolio_Name");

            entity.HasIndex(e => e.Cscsid, "Key_Portfolio_CSCS");

            entity.HasIndex(e => e.IdPortfolioContributor, "Key_Portfolio_PortfolioContributor");

            entity.HasIndex(e => e.SfkaccountCode, "Key_Portfolio_SFKAccountCode")
                .IsUnique();

            entity.Property(e => e.IdPortfolio).HasColumnName("ID_Portfolio");

            entity.Property(e => e.AccountClass)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.AccountClosureDate).HasColumnType("datetime");

            entity.Property(e => e.AccountOpenDate).HasColumnType("datetime");

            entity.Property(e => e.Address01)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.Address02)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.ApplyVat).HasColumnName("ApplyVAT");

            entity.Property(e => e.ApprovedBy)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.BidPrice).HasColumnType("decimal(18, 8)");

            entity.Property(e => e.BrokerageFee).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.BuyComisionRate)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("Buy_ComisionRate");

            entity.Property(e => e.CapturedBy)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.ChargeFeesOnGrossNav).HasColumnName("ChargeFeesOnGrossNAV");

            entity.Property(e => e.Comments).HasColumnType("text");

            entity.Property(e => e.ContactPerson)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.ContractDate).HasColumnType("datetime");

            entity.Property(e => e.CrIntRate).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.Cscsid)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CSCSID");

            entity.Property(e => e.DateOfBirth).HasColumnType("datetime");

            entity.Property(e => e.DeliverReportByEMail).HasColumnName("DeliverReportBy_eMail");

            entity.Property(e => e.DeliverReportByHold).HasColumnName("DeliverReportBy_Hold");

            entity.Property(e => e.DeliverReportByPost).HasColumnName("DeliverReportBy_Post");

            entity.Property(e => e.DrIntRate).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.EarlyTerminationPenalty)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.Email)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.EmploymentStatus)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.EquityValuationMedhod)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.ExpireDate).HasColumnType("datetime");

            entity.Property(e => e.FeesIncomeReserve)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.FirstMinPurchase).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.FirstName)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.Property(e => e.FixedIncomeValuationMethod)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.FundWebsite)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.Property(e => e.GsmNo)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.GuaranteeYield).HasColumnType("decimal(18, 4)");

            entity.Property(e => e.IdCurrency)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("ID_Currency");

            entity.Property(e => e.IdEmployer).HasColumnName("ID_Employer");

            entity.Property(e => e.IdIdentifyWith)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("ID_IdentifyWith");

            entity.Property(e => e.IdIncentiveBenchmark).HasColumnName("ID_IncentiveBenchmark");

            entity.Property(e => e.IdInvestmentType)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("ID_InvestmentType");

            entity.Property(e => e.IdOccupation).HasColumnName("ID_Occupation");

            entity.Property(e => e.IdPortfolioContributor).HasColumnName("ID_PortfolioContributor");

            entity.Property(e => e.IdPortfolioCustodian).HasColumnName("ID_PortfolioCustodian");

            entity.Property(e => e.IdPortfolioGroup).HasColumnName("ID_PortfolioGroup");

            entity.Property(e => e.IdReferedByBranch)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ID_ReferedByBranch");

            entity.Property(e => e.IdRelationshipManager)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("ID_RelationshipManager");

            entity.Property(e => e.IdState)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("ID_State");

            entity.Property(e => e.IdStateOfOrigin)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("ID_StateOfOrigin");

            entity.Property(e => e.Idnumber)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("IDNumber");

            entity.Property(e => e.IncentiveBasedOn)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.IncentiveCalcMethod)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.IncentiveIncomeActNo)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.IncentiveRate).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.IncomeFeesAccountNo)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.IncomeFeesRate).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.InitialInvestmentAmount).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.InitialUnitValue).HasColumnType("decimal(18, 8)");

            entity.Property(e => e.InterestExpenseActNo)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.InterestIncomeActNo)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.InvestorActNo)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.LastCompoundDate).HasColumnType("datetime");

            entity.Property(e => e.LastDividendPayDate).HasColumnType("datetime");

            entity.Property(e => e.LastIncentiveDueDate).HasColumnType("datetime");

            entity.Property(e => e.LastMgtFeeDeductDate).HasColumnType("datetime");

            entity.Property(e => e.LastRenuwalDate).HasColumnType("datetime");

            entity.Property(e => e.LockInPenaltyRate).HasColumnType("decimal(18, 4)");

            entity.Property(e => e.MainAccount)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.ManagementFees).HasColumnType("decimal(18, 8)");

            entity.Property(e => e.ManagementFeesIncomeAccount)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.MaritalStatus)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.MgtFeesBasedOn)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.MgtFeesPer)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.MinCashBalance).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.MinCrBalance).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.MothersMaidenName)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.Property(e => e.MultiplePurchase).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.Navchange)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("NAVChange");

            entity.Property(e => e.NetAssetValue).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.NextIncentiveDueDate).HasColumnType("datetime");

            entity.Property(e => e.NextMgtFeeDeductDate).HasColumnType("datetime");

            entity.Property(e => e.OfferPrice).HasColumnType("decimal(18, 8)");

            entity.Property(e => e.OriginalNav)
                .HasColumnType("decimal(20, 2)")
                .HasColumnName("OriginalNAV");

            entity.Property(e => e.PayStackAccountCode)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.PcmmgtFees)
                .HasColumnType("decimal(18, 8)")
                .HasColumnName("PCMMgtFees");

            entity.Property(e => e.PenaltyMgtFeesRate).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.PfamgtFees)
                .HasColumnType("decimal(18, 8)")
                .HasColumnName("PFAMgtFees");

            entity.Property(e => e.PfcmgtFees)
                .HasColumnType("decimal(18, 8)")
                .HasColumnName("PFCMgtFees");

            entity.Property(e => e.PinNo)
                .HasMaxLength(10)
                .IsUnicode(false);

            entity.Property(e => e.Portfolio1)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Portfolio");

            entity.Property(e => e.Pword)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("PWord");

            entity.Property(e => e.RcNumber)
                .HasMaxLength(30)
                .IsUnicode(false);

            entity.Property(e => e.RealEstateValuationMethod)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.ReferedByOfficer)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.RegistrarId).HasColumnName("RegistrarID");

            entity.Property(e => e.ReportDeliveryMethod)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.RequlatorFeesIsVatable).HasColumnName("RequlatorFeesIsVATable");

            entity.Property(e => e.RiskFactor).HasColumnType("decimal(18, 4)");

            entity.Property(e => e.SearchComments)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.SellComisionRate)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("Sell_ComisionRate");

            entity.Property(e => e.SensitivityLevel)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.Sex)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.SfkaccountCode)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SFKAccountCode");

            entity.Property(e => e.ShortName)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.StableVav).HasColumnName("StableVAV");

            entity.Property(e => e.Status)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.SurName)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.Property(e => e.TbillMarkToMarket).HasColumnName("TBillMarkToMarket");

            entity.Property(e => e.Telephones)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.TimeFactor).HasColumnType("decimal(18, 4)");

            entity.Property(e => e.TotalUnits).HasColumnType("decimal(31, 4)");

            entity.Property(e => e.UnitPriceChage).HasColumnType("decimal(18, 4)");

            entity.Property(e => e.Usid).HasColumnName("USID");

            entity.Property(e => e.ValuationDate).HasColumnType("datetime");

            entity.Property(e => e.WaiverNotes)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.XMasGift).HasColumnName("xMasGift");
        });

        modelBuilder.Entity<PortfolioAccount>(entity =>
        {
            entity.HasKey(e => e.IdPortfolioAccount);

            entity.ToTable("PortfolioAccount");

            entity.HasIndex(e => new { e.IdPortfolio, e.ValueDate }, "IX_PortfolioAccount_ID_Portfolio_ValueDate_ID_InvestmentType_TransactionDate_Amount_Narration_ID_Currency_CurExRate_VoucherNo_Tr");

            entity.HasIndex(e => e.IdCashForeCastClass, "Key_PortfolioAccount_CashForeCastClass");

            entity.HasIndex(e => e.IdPortfolioContributorAccount, "Key_PortfolioAccount_ID_PortfolioContributorAccount");

            entity.HasIndex(e => new { e.IdPortfolio, e.ValueDate }, "Key_PortfolioAccount_ValueDate");

            entity.HasIndex(e => e.VoucherNo, "Key_PortfolioAccount_VoucherNo");

            entity.Property(e => e.IdPortfolioAccount).HasColumnName("ID_PortfolioAccount");

            entity.Property(e => e.Amount).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.CapturedBy)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.ChequeNo)
                .HasMaxLength(10)
                .IsUnicode(false);

            entity.Property(e => e.CurExRate).HasColumnType("decimal(18, 6)");

            entity.Property(e => e.GlPostPeriod)
                .HasMaxLength(6)
                .IsUnicode(false);

            entity.Property(e => e.GlpostDate)
                .HasColumnType("datetime")
                .HasColumnName("GLPostDate");

            entity.Property(e => e.GrossAmountReceived).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.IdBankAccount)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("ID_BankAccount");

            entity.Property(e => e.IdCashForeCastClass)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("ID_CashForeCastClass");

            entity.Property(e => e.IdCurrency)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("ID_Currency");

            entity.Property(e => e.IdInvestmentType)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("ID_InvestmentType");

            entity.Property(e => e.IdPortfolio).HasColumnName("ID_Portfolio");

            entity.Property(e => e.IdPortfolioContributorAccount).HasColumnName("ID_PortfolioContributorAccount");

            entity.Property(e => e.ImportedUnit)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("importedUnit");

            entity.Property(e => e.ImportedUnitPrice)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("importedUnitPrice");

            
                
                

            entity.Property(e => e.Narration)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.Property(e => e.ReceiptNo)
                .HasMaxLength(10)
                .IsUnicode(false);

            entity.Property(e => e.ReceiptPaymentType)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.ReversalId).HasColumnName("ReversalID");

            entity.Property(e => e.SettlementDate).HasColumnType("datetime");

            entity.Property(e => e.SorceLocation)
                .HasMaxLength(10)
                .IsUnicode(false);

            entity.Property(e => e.SourceBankId)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("SourceBankID");

            entity.Property(e => e.StanpDutyAmount).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.TrackCode)
                .HasMaxLength(10)
                .IsUnicode(false);

            entity.Property(e => e.TransactionDate).HasColumnType("datetime");

            entity.Property(e => e.TransactionType)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.ValueDate).HasColumnType("datetime");

            entity.Property(e => e.VoucherNo)
                .HasMaxLength(10)
                .IsUnicode(false);

            entity.HasOne(d => d.IdInvestmentTypeNavigation)
                .WithMany(p => p.PortfolioAccounts)
                .HasForeignKey(d => d.IdInvestmentType)
                .HasConstraintName("FK_PortfolioAccount_InvestmentType");

            entity.HasOne(d => d.IdPortfolioNavigation)
                .WithMany(p => p.PortfolioAccounts)
                .HasForeignKey(d => d.IdPortfolio)
                .HasConstraintName("FK_PortfolioAccount_Portfolio");
        });

        modelBuilder.Entity<PortfolioBenchmarkComputation>(entity =>
        {
            entity.HasKey(e => e.IdPortfolioBenchmarkComputation);

            entity.ToTable("PortfolioBenchmarkComputation");

            entity.Property(e => e.IdPortfolioBenchmarkComputation).HasColumnName("ID_PortfolioBenchmarkComputation");

            entity.Property(e => e.BeginDate).HasColumnType("datetime");

            entity.Property(e => e.EndDate).HasColumnType("datetime");

            entity.Property(e => e.EoqDate).HasColumnType("datetime");

            entity.Property(e => e.IdPortfolio).HasColumnName("ID_Portfolio");

            entity.Property(e => e.LoanTypeId).HasColumnName("LoanTypeID");

            
                
                

            entity.Property(e => e.Rate).HasColumnType("decimal(18, 8)");

            entity.Property(e => e.Wac)
                .HasColumnType("decimal(18, 8)")
                .HasColumnName("WAC");
        });

        modelBuilder.Entity<PortfolioCashForeCastClass>(entity =>
        {
            entity.HasKey(e => e.IdCashForeCastClass);

            entity.ToTable("PortfolioCashForeCastClass");

            entity.HasIndex(e => new { e.CashForeCastClass, e.CashFlowType }, "Key_PortfolioCashForeCastClass_CashForeCastClass")
                .IsUnique();

            entity.Property(e => e.IdCashForeCastClass)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("ID_CashForeCastClass");

            entity.Property(e => e.CashFlowType)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.CashForeCastClass)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.Property(e => e.InvetmentModule)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<PortfolioCashForecastDetail>(entity =>
        {
            entity.HasKey(e => e.IdPortfolioCashForecastDetail);

            entity.ToTable("PortfolioCashForecastDetail");

            entity.Property(e => e.IdPortfolioCashForecastDetail).HasColumnName("ID_PortfolioCashForecastDetail");

            entity.Property(e => e.Amount).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.AssetClass)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.CapturedBy)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.Id2link).HasColumnName("ID2Link");

            entity.Property(e => e.IdCashForeCastClass)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("ID_CashForeCastClass");

            entity.Property(e => e.IdPortfolio).HasColumnName("ID_Portfolio");

            entity.Property(e => e.IdPortfolioCashForecastMaster).HasColumnName("ID_PortfolioCashForecastMaster");

            
                
                

            entity.Property(e => e.Narration)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.ValueDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<PortfolioCashForecastMaster>(entity =>
        {
            entity.HasKey(e => e.IdPortfolioCashForecastMaster);

            entity.ToTable("PortfolioCashForecastMaster");

            entity.HasIndex(e => new { e.IdPortfolio, e.ForecastDate, e.IdCurrency }, "Key_PortfolioCashForecastMaster_Unique")
                .IsUnique();

            entity.Property(e => e.IdPortfolioCashForecastMaster).HasColumnName("ID_PortfolioCashForecastMaster");

            entity.Property(e => e.AmountInvested).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.ApprovedBy)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.Available4Investment).HasColumnType("decimal(24, 2)");

            entity.Property(e => e.Bond).HasColumnType("decimal(24, 2)");

            entity.Property(e => e.ClosingBalance).HasColumnType("decimal(24, 2)");

            entity.Property(e => e.Comments).HasColumnType("text");

            entity.Property(e => e.Equity).HasColumnType("decimal(24, 2)");

            entity.Property(e => e.ForecastDate).HasColumnType("datetime");

            entity.Property(e => e.FundsAvailable).HasColumnType("decimal(24, 2)");

            entity.Property(e => e.IdCurrency)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("ID_Currency");

            entity.Property(e => e.IdPortfolio).HasColumnName("ID_Portfolio");

            entity.Property(e => e.MinCashBalance).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.MoneyMarket).HasColumnType("decimal(24, 2)");

            
                
                

            entity.Property(e => e.OpeningBalance).HasColumnType("decimal(24, 2)");

            entity.Property(e => e.OtherReceipts).HasColumnType("decimal(24, 2)");

            entity.Property(e => e.PaymentRemarks)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.PaymentsPlanned).HasColumnType("decimal(24, 2)");

            entity.Property(e => e.PrepairedBy)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.ProposedInvestment)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.RealEstate).HasColumnType("decimal(24, 2)");

            entity.Property(e => e.ReceiptRemarks)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.Status)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.X4closingBalance)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("X4ClosingBalance");

            entity.Property(e => e.X4investment)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("X4Investment");

            entity.Property(e => e.X4openingBalance)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("X4OpeningBalance");

            entity.Property(e => e.X4payments)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("X4Payments");

            entity.Property(e => e.X4receipts)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("X4Receipts");
        });

        modelBuilder.Entity<PortfolioClosure>(entity =>
        {
            entity.HasKey(e => e.IdPortfolioClosure);

            entity.ToTable("PortfolioClosure");

            entity.HasIndex(e => e.IdPortfolio, "Key_PortfolioClosure_ID_Portfolio")
                .IsUnique();

            entity.Property(e => e.IdPortfolioClosure).HasColumnName("ID_PortfolioClosure");

            entity.Property(e => e.Amount2Deduct).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.CaptureDate).HasColumnType("datetime");

            entity.Property(e => e.ClosureDate).HasColumnType("datetime");

            entity.Property(e => e.Commets).HasColumnType("text");

            entity.Property(e => e.GlPostPeriod)
                .HasMaxLength(6)
                .IsUnicode(false);

            entity.Property(e => e.GlpostDate)
                .HasColumnType("datetime")
                .HasColumnName("GLPostDate");

            entity.Property(e => e.IdPortfolio).HasColumnName("ID_Portfolio");

            
                
                

            entity.Property(e => e.NetAssetValue).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.PenaltyAmount).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.Reason).HasColumnType("text");

            entity.Property(e => e.Status)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.VoucherNo)
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<PortfolioContributor>(entity =>
        {
            entity.HasKey(e => e.IdPortfolioContributor);

            entity.ToTable("PortfolioContributor");

            entity.HasIndex(e => e.AccountCode, "Key_PortfolioContributor_AccountCode")
                .IsUnique();

            entity.HasIndex(e => e.ExtReferenceId, "Key_PortfolioContributor_ExtRefID")
                .IsUnique();

            entity.HasIndex(e => e.FullName, "Key_PortfolioContributor_FullName");

            entity.HasIndex(e => e.Ucid, "Key_PortfolioContributor_UCID");

            entity.Property(e => e.IdPortfolioContributor).HasColumnName("ID_PortfolioContributor");

            entity.Property(e => e.AccountCode)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.AccountNo)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.Address01)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.Property(e => e.Address02)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.Property(e => e.AgentCode)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.AgentName)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.AlternateEmail)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.Property(e => e.AnnualIncome).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.AutoSubAmount).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.AutoSubscribBeginDate).HasColumnType("datetime");

            entity.Property(e => e.BankAccountName)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.Property(e => e.BankBranchName)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.BorrowCustomerRefCode)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.Property(e => e.BusAddress01)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.BusAddress02)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.BusTelephone)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.BusinessName)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.Property(e => e.Bvn)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("BVN");

            entity.Property(e => e.CapturedBy)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.ChildDateOfBirth).HasColumnType("datetime");

            entity.Property(e => e.ChildGender)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.ChildMiddleName)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.ChildOtherNames)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.ChildSurName)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.ChildTitle)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Child_Title");

            entity.Property(e => e.City)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.Comments).HasColumnType("text");

            entity.Property(e => e.ContactPerson)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.Property(e => e.Custom01)
                .HasMaxLength(150)
                .IsUnicode(false);

            entity.Property(e => e.Custom02)
                .HasMaxLength(150)
                .IsUnicode(false);

            entity.Property(e => e.Custom03)
                .HasMaxLength(150)
                .IsUnicode(false);

            entity.Property(e => e.Custom04).HasColumnType("decimal(20, 4)");

            entity.Property(e => e.Custom05).HasColumnType("datetime");

            entity.Property(e => e.DateClosed).HasColumnType("datetime");

            entity.Property(e => e.DateOfBirth).HasColumnType("datetime");

            entity.Property(e => e.DateOpened).HasColumnType("datetime");

            entity.Property(e => e.Email)
                .HasMaxLength(250)
                .IsUnicode(false);

            entity.Property(e => e.EmployeeNo)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.EmploymentDate).HasColumnType("datetime");

            entity.Property(e => e.EmploymentType)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.ExpiryDate).HasColumnType("datetime");

            entity.Property(e => e.ExtReferenceId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("Ext_Reference_ID");

            entity.Property(e => e.FirstName)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.FullName)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.Property(e => e.Gender)
                .HasMaxLength(1)
                .IsUnicode(false);

            entity.Property(e => e.HearedFrom)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Newspaper|Friend|Internet|TV|BillBoard");

            entity.Property(e => e.IdBank)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("ID_Bank");

            entity.Property(e => e.IdBusState)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("ID_BusState");

            entity.Property(e => e.IdChildRelationship).HasColumnName("ID_ChildRelationship");

            entity.Property(e => e.IdCountry)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("ID_Country");

            entity.Property(e => e.IdCurrency)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("ID_Currency");

            entity.Property(e => e.IdIdentifyWith)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("ID_IdentifyWith");

            entity.Property(e => e.IdImpPrtContributor).HasColumnName("ID_ImpPrtContributor");

            entity.Property(e => e.IdKinRelationship).HasColumnName("ID_KinRelationship");

            entity.Property(e => e.IdNationailty)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("ID_Nationailty");

            entity.Property(e => e.IdOccupation).HasColumnName("ID_Occupation");

            entity.Property(e => e.IdPortfolio).HasColumnName("ID_Portfolio");

            entity.Property(e => e.IdPortfolioContributorType).HasColumnName("ID_PortfolioContributorType");

            entity.Property(e => e.IdReferedByBranch)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("ID_ReferedByBranch");

            entity.Property(e => e.IdRiskLevel).HasColumnName("ID_RiskLevel");

            entity.Property(e => e.IdSourceBranch)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("ID_Source_Branch");

            entity.Property(e => e.IdSourceOfFund)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("ID_SourceOfFund");

            entity.Property(e => e.IdState)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("ID_State");

            entity.Property(e => e.InitalAmount).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.IssueDate).HasColumnType("datetime");

            entity.Property(e => e.JobTitle)
                .HasMaxLength(10)
                .IsUnicode(false);

            entity.Property(e => e.JointOtherNames)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.JointSurName)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.JointTitle)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Joint_Title");

            entity.Property(e => e.LastLoginDate).HasColumnType("datetime");

            entity.Property(e => e.LastName)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.MaritalStatus)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.MiddleName)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.MobileNo)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.MotherMaidenName)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.NameOfSignatory)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("Name_Of_Signatory");

            entity.Property(e => e.NameOfSpouse)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.Property(e => e.NatureOfBusiness)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.Property(e => e.NextOfKin)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.Property(e => e.NextOfKinAddress).HasColumnType("text");

            entity.Property(e => e.NextOfKinDateOfBirth).HasColumnType("datetime");

            entity.Property(e => e.NextOfKinEmail)
                .HasMaxLength(150)
                .IsUnicode(false);

            entity.Property(e => e.NextOfKinFirstName)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.NextOfKinGender)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.NextOfKinMiddleName)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.NextOfKinTitle)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.NextofKinTelephone)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.NoOfUnits).HasColumnType("decimal(31, 4)");

            entity.Property(e => e.Notification).HasMaxLength(100);

            entity.Property(e => e.OtherEmployerType)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.Property(e => e.OtherForIdentifyWith)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.Property(e => e.PassportNumber)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.Property(e => e.PaymentMethod)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.PinNo)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.PlaceOfIssue)
                .HasMaxLength(3)
                .IsUnicode(false);

            entity.Property(e => e.Rcnumber)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("RCNumber");

            entity.Property(e => e.RcregisterDate)
                .HasColumnType("datetime")
                .HasColumnName("RCRegisterDate");

            entity.Property(e => e.SensitivityLevel)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.SortCode).HasMaxLength(10);

            entity.Property(e => e.SponsorDateOfBirth)
                .HasColumnType("datetime")
                .HasColumnName("Sponsor_DateOfBirth");

            entity.Property(e => e.SponsorOtherName)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("Sponsor_OtherName");

            entity.Property(e => e.SponsorSurname)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("Sponsor_Surname");

            entity.Property(e => e.SponsorTitle)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Sponsor_Title");

            entity.Property(e => e.Status)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.SubscriptionCode)
                .HasMaxLength(10)
                .IsUnicode(false);

            entity.Property(e => e.SubscriptionMethod)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.TaxIdentificationNo)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.Property(e => e.Telephone)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.Property(e => e.Title)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.Ucid).HasColumnName("UCID");

            entity.Property(e => e.WebPassword)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.WebSite)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.HasOne(d => d.IdPortfolioContributorTypeNavigation)
                .WithMany(p => p.PortfolioContributors)
                .HasForeignKey(d => d.IdPortfolioContributorType)
                .HasConstraintName("FK_PortfolioContributor_PortfolioContributorType");
        });
        modelBuilder.Entity<PortfolioContributorAccount>(entity =>
        {
            entity.HasKey(e => e.IdPortfolioContributorAccount);

            entity.ToTable("PortfolioContributorAccount");
            entity.ToTable(tb => tb.HasTrigger("Validate_Portfolio_ID"));



            entity.HasIndex(e => new { e.IdPortfolioContributor, e.IdPortfolio }, "Key_PortfolioContributorAccount_ContributorPortfolio");

            entity.HasIndex(e => e.IdImpPrtContributoAccount, "Key_PortfolioContributorAccount_ID_ImpPrtContributoAccount");

            entity.HasIndex(e => e.IdPortfolio, "Key_PortfolioContributorAccount_ID_Portfolio");

            entity.HasIndex(e => e.IdPortfolioContributorBulkAccount, "Key_PortfolioContributorAccount_PortfolioContributorBulkAccount");

            entity.HasIndex(e => e.TransRefNo, "Key_PortfolioContributorAccount_TransRefNo");

            entity.HasIndex(e => new { e.TransactionType, e.Reversed, e.ReversalId, e.Status, e.IdPortfolio, e.ValueDate }, "Key_ProfitSharing_Speedup_01");

            entity.HasIndex(e => new { e.TransactionType, e.Reversed, e.ReversalId, e.Status, e.IdPortfolio, e.ValueDate }, "Key_ProfitSharing_Speedup_02");

            entity.Property(e => e.IdPortfolioContributorAccount).HasColumnName("ID_PortfolioContributorAccount");

            entity.Property(e => e.AccountNo)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.AddPenalty2IncomeDate).HasColumnType("datetime");

            entity.Property(e => e.AdditionalContribution).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.AdditionalContributionUnit).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.Amount).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.BankBranchName)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.CapturedBy)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.CertficateStatus)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.CertificateNo)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.CertificateUnits).HasColumnType("decimal(24, 4)");

            entity.Property(e => e.ChequeNo)
                .HasMaxLength(10)
                .IsUnicode(false);

            entity.Property(e => e.Comments).HasColumnType("text");

            entity.Property(e => e.CostOfUnits).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.Employee).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.Employer).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.GlPostPeriod)
                .HasMaxLength(6)
                .IsUnicode(false);

            entity.Property(e => e.GlpostDate)
                .HasColumnType("datetime")
                .HasColumnName("GLPostDate");

            entity.Property(e => e.GrossAmountReceived).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.IdApplication).HasMaxLength(7);

            entity.Property(e => e.IdBank)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("ID_Bank");

            entity.Property(e => e.IdBankAccount)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("ID_BankAccount");

            entity.Property(e => e.IdBankEft)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("ID_Bank_EFT");

            entity.Property(e => e.IdBorrowMaster).HasColumnName("ID_BorrowMaster");

            entity.Property(e => e.IdCashMgtAccount)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("ID_CashMgtAccount")
                .IsFixedLength();

            entity.Property(e => e.IdCurrency)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("ID_Currency");

            entity.Property(e => e.IdImpPrtContributoAccount).HasColumnName("ID_ImpPrtContributoAccount");

            entity.Property(e => e.IdPortfolio).HasColumnName("ID_Portfolio");

            entity.Property(e => e.IdPortfolioContributor).HasColumnName("ID_PortfolioContributor");

            entity.Property(e => e.IdPortfolioContributorBulkAccount).HasColumnName("ID_PortfolioContributorBulkAccount");

            entity.Property(e => e.IdPortfolioDirect).HasColumnName("ID_Portfolio_Direct");

            entity.Property(e => e.IncentiveDueNow).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.Intrest).HasColumnType("decimal(18, 2)");

            
                
                

            entity.Property(e => e.Narration)
                .HasMaxLength(200)
                .IsUnicode(false);

            entity.Property(e => e.NoOfUnits).HasColumnType("decimal(24, 4)");

            entity.Property(e => e.Otherpayment10)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("otherpayment10");

            entity.Property(e => e.Otherpayment4)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("otherpayment4");

            entity.Property(e => e.Otherpayment5)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("otherpayment5");

            entity.Property(e => e.Otherpayment6)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("otherpayment6");

            entity.Property(e => e.Otherpayment7)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("otherpayment7");

            entity.Property(e => e.Otherpayment8)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("otherpayment8");

            entity.Property(e => e.Otherpayment9)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("otherpayment9");

            entity.Property(e => e.PaymentType)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.PenaltyCharge).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.PenaltyRate).HasColumnType("decimal(18, 4)");


            entity.Property(e => e.PrintBatch)
                .HasMaxLength(10)
                .IsUnicode(false);

            entity.Property(e => e.ReceiptDate).HasColumnType("datetime");

            entity.Property(e => e.RedemptionType).HasMaxLength(4);

            entity.Property(e => e.ReversalId).HasColumnName("ReversalID");

            entity.Property(e => e.StanpDutyAmount).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.Status)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.TransRefNo)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.TransactionDate).HasColumnType("datetime");

            entity.Property(e => e.TransactionType)
                .HasMaxLength(1)
                .IsUnicode(false);

            entity.Property(e => e.UniqueId).HasColumnName("UniqueID");

            entity.Property(e => e.UnitValue).HasColumnType("decimal(18, 4)");

            entity.Property(e => e.UnitsSold).HasColumnType("decimal(24, 4)");

            entity.Property(e => e.ValueDate).HasColumnType("datetime");

            entity.Property(e => e.VoucherNo)
                .HasMaxLength(10)
                .IsUnicode(false);

            entity.HasOne(d => d.IdPortfolioContributorNavigation)
                .WithMany(p => p.PortfolioContributorAccounts)
                .HasForeignKey(d => d.IdPortfolioContributor)
                .HasConstraintName("FK_PortfolioContributorAccount_PortfolioContributor");
        });

        modelBuilder.Entity<PortfolioContributorAccruedProfit>(entity =>
        {
            entity.HasKey(e => e.IdContributorAccruedProfit);

            entity.ToTable("PortfolioContributorAccruedProfit");

            entity.Property(e => e.IdContributorAccruedProfit).HasColumnName("ID_ContributorAccruedProfit");

            entity.Property(e => e.HoldersProfit).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.IdPortfolioContributor).HasColumnName("ID_PortfolioContributor");

            entity.Property(e => e.IdPortfolioContributorAccount).HasColumnName("ID_PortfolioContributorAccount");

            entity.Property(e => e.IdRedemptionContributorAccount).HasColumnName("ID_RedemptionContributorAccount");

            entity.Property(e => e.MgtFees).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.NetIncome).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.Profit2Share).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.TotalUnits).HasColumnType("decimal(24, 4)");

            entity.Property(e => e.Units2Sell).HasColumnType("decimal(24, 4)");

            entity.Property(e => e.ValueDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<PortfolioContributorAddress>(entity =>
        {
            entity.HasKey(e => e.IdPortfolioContributorAddresses);

            entity.Property(e => e.IdPortfolioContributorAddresses).HasColumnName("ID_PortfolioContributorAddresses");

            entity.Property(e => e.AccountCode)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.AccountNo)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.Address01)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.Property(e => e.Address02)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.Property(e => e.AgentCode)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.AgentName)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.AlternateEmail)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.Property(e => e.AnnualIncome).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.AutoSubAmount).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.AutoSubscribBeginDate).HasColumnType("datetime");

            entity.Property(e => e.BankAccountName)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.Property(e => e.BankBranchName)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.BusAddress01)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.BusAddress02)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.BusTelephone)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.BusinessName)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.Property(e => e.Bvn)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("BVN");

            entity.Property(e => e.ChildOtherNames)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.ChildSurName)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.City)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.Comments).HasColumnType("text");

            entity.Property(e => e.ContactPerson)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.Property(e => e.DateClosed).HasColumnType("datetime");

            entity.Property(e => e.DateOfBirth).HasColumnType("datetime");

            entity.Property(e => e.DateOpened).HasColumnType("datetime");

            entity.Property(e => e.Email)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.Property(e => e.EmployeeNo)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.EmploymentDate).HasColumnType("datetime");

            entity.Property(e => e.ExpiryDate).HasColumnType("datetime");

            entity.Property(e => e.FirstName)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.FullName)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.Property(e => e.Gender)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.HearedFrom)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.IdBank)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("ID_Bank");

            entity.Property(e => e.IdBusState)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("ID_BusState");

            entity.Property(e => e.IdCountry)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("ID_Country");

            entity.Property(e => e.IdCurrency)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("ID_Currency");

            entity.Property(e => e.IdIdentifyWith)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("ID_IdentifyWith");

            entity.Property(e => e.IdKinRelationship).HasColumnName("ID_KinRelationship");

            entity.Property(e => e.IdNationailty)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("ID_Nationailty");

            entity.Property(e => e.IdOccupation).HasColumnName("ID_Occupation");

            entity.Property(e => e.IdPortfolioContributor).HasColumnName("ID_PortfolioContributor");

            entity.Property(e => e.IdPortfolioContributorType).HasColumnName("ID_PortfolioContributorType");

            entity.Property(e => e.IdReferedByBranch)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("ID_ReferedByBranch");

            entity.Property(e => e.IdSourceOfFund)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("ID_SourceOfFund");

            entity.Property(e => e.IdState)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("ID_State");

            entity.Property(e => e.InitalAmount).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.IssueDate).HasColumnType("datetime");

            entity.Property(e => e.JobTitle)
                .HasMaxLength(10)
                .IsUnicode(false);

            entity.Property(e => e.JointOtherNames)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.JointSurName)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.LastLoginDate).HasColumnType("datetime");

            entity.Property(e => e.LastName)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.MaritalStatus)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.MobileNo)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.NameOfSpouse)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.Property(e => e.NextOfKin)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.Property(e => e.NextOfKinAddress).HasColumnType("text");

            entity.Property(e => e.NextOfKinEmail)
                .HasMaxLength(150)
                .IsUnicode(false);

            entity.Property(e => e.NextofKinTelephone)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.NoOfUnits).HasColumnType("decimal(31, 4)");

            entity.Property(e => e.Notification).HasMaxLength(100);

            entity.Property(e => e.PaymentMethod)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.PinNo)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.Rcnumber)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("RCNumber");

            entity.Property(e => e.RcregisterDate)
                .HasColumnType("datetime")
                .HasColumnName("RCRegisterDate");

            entity.Property(e => e.Status)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.SubscriptionMethod)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.Telephone)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.Property(e => e.Title)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.WebPassword)
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<PortfolioContributorAgent>(entity =>
        {
            entity.HasKey(e => e.AgentCode);

            entity.ToTable("PortfolioContributorAgent");

            entity.HasIndex(e => e.AgentName, "Key_PortfolioContributorAgent_AgentName");

            entity.Property(e => e.AgentCode)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.AccountNo)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.Address01)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Address_01");

            entity.Property(e => e.Address02)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Address_02");

            entity.Property(e => e.AgentName)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.Property(e => e.BankAccountName)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.Property(e => e.BankBranchName)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.ComisionRate).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.Comments).HasColumnType("text");

            entity.Property(e => e.ContractDate).HasColumnType("datetime");

            entity.Property(e => e.Email)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("email");

            entity.Property(e => e.FirstTarget)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("First_Target");

            entity.Property(e => e.IdAgent)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID_Agent");

            entity.Property(e => e.IdBank)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("ID_Bank");

            entity.Property(e => e.IdReferedByBranch)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ID_ReferedByBranch");

            entity.Property(e => e.IdState)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("ID_State");

            
                
                

            entity.Property(e => e.RenewTarget)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("Renew_Target");

            entity.Property(e => e.Status)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.TerminalDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<PortfolioContributorAgentComision>(entity =>
        {
            entity.HasKey(e => e.IdPortfolioContributorAgentComision);

            entity.ToTable("PortfolioContributorAgentComision");

            entity.Property(e => e.IdPortfolioContributorAgentComision).HasColumnName("ID_PortfolioContributorAgentComision");

            entity.Property(e => e.AgentCode)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.Amount).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.GlPostPeriod)
                .HasMaxLength(6)
                .IsUnicode(false);

            entity.Property(e => e.GlpostDate)
                .HasColumnType("datetime")
                .HasColumnName("GLPostDate");

            entity.Property(e => e.IdPortfolioContribution).HasColumnName("ID_PortfolioContribution");

            entity.Property(e => e.IdPortfolioContributionAccount).HasColumnName("ID_PortfolioContributionAccount");

            
                
                

            entity.Property(e => e.Narration)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.TransactionDate).HasColumnType("datetime");

            entity.Property(e => e.TransactionType)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.ValueDate).HasColumnType("datetime");

            entity.Property(e => e.VoucherNo)
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<PortfolioContributorBeneficiary>(entity =>
        {
            entity.HasKey(e => e.IdPortfolioContributorBeneficiary);

            entity.ToTable("PortfolioContributorBeneficiary");

            entity.Property(e => e.IdPortfolioContributorBeneficiary).HasColumnName("ID_PortfolioContributorBeneficiary");

            entity.Property(e => e.Beneficiary)
                .HasMaxLength(150)
                .IsUnicode(false);

            entity.Property(e => e.DateOfBirth).HasColumnType("datetime");

            entity.Property(e => e.IdPortfolioContributor).HasColumnName("ID_PortfolioContributor");
        });

        modelBuilder.Entity<PortfolioContributorBiodataHistotry>(entity =>
        {
            entity.HasKey(e => e.IdPortfolioContributorBiodata);

            entity.ToTable("PortfolioContributorBiodataHistotry");

            entity.Property(e => e.IdPortfolioContributorBiodata).HasColumnName("ID_PortfolioContributorBiodata");

            entity.Property(e => e.AccountCode)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.AccountNo)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.Address01)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.Property(e => e.Address02)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.Property(e => e.AgentCode)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.AgentName)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.AlternateEmail)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.Property(e => e.AnnualIncome).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.AutoSubAmount).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.AutoSubscribBeginDate).HasColumnType("datetime");

            entity.Property(e => e.BankAccountName)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.Property(e => e.BankBranchName)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.BusAddress01)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.BusAddress02)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.BusTelephone)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.BusinessName)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.Property(e => e.Bvn)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("BVN");

            entity.Property(e => e.ChildOtherNames)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.ChildSurName)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.City)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.Comments).HasColumnType("text");

            entity.Property(e => e.ContactPerson)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.Property(e => e.DateClosed).HasColumnType("datetime");

            entity.Property(e => e.DateOfBirth).HasColumnType("datetime");

            entity.Property(e => e.DateOpened).HasColumnType("datetime");

            entity.Property(e => e.Email)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.Property(e => e.EmployeeNo)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.EmploymentDate).HasColumnType("datetime");

            entity.Property(e => e.ExpiryDate).HasColumnType("datetime");

            entity.Property(e => e.FirstName)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.FullName)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.Property(e => e.Gender)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.HearedFrom)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.IdBank)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("ID_Bank");

            entity.Property(e => e.IdBusState)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("ID_BusState");

            entity.Property(e => e.IdCountry)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("ID_Country");

            entity.Property(e => e.IdCurrency)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("ID_Currency");

            entity.Property(e => e.IdIdentifyWith)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("ID_IdentifyWith");

            entity.Property(e => e.IdKinRelationship).HasColumnName("ID_KinRelationship");

            entity.Property(e => e.IdNationailty)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("ID_Nationailty");

            entity.Property(e => e.IdOccupation).HasColumnName("ID_Occupation");

            entity.Property(e => e.IdPortfolioContributor).HasColumnName("ID_PortfolioContributor");

            entity.Property(e => e.IdPortfolioContributorType).HasColumnName("ID_PortfolioContributorType");

            entity.Property(e => e.IdReferedByBranch)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("ID_ReferedByBranch");

            entity.Property(e => e.IdSourceOfFund)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("ID_SourceOfFund");

            entity.Property(e => e.IdState)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("ID_State");

            entity.Property(e => e.InitalAmount).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.IssueDate).HasColumnType("datetime");

            entity.Property(e => e.JobTitle)
                .HasMaxLength(10)
                .IsUnicode(false);

            entity.Property(e => e.JointOtherNames)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.JointSurName)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.LastLoginDate).HasColumnType("datetime");

            entity.Property(e => e.LastName)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.MaritalStatus)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.MobileNo)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.NameOfSpouse)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.Property(e => e.NextOfKin)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.Property(e => e.NextOfKinAddress).HasColumnType("text");

            entity.Property(e => e.NextOfKinEmail)
                .HasMaxLength(150)
                .IsUnicode(false);

            entity.Property(e => e.NextofKinTelephone)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.NoOfUnits).HasColumnType("decimal(31, 4)");

            entity.Property(e => e.PaymentMethod)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.PinNo)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.Rcnumber)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("RCNumber");

            entity.Property(e => e.RcregisterDate)
                .HasColumnType("datetime")
                .HasColumnName("RCRegisterDate");

            entity.Property(e => e.Status)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.SubscriptionMethod)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.Telephone)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.Property(e => e.Title)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.WebPassword)
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<PortfolioContributorBulkAccount>(entity =>
        {
            entity.HasKey(e => e.IdPortfolioContributorBulkAccount);

            entity.ToTable("PortfolioContributor_BulkAccount");

            entity.Property(e => e.IdPortfolioContributorBulkAccount).HasColumnName("ID_PortfolioContributorBulkAccount");

            entity.Property(e => e.Amount).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.CapturedBy)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.ChequeNo)
                .HasMaxLength(10)
                .IsUnicode(false);

            entity.Property(e => e.Comments).HasColumnType("text");

            entity.Property(e => e.GlPostPeriod)
                .HasMaxLength(6)
                .IsUnicode(false);

            entity.Property(e => e.GlpostDate)
                .HasColumnType("datetime")
                .HasColumnName("GLPostDate");

            entity.Property(e => e.IdBank)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("ID_Bank");

            entity.Property(e => e.IdBankAccount)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("ID_BankAccount");

            entity.Property(e => e.IdCurrency)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("ID_Currency");

            
                
                

            entity.Property(e => e.Narration)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.PaymentType)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.ReceiptDate).HasColumnType("datetime");

            entity.Property(e => e.ReversalId).HasColumnName("ReversalID");

            entity.Property(e => e.Status)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.TransactionDate).HasColumnType("datetime");

            entity.Property(e => e.TransactionType)
                .HasMaxLength(1)
                .IsUnicode(false);

            entity.Property(e => e.ValueDate).HasColumnType("datetime");

            entity.Property(e => e.VoucherNo)
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<PortfolioContributorCertficate>(entity =>
        {
            entity.HasKey(e => e.IdPortfolioContributorCertificate);

            entity.ToTable("PortfolioContributorCertficate");

            entity.Property(e => e.IdPortfolioContributorCertificate).HasColumnName("ID_PortfolioContributorCertificate");

            entity.Property(e => e.Comments).HasColumnType("text");

            entity.Property(e => e.IdPortfolio).HasColumnName("ID_Portfolio");

            entity.Property(e => e.IdPortfolioContributor).HasColumnName("ID_PortfolioContributor");

            
                
                

            entity.Property(e => e.QtyUnit).HasColumnType("decimal(18, 4)");

            entity.Property(e => e.ShareId).HasColumnName("ShareID");

            entity.Property(e => e.Status)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.UniqueId).HasColumnName("UniqueID");
        });

        modelBuilder.Entity<PortfolioContributorDependant>(entity =>
        {
            entity.HasKey(e => e.IdPortfolioContributorDependant);

            entity.ToTable("PortfolioContributorDependant");

            entity.Property(e => e.IdPortfolioContributorDependant).HasColumnName("ID_PortfolioContributorDependant");

            entity.Property(e => e.AccountCode)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.Address01)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.Property(e => e.Address02)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.Property(e => e.DateOfBirth).HasColumnType("datetime");

            entity.Property(e => e.DateOpened).HasColumnType("datetime");

            entity.Property(e => e.Email)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.Property(e => e.FullName)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.Property(e => e.Gender)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.IdCountry)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("ID_Country");

            entity.Property(e => e.IdIdentifyWith)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("ID_IdentifyWith");

            entity.Property(e => e.IdPortfolioContributor).HasColumnName("ID_PortfolioContributor");

            entity.Property(e => e.IdState)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("ID_State");

            entity.Property(e => e.LastName)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.MobileNo)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.Title)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<PortfolioContributorDocumentation>(entity =>
        {
            entity.HasKey(e => e.IdPortfolioContributorDocumentation);

            entity.ToTable("PortfolioContributorDocumentation");

            entity.Property(e => e.IdPortfolioContributorDocumentation).HasColumnName("ID_PortfolioContributorDocumentation");

            entity.Property(e => e.Capturedby)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.IdDocumentMaster).HasColumnName("ID_DocumentMaster");

            entity.Property(e => e.IdPortfolioContributor).HasColumnName("ID_PortfolioContributor");

            entity.Property(e => e.SubmitionDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<PortfolioContributorJoinApplicant>(entity =>
        {
            entity.HasKey(e => e.IdPortfolioContributorJoinApplicant);

            entity.ToTable("PortfolioContributorJoinApplicant");

            entity.Property(e => e.IdPortfolioContributorJoinApplicant).HasColumnName("ID_PortfolioContributorJoinApplicant");

            entity.Property(e => e.Address01)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.Property(e => e.Address02)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.Property(e => e.BusAddress01)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.BusAddress02)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.BusinessName)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.Property(e => e.DateOfBirth).HasColumnType("datetime");

            entity.Property(e => e.Email)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.Property(e => e.EmploymentType)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.ExpiryDate).HasColumnType("datetime");

            entity.Property(e => e.FirstName)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.Gender)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.IdIdentifyWith)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("ID_IdentifyWith");

            entity.Property(e => e.IdNationailty)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("ID_Nationailty");

            entity.Property(e => e.IdOccupation).HasColumnName("ID_Occupation");

            entity.Property(e => e.IdPortfolioContributor).HasColumnName("ID_PortfolioContributor");

            entity.Property(e => e.IdSourceOfFund)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("ID_SourceOfFund");

            entity.Property(e => e.IdState)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("ID_State");

            entity.Property(e => e.IssueDate).HasColumnType("datetime");

            entity.Property(e => e.MaritalStatus)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.MiddleName)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.MobileNo)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.MotherMaidenName)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.Occupation)
                .HasMaxLength(10)
                .IsFixedLength();

            entity.Property(e => e.OtherEmployerType)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.Property(e => e.OtherForIdentifyWith)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.Property(e => e.PassportNumber)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.Property(e => e.PlaceOfIssue)
                .HasMaxLength(3)
                .IsUnicode(false);

            entity.Property(e => e.SortCode).HasMaxLength(10);

            entity.Property(e => e.SurName)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.Telephone)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.Property(e => e.Title)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<PortfolioContributorLien>(entity =>
        {
            entity.HasKey(e => e.IdPortfolioContributorLien);

            entity.ToTable("PortfolioContributorLien");

            entity.Property(e => e.IdPortfolioContributorLien).HasColumnName("ID_PortfolioContributorLien");

            entity.Property(e => e.CaptureBy)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.CaptureDate).HasColumnType("datetime");

            entity.Property(e => e.IdPortfolio).HasColumnName("ID_Portfolio");

            entity.Property(e => e.IdPortfolioContributor).HasColumnName("ID_PortfolioContributor");

            entity.Property(e => e.LienDate).HasColumnType("datetime");

            
                
                

            entity.Property(e => e.Narration)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.Property(e => e.ReleaseDate).HasColumnType("datetime");

            entity.Property(e => e.ReleasedBy)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.Ucid).HasColumnName("UCID");
        });

        modelBuilder.Entity<PortfolioContributorMandate>(entity =>
        {
            entity.HasKey(e => e.IdPortfolioContributorMandate);

            entity.ToTable("PortfolioContributorMandate");

            entity.Property(e => e.IdPortfolioContributorMandate).HasColumnName("ID_PortfolioContributorMandate");

            entity.Property(e => e.Description)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.IdPortfolioContributor).HasColumnName("ID_PortfolioContributor");

            
                
                

            entity.Property(e => e.PhotoFileName)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.Property(e => e.SignatureFileName)
                .HasMaxLength(100)
                .IsUnicode(false);
        });

        modelBuilder.Entity<PortfolioContributorNetWorth>(entity =>
        {
            entity.HasKey(e => e.IdPortfolioContrinutorNetWorth);

            entity.ToTable("PortfolioContributorNetWorth");

            entity.HasIndex(e => new { e.IdPortfolioContributor, e.NetWorthDate }, "Key_PortfolioContributorNetWorth_ContributorDate");

            entity.HasIndex(e => e.Ucid, "Key_PortfolioContributorNetWorth_UCID");

            entity.HasIndex(e => new { e.IdPortfolioContributor, e.InvestmentModule, e.Id2link, e.NetWorthDate }, "Key_PortfolioContributorNetWorth_Unique");

            entity.Property(e => e.IdPortfolioContrinutorNetWorth).HasColumnName("ID_PortfolioContrinutorNetWorth");

            entity.Property(e => e.AssetCost).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.AssetValue).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.FeesAccrued).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.Id2link).HasColumnName("ID2Link");

            entity.Property(e => e.IdInvestmentType)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("ID_InvestmentType");

            entity.Property(e => e.IdPortfolio).HasColumnName("ID_Portfolio");

            entity.Property(e => e.IdPortfolioContributor).HasColumnName("ID_PortfolioContributor");

            entity.Property(e => e.IdSubInvestmentType)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("ID_SubInvestmentType");

            entity.Property(e => e.InterestAccrued).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.InvestmentModule)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.MarketPrice).HasColumnType("decimal(20, 10)");

            entity.Property(e => e.MaturityDate).HasColumnType("datetime");

            entity.Property(e => e.NetAssetValue).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.NetWorthDate).HasColumnType("datetime");

            entity.Property(e => e.QtyOwned).HasColumnType("decimal(20, 4)");

            entity.Property(e => e.Ucid).HasColumnName("UCID");

            entity.Property(e => e.WtaxAmount)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("WTaxAmount");
        });

        modelBuilder.Entity<PortfolioContributorRedemption>(entity =>
        {
            entity.HasKey(e => e.IdPortfolioContributorRedemption);

            entity.ToTable("PortfolioContributorRedemption");

            entity.Property(e => e.IdPortfolioContributorRedemption).HasColumnName("ID_PortfolioContributorRedemption");

            entity.Property(e => e.CertificateNo)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.CostOfUnits).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.IdPorfolioContributor).HasColumnName("ID_PorfolioContributor");

            entity.Property(e => e.IdPortfolio).HasColumnName("ID_Portfolio");

            entity.Property(e => e.IdPortfolioContributorAccount).HasColumnName("ID_PortfolioContributorAccount");

            entity.Property(e => e.IdRedemptionContributorAccount).HasColumnName("ID_RedemptionContributorAccount");

            
                
                

            entity.Property(e => e.NetSettlement).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.NoOfUnits).HasColumnType("decimal(24, 4)");

            entity.Property(e => e.OfferPrice).HasColumnType("decimal(18, 4)");

            entity.Property(e => e.PenaltyAmount).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.SalesValue).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.Tax).HasColumnType("decimal(18, 2)");

            entity.HasOne(d => d.IdPortfolioContributorAccountNavigation)
                .WithMany(p => p.PortfolioContributorRedemptions)
                .HasForeignKey(d => d.IdPortfolioContributorAccount)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_PortfolioContributorRedemption_PortfolioContributorAccount");
        });

        modelBuilder.Entity<PortfolioContributorType>(entity =>
        {
            entity.HasKey(e => e.IdPortfolioContributorType);

            entity.ToTable("PortfolioContributorType");

            entity.HasIndex(e => e.PortfolioContributorType1, "Key_PortfolioContributorType_PortfolioContributorType")
                .IsUnique();

            entity.Property(e => e.IdPortfolioContributorType).HasColumnName("ID_PortfolioContributorType");

            entity.Property(e => e.MaxBalance).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.MaxDeposit).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.MinDeposit).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.PortfolioContributorType1)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("PortfolioContributorType");
        });

        modelBuilder.Entity<PortfolioCsc>(entity =>
        {
            entity.HasKey(e => e.IdPortfolioCscs);

            entity.ToTable("PortfolioCSCS");

            entity.HasIndex(e => e.Cscsno, "Key_PortfolioCSCS_CSCSNO")
                .IsUnique();

            entity.HasIndex(e => new { e.IdPortfolio, e.Cscsno }, "Key_PortfolioCSCS_Portfolio_CSCSNo")
                .IsUnique();

            entity.Property(e => e.IdPortfolioCscs).HasColumnName("ID_PortfolioCSCS");

            entity.Property(e => e.Cscsno)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CSCSNO");

            entity.Property(e => e.DepositoryName)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.IdPortfolio).HasColumnName("ID_Portfolio");

            entity.Property(e => e.InvestorActNo)
                .HasMaxLength(20)
                .IsUnicode(false);

            
                
                

            entity.Property(e => e.Name)
                .HasMaxLength(100)
                .IsUnicode(false);
        });

        modelBuilder.Entity<PortfolioCurrencyBalance>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("PortfolioCurrencyBalances");

            entity.Property(e => e.Balance).HasColumnType("decimal(38, 2)");

            entity.Property(e => e.IdCurrency)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("ID_Currency");

            entity.Property(e => e.IdPortfolio).HasColumnName("ID_Portfolio");
        });

        modelBuilder.Entity<PortfolioCustodian>(entity =>
        {
            entity.HasKey(e => e.IdPortfolioCustodian);

            entity.ToTable("PortfolioCustodian");

            entity.HasIndex(e => e.PfcCode, "Key_PortfolioCustodian_PfcCode")
                .IsUnique();

            entity.HasIndex(e => e.PfcName, "Key_PortfolioCustodian_PfcName")
                .IsUnique();

            entity.Property(e => e.IdPortfolioCustodian).HasColumnName("ID_PortfolioCustodian");

            entity.Property(e => e.ApprovedBy)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.ApprovedDate).HasColumnType("datetime");

            entity.Property(e => e.CapturedBy)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.CapturedDate).HasColumnType("datetime");

            entity.Property(e => e.Comments).HasColumnType("text");

            entity.Property(e => e.IdPfcState)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("ID_PfcState");

            entity.Property(e => e.Pfa2PfcFolder)
                .HasMaxLength(150)
                .IsUnicode(false);

            entity.Property(e => e.Pfc2PfaFolder)
                .HasMaxLength(150)
                .IsUnicode(false);

            entity.Property(e => e.PfcAddress01)
                .HasMaxLength(150)
                .IsUnicode(false);

            entity.Property(e => e.PfcAddress02)
                .HasMaxLength(150)
                .IsUnicode(false);

            entity.Property(e => e.PfcBankCode)
                .HasMaxLength(10)
                .IsUnicode(false);

            entity.Property(e => e.PfcCode)
                .HasMaxLength(10)
                .IsFixedLength();

            entity.Property(e => e.PfcContact)
                .HasMaxLength(150)
                .IsUnicode(false);

            entity.Property(e => e.PfcEmail)
                .HasMaxLength(150)
                .IsUnicode(false);

            entity.Property(e => e.PfcGsmNo)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.PfcName)
                .HasMaxLength(150)
                .IsUnicode(false);

            entity.Property(e => e.PfcTelephones)
                .HasMaxLength(150)
                .IsUnicode(false);

            entity.Property(e => e.Status)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<PortfolioDirectGldetail>(entity =>
        {
            entity.HasKey(e => e.IdPortfolioDirectGldetails);

            entity.ToTable("PortfolioDirectGLDetails");

            entity.Property(e => e.IdPortfolioDirectGldetails).HasColumnName("ID_PortfolioDirectGLDetails");

            entity.Property(e => e.Acode01)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ACode01");

            entity.Property(e => e.Acode02)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ACode02");

            entity.Property(e => e.Acode03)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("ACode03");

            entity.Property(e => e.Acode04)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("ACode04");

            entity.Property(e => e.Acode05)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("ACode05");

            entity.Property(e => e.Acode06)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("ACode06");

            entity.Property(e => e.Acode07)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("ACode07");

            entity.Property(e => e.Acode08)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("ACode08");

            entity.Property(e => e.Acode09)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("ACode09");

            entity.Property(e => e.Acode10)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("ACode10");

            entity.Property(e => e.AffectPl).HasColumnName("AffectPL");

            entity.Property(e => e.Description)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.ExRate).HasColumnType("decimal(18, 4)");

            entity.Property(e => e.ForexAmount).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.GlactNo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("GLActNo");

            entity.Property(e => e.IdBranch)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("ID_Branch");

            entity.Property(e => e.IdCashForeCastClass)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("ID_CashForeCastClass");

            entity.Property(e => e.IdCurrency)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("ID_Currency");

            entity.Property(e => e.IdLocation)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("ID_Location");

            entity.Property(e => e.IdPortfolioDirectGlmaster).HasColumnName("ID_PortfolioDirectGLMaster");

            entity.Property(e => e.IdProductLine)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("ID_ProductLine");

            entity.Property(e => e.LocalAmount).HasColumnType("decimal(18, 2)");

            
                
                

            entity.Property(e => e.NoOfUnits).HasColumnType("decimal(24, 4)");

            entity.Property(e => e.Ucid).HasColumnName("UCID");

            entity.Property(e => e.Ueid).HasColumnName("UEID");

            entity.Property(e => e.UnitPrice).HasColumnType("decimal(18, 4)");

            entity.Property(e => e.Upid).HasColumnName("UPID");

            entity.Property(e => e.Usid).HasColumnName("USID");

            entity.Property(e => e.ValueDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<PortfolioDirectGlmaster>(entity =>
        {
            entity.HasKey(e => e.IdPortfolioDirectGlmaster);

            entity.ToTable("PortfolioDirectGLMaster");

            entity.Property(e => e.IdPortfolioDirectGlmaster).HasColumnName("ID_PortfolioDirectGLMaster");

            entity.Property(e => e.ApprovedBy)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.ApprovedDate).HasColumnType("datetime");

            entity.Property(e => e.CapturedBy)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.Comments).HasColumnType("text");

            entity.Property(e => e.CrAmount).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.DoNotExportToExternalGl)
                .HasColumnName("DoNotExportToExternalGL")
                .HasDefaultValueSql("((1))");

            entity.Property(e => e.DocumentHyperLink).HasColumnType("text");

            entity.Property(e => e.DrAmount).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.IdCurrency)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("ID_Currency");

            entity.Property(e => e.IdPortfolio).HasColumnName("ID_Portfolio");

            
                
                

            entity.Property(e => e.Narration)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.Status)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.TransactionDate).HasColumnType("datetime");

            entity.Property(e => e.ValueDate).HasColumnType("datetime");

            entity.Property(e => e.VoucherNo)
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<PortfolioDirectGlposting>(entity =>
        {
            entity.HasKey(e => e.IdPortfolioDirectGlposting);

            entity.ToTable("PortfolioDirectGLPosting");

            entity.HasIndex(e => e.Narration, "Key_PortfolioDirectGLPosting_Narration");

            entity.Property(e => e.IdPortfolioDirectGlposting).HasColumnName("ID_PortfolioDirectGLPosting");

            entity.Property(e => e.Amount).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.ApprovedBy)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.Approveddate).HasColumnType("datetime");

            entity.Property(e => e.CapturedBy)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.Comments).HasColumnType("text");

            entity.Property(e => e.CrActNo)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.DrActNo)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.IdPortfolio).HasColumnName("ID_Portfolio");

            
                
                

            entity.Property(e => e.Narration)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.Status)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.TransactionClass)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.TransactionDate).HasColumnType("datetime");

            entity.Property(e => e.TransactionType)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.ValueDate).HasColumnType("datetime");

            entity.Property(e => e.VoucherNo)
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<PortfolioDirector>(entity =>
        {
            entity.HasKey(e => e.IdPortfolioDirectors);

            entity.HasIndex(e => e.LastName, "Key_PortfolioDirectors_LastName");

            entity.Property(e => e.IdPortfolioDirectors).HasColumnName("ID_PortfolioDirectors");

            entity.Property(e => e.DateOfBirth).HasColumnType("datetime");

            entity.Property(e => e.IdPortfolio).HasColumnName("ID_Portfolio");

            entity.Property(e => e.LastName)
                .HasMaxLength(80)
                .IsUnicode(false);

            entity.Property(e => e.OtherNames)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.Property(e => e.Title)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<PortfolioDividendAllocation>(entity =>
        {
            entity.HasKey(e => e.IdPortfolioDividendAllocation);

            entity.ToTable("PortfolioDividendAllocation");

            entity.Property(e => e.IdPortfolioDividendAllocation).HasColumnName("ID_PortfolioDividendAllocation");

            entity.Property(e => e.Balance).HasColumnType("decimal(20, 4)");

            entity.Property(e => e.DividendAmount).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.IdPortfolio).HasColumnName("ID_Portfolio");

            entity.Property(e => e.IdPortfolioContributor).HasColumnName("ID_PortfolioContributor");

            entity.Property(e => e.IdPortfolioContributorAccount).HasColumnName("ID_PortfolioContributorAccount");

            entity.Property(e => e.IdPortfolioDividendMaster).HasColumnName("ID_PortfolioDividendMaster");

            entity.Property(e => e.JoinDate).HasColumnType("datetime");

            
                
                

            entity.Property(e => e.OfferPrice).HasColumnType("decimal(18, 4)");

            entity.Property(e => e.TodaysProfit).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.TreatmentType)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.UnitsAmount).HasColumnType("decimal(28, 4)");

            entity.Property(e => e.UnitsOwned).HasColumnType("decimal(31, 4)");

            entity.Property(e => e.Wac)
                .HasColumnType("decimal(28, 15)")
                .HasColumnName("WAC");

            entity.HasOne(d => d.IdPortfolioDividendMasterNavigation)
                .WithMany(p => p.PortfolioDividendAllocations)
                .HasForeignKey(d => d.IdPortfolioDividendMaster)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_PortfolioDividendAllocation_PortfolioDividendMaster");
        });

        modelBuilder.Entity<PortfolioDividendMaster>(entity =>
        {
            entity.HasKey(e => e.IdPortfolioDividendMaster);

            entity.ToTable("PortfolioDividendMaster");

            entity.Property(e => e.IdPortfolioDividendMaster).HasColumnName("ID_PortfolioDividendMaster");

            entity.Property(e => e.Amount2Share).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.ApprovedBy)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.BeginDate).HasColumnType("datetime");

            entity.Property(e => e.BonusFor)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("Bonus_For");

            entity.Property(e => e.BonusRate)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("Bonus_Rate");

            entity.Property(e => e.CaptureBy)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.ClosureDate).HasColumnType("datetime");

            entity.Property(e => e.Comments).HasColumnType("text");

            entity.Property(e => e.DividendRate).HasColumnType("decimal(18, 4)");

            entity.Property(e => e.GlPostDate).HasColumnType("datetime");

            entity.Property(e => e.GrossFundUnits).HasColumnType("decimal(31, 4)");

            entity.Property(e => e.IdPortfolio).HasColumnName("ID_Portfolio");

            
                
                

            entity.Property(e => e.Narration)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.PortionToShare)
                .HasColumnType("decimal(18, 2)")
                .HasDefaultValueSql("((100))");

            entity.Property(e => e.Status)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.TransactionType)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.Units2Share).HasColumnType("decimal(28, 0)");

            entity.Property(e => e.ValueDate).HasColumnType("datetime");

            entity.Property(e => e.VoucherNo)
                .HasMaxLength(10)
                .IsUnicode(false);

            entity.Property(e => e.WithTaxAmount).HasColumnType("decimal(18, 2)");
        });

        modelBuilder.Entity<PortfolioDocumentation>(entity =>
        {
            entity.HasKey(e => e.IdPortfolioDocumentation);

            entity.ToTable("PortfolioDocumentation");

            entity.Property(e => e.IdPortfolioDocumentation).HasColumnName("ID_PortfolioDocumentation");

            entity.Property(e => e.IdDocumentMaster).HasColumnName("ID_DocumentMaster");

            entity.Property(e => e.IdPortfolio).HasColumnName("ID_Portfolio");

            
                
                
        });

        modelBuilder.Entity<PortfolioDrCrDetail>(entity =>
        {
            entity.HasKey(e => e.IdPortfolioDrCrDetail);

            entity.ToTable("PortfolioDrCrDetail");

            entity.HasIndex(e => e.IdPortfolioDrCrMaster, "Key_PortfolioDrCrDetail_DrCrMaster");

            entity.HasIndex(e => e.Narration, "Key_PortfolioDrCrDetail_Narration");

            entity.Property(e => e.IdPortfolioDrCrDetail).HasColumnName("ID_PortfolioDrCrDetail");

            entity.Property(e => e.Amount).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.GlPostDate).HasColumnType("datetime");

            entity.Property(e => e.IdPortfolio).HasColumnName("ID_portfolio");

            entity.Property(e => e.IdPortfolioDrCrInvoice).HasColumnName("ID_PortfolioDrCrInvoice");

            entity.Property(e => e.IdPortfolioDrCrMaster).HasColumnName("ID_PortfolioDrCrMaster");

            
                
                

            entity.Property(e => e.Narration)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.PostedBy)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.ReversalId).HasColumnName("ReversalID");

            entity.Property(e => e.ValuationDate).HasColumnType("datetime");

            entity.Property(e => e.VoucherNo)
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<PortfolioDrCrInvoice>(entity =>
        {
            entity.HasKey(e => e.IdPortfolioDrCrInvoice);

            entity.ToTable("PortfolioDrCrInvoice");

            entity.Property(e => e.IdPortfolioDrCrInvoice).HasColumnName("ID_PortfolioDrCrInvoice");

            entity.Property(e => e.Amount).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.ApplyDate).HasColumnType("datetime");

            entity.Property(e => e.ApprovalDate).HasColumnType("datetime");

            entity.Property(e => e.ApprovedBy)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.CapturedBy)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.Comments).HasColumnType("text");

            entity.Property(e => e.GlpostDate)
                .HasColumnType("datetime")
                .HasColumnName("GLPostDate");

            entity.Property(e => e.IdPortfolio).HasColumnName("ID_Portfolio");

            entity.Property(e => e.IdPortfolioDrCrMaster).HasColumnName("ID_PortfolioDrCrMaster");

            entity.Property(e => e.InvoiceDate).HasColumnType("datetime");

            
                
                

            entity.Property(e => e.Narration)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.Property(e => e.Status)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.TransactionDate).HasColumnType("datetime");

            entity.Property(e => e.VoucherNo)
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<PortfolioDrCrMaster>(entity =>
        {
            entity.HasKey(e => e.IdPortfolioDrCrMaster);

            entity.ToTable("PortfolioDrCrMaster");

            entity.Property(e => e.IdPortfolioDrCrMaster).HasColumnName("ID_PortfolioDrCrMaster");

            entity.Property(e => e.AccrualBf)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("Accrual_bf");

            entity.Property(e => e.Amount).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.BeginDate).HasColumnType("datetime");

            entity.Property(e => e.Comments).HasColumnType("text");

            entity.Property(e => e.CrAccountNo)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.DrAccountNo)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.EndDate).HasColumnType("datetime");

            entity.Property(e => e.IdInvestmentType)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("ID_InvestmentType");

            entity.Property(e => e.IdPortfolio).HasColumnName("ID_Portfolio");

            entity.Property(e => e.LastPostDate).HasColumnType("datetime");

            
                
                

            entity.Property(e => e.Narration)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.Status)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.WriteOffPerDay).HasColumnType("decimal(18, 2)");
        });

        modelBuilder.Entity<PortfolioEquitySalesAdisor>(entity =>
        {
            entity.HasKey(e => e.IdEquitySalesTriger);

            entity.ToTable("PortfolioEquitySalesAdisor");

            entity.HasIndex(e => e.IdPortfolio, "Key_PortfolioEquitySalesAdisor_IDPortfolio");

            entity.Property(e => e.IdEquitySalesTriger).HasColumnName("ID_EquitySalesTriger");

            entity.Property(e => e.Advise)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.AlertDate).HasColumnType("datetime");

            entity.Property(e => e.CostPrice).HasColumnType("decimal(24, 2)");

            entity.Property(e => e.Gain).HasColumnType("decimal(24, 2)");

            entity.Property(e => e.IdPortfolio).HasColumnName("ID_Portfolio");

            entity.Property(e => e.IdSellTriger).HasColumnName("ID_SellTriger");

            entity.Property(e => e.Loss).HasColumnType("decimal(24, 2)");

            entity.Property(e => e.LossTriger).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.MarketPrice).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.MarketValue).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.ProfitTriger).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.PurchaseDate).HasColumnType("datetime");

            entity.Property(e => e.QtyOwned).HasColumnType("decimal(28, 4)");

            entity.Property(e => e.ShareId).HasColumnName("ShareID");

            entity.Property(e => e.Symbol)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.UniqueId).HasColumnName("UniqueID");
        });

        modelBuilder.Entity<PortfolioExpectedReturn>(entity =>
        {
            entity.HasKey(e => e.IdExpectedReturn);

            entity.ToTable("PortfolioExpectedReturn");

            entity.Property(e => e.IdExpectedReturn).HasColumnName("ID_ExpectedReturn");

            entity.Property(e => e.Amount).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.Balance).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.BeginDate).HasColumnType("datetime");

            entity.Property(e => e.EndDate).HasColumnType("datetime");

            entity.Property(e => e.EoqDate).HasColumnType("datetime");

            entity.Property(e => e.IdPortfolio).HasColumnName("ID_Portfolio");

            entity.Property(e => e.Interest).HasColumnType("decimal(18, 2)");

            
                
                

            entity.Property(e => e.Narration)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.Rate).HasColumnType("decimal(18, 8)");
        });

        modelBuilder.Entity<PortfolioGroup>(entity =>
        {
            entity.HasKey(e => e.IdPortfolioGroup);

            entity.ToTable("PortfolioGroup");

            entity.HasIndex(e => e.Cscsid, "Key_PortfolioGroup_CSCSID");

            entity.HasIndex(e => new { e.IdPortfolioGroup, e.FundCode }, "Key_PortfolioGroup_FundCode")
                .IsUnique();

            entity.HasIndex(e => e.PortfolioGroup1, "Key_PortfolioGroup_PortfolioGroup")
                .IsUnique();

            entity.Property(e => e.IdPortfolioGroup).HasColumnName("ID_PortfolioGroup");

            entity.Property(e => e.AllocationActNo)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.AllocationActNoCcenter)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("AllocationActNo_CCenter");

            entity.Property(e => e.BankGlActNo)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.BankGlActNoCcenter)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("BankGlActNo_CCenter");

            entity.Property(e => e.Cash1AccountNo)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.Cash1AccountNoCcenter)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("Cash1AccountNo_CCenter");

            entity.Property(e => e.Cash2AccountNo)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.Cash2AccountNoCcenter)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("Cash2AccountNo_CCenter");

            entity.Property(e => e.ContributionActNo)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.ContributionActNoCcenter)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("ContributionActNo_CCenter");

            entity.Property(e => e.Cscsid)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CSCSID");

            entity.Property(e => e.CustodianFeesPayable)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.CustodianFeesPayableCcenter)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CustodianFeesPayable_CCenter");

            entity.Property(e => e.FeesIncomeReserve)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.FeesIncomeReserveCcenter)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("FeesIncomeReserve_CCenter");

            entity.Property(e => e.ForexGainGlActNo)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.ForexGainGlActNoCcenter)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("ForexGainGlActNo_CCenter");

            entity.Property(e => e.ForexLossGlActNo)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.ForexLossGlActNoCcenter)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("ForexLossGlActNo_CCenter");

            entity.Property(e => e.FundCode)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.IdBankAccount01)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("ID_BankAccount_01");

            entity.Property(e => e.IdBankAccount02)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("ID_BankAccount_02");

            entity.Property(e => e.IdBizUnit)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("ID_BizUnit");

            entity.Property(e => e.IdPortfolioGroupClassification).HasColumnName("ID_PortfolioGroupClassification");

            entity.Property(e => e.IdRelationshipManager)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("ID_RelationshipManager");

            entity.Property(e => e.IncentiveIncomeActNo)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.IncentiveIncomeActNoCcenter)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("IncentiveIncomeActNo_CCenter");

            entity.Property(e => e.IncomeFeesAccountNo)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.IncomeFeesAccountNoCcenter)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("IncomeFeesAccountNo_CCenter");

            entity.Property(e => e.InterestExpenseActNo)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.InterestExpenseActNoCcenter)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("InterestExpenseActNo_CCenter");

            entity.Property(e => e.InterestIncomeActNo)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.InterestIncomeActNoCcenter)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("InterestIncomeActNo_CCenter");

            entity.Property(e => e.InvestorAccountNo)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.MainAccount)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.MainAccountCcenter)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("MainAccount_CCenter");

            entity.Property(e => e.MainAccountWithdraw)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("MainAccount_Withdraw");

            entity.Property(e => e.MainAccountWithdrawCcenter)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("MainAccount_Withdraw_CCenter");

            entity.Property(e => e.ManagementFeesIncomeAccount)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.ManagementFeesIncomeAccountCcenter)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("ManagementFeesIncomeAccount_CCenter");

            entity.Property(e => e.ManagementFeesIncomeAccountPfc)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("ManagementFeesIncomeAccount_PFC");

            entity.Property(e => e.ManagementFeesIncomeAccountPfcCcenter)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("ManagementFeesIncomeAccount_PFC_CCenter");

            entity.Property(e => e.ManagementFeesIncomeAccountRegulator)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("ManagementFeesIncomeAccount_Regulator");

            entity.Property(e => e.ManagementFeesIncomeAccountRegulatorCcenter)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("ManagementFeesIncomeAccount_Regulator_CCenter");

            entity.Property(e => e.MaxAmount).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.MaxRiskAppetite).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.MaxTimeFactor).HasColumnType("decimal(18, 4)");

            entity.Property(e => e.MinAmount).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.MinRiskAppetite).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.MinTimeFactor).HasColumnType("decimal(18, 4)");

            
                
                

            entity.Property(e => e.PortfolioGroup1)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("PortfolioGroup");

            entity.Property(e => e.RequlatoryFeesPayable)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.RequlatoryFeesPayableCcenter)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("RequlatoryFeesPayable_CCenter");

            entity.Property(e => e.SalesGainLossGlActNo)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.SalesGainLossGlActNoCcenter)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SalesGainLossGlActNo_CCenter");

            entity.Property(e => e.VatAccountNoPfc)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("VatAccountNo_PFC");

            entity.Property(e => e.VatAccountNoPfcCcenter)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("VatAccountNo_PFC_CCenter");

            entity.Property(e => e.VatAccountNoRequlator)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("VatAccountNo_Requlator");

            entity.Property(e => e.VatAccountNoRequlatorCcenter)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("VatAccountNo_Requlator_CCenter");

            entity.Property(e => e.VatExpActNoAssetMgr)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("VatExpActNo_AssetMgr");

            entity.Property(e => e.VatExpActNoAssetMgrCcenter)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("VatExpActNo_AssetMgr_CCenter");

            entity.Property(e => e.VatExpActNoCustodian)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("VatExpActNo_Custodian");

            entity.Property(e => e.VatExpActNoCustodianCcenter)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("VatExpActNo_Custodian_CCenter");

            entity.Property(e => e.VatExpActNoRegulator)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("VatExpActNo_Regulator");

            entity.Property(e => e.VatExpActNoRegulatorCcenter)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("VatExpActNo_Regulator_CCenter");

            entity.Property(e => e.VataccountNo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("VATAccountNo");

            entity.Property(e => e.VataccountNoCcenter)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("VATAccountNo_CCenter");

            entity.Property(e => e.WithdrawalPayableActNo)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.WithdrawalPayableActNoCcenter)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("WithdrawalPayableActNo_CCenter");
        });

        modelBuilder.Entity<PortfolioGroupClassification>(entity =>
        {
            entity.HasKey(e => e.IdPortfolioGroupClassification);

            entity.ToTable("PortfolioGroupClassification");

            entity.HasIndex(e => e.FundClassCode, "Key_PortfolioGroupClassification_FundClassCode")
                .IsUnique();

            entity.Property(e => e.IdPortfolioGroupClassification).HasColumnName("ID_PortfolioGroupClassification");

            entity.Property(e => e.FundClass)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.Property(e => e.FundClassCode)
                .HasMaxLength(10)
                .IsUnicode(false);

            entity.Property(e => e.IdCurrency)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("ID_Currency");

            entity.Property(e => e.LastValuationDate).HasColumnType("datetime");

            
                
                

            entity.Property(e => e.MyId).HasColumnName("myID");

            entity.Property(e => e.SensitivityLevel)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<PortfolioGroupClassificationDetail>(entity =>
        {
            entity.HasKey(e => e.IdPortfolioGroupClassificationDetails);

            entity.HasIndex(e => new { e.IdPortfolioGroupClassification, e.IdPortfolio }, "Key_PortfolioGroupClassificationDetails_ID_Portfolio")
                .IsUnique();

            entity.Property(e => e.IdPortfolioGroupClassificationDetails).HasColumnName("ID_PortfolioGroupClassificationDetails");

            entity.Property(e => e.IdPortfolio)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ID_Portfolio")
                .IsFixedLength();

            entity.Property(e => e.IdPortfolioGroupClassification).HasColumnName("ID_PortfolioGroupClassification");
        });

        modelBuilder.Entity<PortfolioGroupInvestmentSummary>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("PortfolioGroup_InvestmentSummary");

            entity.Property(e => e.AssetValue).HasColumnType("decimal(38, 2)");

            entity.Property(e => e.CostOfAsset).HasColumnType("decimal(38, 2)");

            entity.Property(e => e.Id).HasColumnName("ID");

            entity.Property(e => e.Id2link).HasColumnName("ID2Link");

            entity.Property(e => e.IdInvestmentType)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("ID_InvestmentType");

            entity.Property(e => e.IdPortfolioGroup).HasColumnName("ID_PortfolioGroup");

            entity.Property(e => e.Qty).HasColumnType("decimal(38, 4)");

            entity.Property(e => e.ValuationDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<PortfolioGroupValuation>(entity =>
        {
            entity.HasKey(e => e.IdPortfolioGroupValuation);

            entity.ToTable("PortfolioGroupValuation");

            entity.HasIndex(e => new { e.IdPortfolioGroupClassification, e.ValuationDate }, "Key_PortfolioGroupValuation_Unique")
                .IsUnique();

            entity.Property(e => e.IdPortfolioGroupValuation).HasColumnName("ID_PortfolioGroupValuation");

            entity.Property(e => e.BidPrice).HasColumnType("decimal(18, 4)");

            entity.Property(e => e.DayNav)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("DayNAV");

            entity.Property(e => e.DayNetIncome).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.DayYield).HasColumnType("decimal(18, 8)");

            entity.Property(e => e.IdPortfolioGroupClassification).HasColumnName("ID_PortfolioGroupClassification");

            entity.Property(e => e.MgtFeesBf)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("MgtFees_bf");

            entity.Property(e => e.MtmnetAssetValue)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("MTMNetAssetValue");

            entity.Property(e => e.NetAssetVaule).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.OfferPrice).HasColumnType("decimal(18, 4)");

            entity.Property(e => e.TotalUnits).HasColumnType("decimal(31, 4)");

            entity.Property(e => e.UnitValue).HasColumnType("decimal(18, 4)");

            entity.Property(e => e.ValuationDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<PortfolioIdentifyWith>(entity =>
        {
            entity.HasKey(e => e.IdIdentifyWith);

            entity.ToTable("PortfolioIdentifyWith");

            entity.HasIndex(e => e.IdentifyWith, "Key_PortfolioIdentifyWith_IdentifyWith")
                .IsUnique();

            entity.Property(e => e.IdIdentifyWith)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("ID_IdentifyWith");

            entity.Property(e => e.IdentifyWith)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<PortfolioIncentive>(entity =>
        {
            entity.HasKey(e => e.IdPortfolioIncentive);

            entity.ToTable("PortfolioIncentive");

            entity.Property(e => e.IdPortfolioIncentive).HasColumnName("ID_PortfolioIncentive");

            entity.Property(e => e.Amount).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.DueDate).HasColumnType("datetime");

            entity.Property(e => e.IdPortfolio).HasColumnName("ID_Portfolio");

            
                
                

            entity.Property(e => e.Narration)
                .HasMaxLength(150)
                .IsUnicode(false);

            entity.Property(e => e.PosAmount).HasColumnName("Pos_Amount");

            entity.Property(e => e.ProcessDate)
                .HasColumnType("datetime")
                .HasDefaultValueSql("(getdate())");
        });

        modelBuilder.Entity<PortfolioIntCalculator>(entity =>
        {
            entity.HasKey(e => e.IdPortfolioIntCalculator);

            entity.ToTable("PortfolioIntCalculator");

            entity.Property(e => e.IdPortfolioIntCalculator).HasColumnName("ID_PortfolioIntCalculator");

            entity.Property(e => e.Amount).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.Balance).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.BeginDate).HasColumnType("datetime");

            entity.Property(e => e.EndDate).HasColumnType("datetime");

            entity.Property(e => e.IdPortfolio).HasColumnName("ID_Portfolio");

            entity.Property(e => e.IdPortfolioAccount).HasColumnName("ID_PortfolioAccount");

            entity.Property(e => e.InterestAccrued).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.InterestRate).HasColumnType("decimal(18, 8)");

            
                
                
        });

        modelBuilder.Entity<PortfolioInterestAllocation>(entity =>
        {
            entity.HasKey(e => e.IdPortfolioInterestAllocation);

            entity.ToTable("PortfolioInterestAllocation");

            entity.Property(e => e.IdPortfolioInterestAllocation).HasColumnName("ID_PortfolioInterestAllocation");

            entity.Property(e => e.IdPortfolio).HasColumnName("ID_Portfolio");

            entity.Property(e => e.IdPortfolioInterestMaster).HasColumnName("ID_PortfolioInterestMaster");

            entity.Property(e => e.InterestAmount).HasColumnType("decimal(18, 2)");

            
                
                
        });

        modelBuilder.Entity<PortfolioInterestMaster>(entity =>
        {
            entity.HasKey(e => e.IdPortfolioInterestMaster);

            entity.ToTable("PortfolioInterestMaster");

            entity.Property(e => e.IdPortfolioInterestMaster).HasColumnName("ID_PortfolioInterestMaster");

            entity.Property(e => e.ApprovedBy)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.BeginDate).HasColumnType("datetime");

            entity.Property(e => e.BulkAccountNo)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.CaptureBy)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.CaptureDate).HasColumnType("datetime");

            entity.Property(e => e.Comments).HasColumnType("text");

            entity.Property(e => e.EndDate).HasColumnType("datetime");

            entity.Property(e => e.InterestAmount).HasColumnType("decimal(18, 2)");

            
                
                

            entity.Property(e => e.Narration)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.Property(e => e.PortfolioAccountNo)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.Status)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.ValueDate).HasColumnType("datetime");

            entity.Property(e => e.VoucherNo)
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<PortfolioInterestRate>(entity =>
        {
            entity.HasKey(e => e.IdPortfolioIntRate);

            entity.ToTable("PortfolioInterestRate");

            entity.Property(e => e.IdPortfolioIntRate).HasColumnName("ID_PortfolioIntRate");

            entity.Property(e => e.EffeciveDate).HasColumnType("datetime");

            entity.Property(e => e.IdPortfolio).HasColumnName("ID_Portfolio");

            entity.Property(e => e.InterestRate).HasColumnType("decimal(18, 8)");

            
                
                

            entity.Property(e => e.RateType)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('D')")
                .IsFixedLength();
        });

        modelBuilder.Entity<PortfolioInterestSharing>(entity =>
        {
            entity.HasKey(e => e.IdPortfolioInterestSharing);

            entity.ToTable("PortfolioInterestSharing");

            entity.Property(e => e.IdPortfolioInterestSharing).HasColumnName("ID_PortfolioInterestSharing");

            entity.Property(e => e.Amount).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.Balance).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.BeginDate).HasColumnType("datetime");

            entity.Property(e => e.EndDate).HasColumnType("datetime");

            entity.Property(e => e.IdPortfolio).HasColumnName("ID_Portfolio");

            entity.Property(e => e.IdPortfolioInterestMaster).HasColumnName("ID_PortfolioInterestMaster");

            
                
                

            entity.Property(e => e.Wac)
                .HasColumnType("decimal(31, 8)")
                .HasColumnName("WAC");
        });

        modelBuilder.Entity<PortfolioInvestmentPolicy>(entity =>
        {
            entity.HasKey(e => e.IdInvestmentPolicy);

            entity.ToTable("PortfolioInvestmentPolicy");

            entity.Property(e => e.IdInvestmentPolicy).HasColumnName("ID_InvestmentPolicy");

            entity.Property(e => e.CapturedDate).HasColumnType("datetime");

            entity.Property(e => e.Capturedby)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.Comments).HasColumnType("text");

            entity.Property(e => e.EffectiveDate).HasColumnType("datetime");

            entity.Property(e => e.ExpiryDate).HasColumnType("datetime");

            entity.Property(e => e.IdPortfolio).HasColumnName("ID_Portfolio");

            entity.Property(e => e.IdRiskProfile)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("ID_RiskProfile");

            entity.Property(e => e.LossTolerance).HasColumnType("decimal(18, 4)");

            entity.Property(e => e.MgtMode)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.NextReviewDate).HasColumnType("datetime");

            entity.Property(e => e.Objective)
                .HasMaxLength(4000)
                .IsUnicode(false);

            entity.Property(e => e.ReturnExpected).HasColumnType("decimal(18, 4)");

            entity.Property(e => e.Status)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<PortfolioInvoice>(entity =>
        {
            entity.HasKey(e => e.IdPortfolioInvoice);

            entity.ToTable("PortfolioInvoice");

            entity.HasIndex(e => e.InvoiceNo, "Key_PortfolioInvoice_InvoiceNo")
                .IsUnique();

            entity.Property(e => e.IdPortfolioInvoice).HasColumnName("ID_PortfolioInvoice");

            entity.Property(e => e.Amount).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.ApplyDate).HasColumnType("datetime");

            entity.Property(e => e.ApprovalDate).HasColumnType("datetime");

            entity.Property(e => e.ApprovedBy)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.CapturedBy)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.Comments).HasColumnType("text");

            entity.Property(e => e.Due2PenCom).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.Due2Pfa)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("Due2PFA");

            entity.Property(e => e.Due2Pfc)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("Due2PFC");

            entity.Property(e => e.GlPostPeriod)
                .HasMaxLength(6)
                .IsUnicode(false);

            entity.Property(e => e.GlpostDate)
                .HasColumnType("datetime")
                .HasColumnName("GLPostDate");

            entity.Property(e => e.IdPortfolio).HasColumnName("ID_Portfolio");

            entity.Property(e => e.IncentiveDue).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.InvoiceDate).HasColumnType("datetime");

            entity.Property(e => e.InvoiceNo)
                .HasMaxLength(20)
                .IsUnicode(false);

            
                
                

            entity.Property(e => e.Narration)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.Property(e => e.Status)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.TransactionDate).HasColumnType("datetime");

            entity.Property(e => e.VatAmount).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.VoucherNo)
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<PortfolioJointDetail>(entity =>
        {
            entity.HasKey(e => e.IdPortfolioJointDetails);

            entity.HasIndex(e => e.FullName, "Key_PortfolioJointDetails_FullName");

            entity.Property(e => e.IdPortfolioJointDetails).HasColumnName("ID_PortfolioJointDetails");

            entity.Property(e => e.Address01)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Address_01");

            entity.Property(e => e.Address02)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Address_02");

            entity.Property(e => e.DateOfBirth).HasColumnType("datetime");

            entity.Property(e => e.Email)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("email");

            entity.Property(e => e.FullName)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.Property(e => e.GsmNo)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.IdPortfolio).HasColumnName("ID_Portfolio");

            entity.Property(e => e.IdState)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("ID_State");

            
                
                

            entity.Property(e => e.Sex)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<PortfolioManagementFee>(entity =>
        {
            entity.HasKey(e => e.IdPortfolioManagementFees)
                .IsClustered(false);

            entity.HasIndex(e => new { e.IdPortfolio, e.ValueDate }, "Key_PortfolioManagementFees_Unique")
                .IsUnique()
                .IsClustered();

            entity.Property(e => e.IdPortfolioManagementFees).HasColumnName("ID_PortfolioManagementFees");

            entity.Property(e => e.Amount).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.AssetMgrAmount)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("AssetMgr_Amount");

            entity.Property(e => e.CurExRate).HasColumnType("decimal(18, 6)");

            entity.Property(e => e.CustodianAmount)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("Custodian_Amount");

            entity.Property(e => e.DailyIncome)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("Daily_Income");

            entity.Property(e => e.GlPostPeriod)
                .HasMaxLength(6)
                .IsUnicode(false);

            entity.Property(e => e.GlpostDate)
                .HasColumnType("datetime")
                .HasColumnName("GLPostDate");

            entity.Property(e => e.IdCurrency)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("ID_Currency");

            entity.Property(e => e.IdPortfolio).HasColumnName("ID_Portfolio");

            entity.Property(e => e.IdPortfolioInvoice).HasColumnName("ID_PortfolioInvoice");

            
                
                

            entity.Property(e => e.MtmMgtFees)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("MTM_MgtFees");

            entity.Property(e => e.MtmPfafees)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("MTM_PFAFees");

            entity.Property(e => e.MtmPfcfees)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("MTM_PFCFees");

            entity.Property(e => e.MtmRegfees)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("MTM_REGFees");

            entity.Property(e => e.Narration)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.Property(e => e.NetAssetValue).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.RebateAmount).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.RegulatorAmount)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("Regulator_Amount");

            entity.Property(e => e.TransactionDate).HasColumnType("datetime");

            entity.Property(e => e.ValueDate).HasColumnType("datetime");

            entity.Property(e => e.VatAmount).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.VatAmountAssetMgr)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VatAmount_AssetMgr");

            entity.Property(e => e.VatAmountCustodian)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VatAmount_Custodian");

            entity.Property(e => e.VatAmountRegulator)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VatAmount_Regulator");

            entity.Property(e => e.VoucherNo)
                .HasMaxLength(10)
                .IsUnicode(false);

            entity.HasOne(d => d.IdPortfolioNavigation)
                .WithMany(p => p.PortfolioManagementFees)
                .HasForeignKey(d => d.IdPortfolio)
                .HasConstraintName("FK_PortfolioManagementFees_Portfolio");
        });

        modelBuilder.Entity<PortfolioMandate>(entity =>
        {
            entity.HasKey(e => e.IdPortfolioMandate);

            entity.ToTable("PortfolioMandate");

            entity.Property(e => e.IdPortfolioMandate).HasColumnName("ID_PortfolioMandate");

            entity.Property(e => e.Description)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.IdPortfolio).HasColumnName("ID_Portfolio");

            
                
                

            entity.Property(e => e.PhotoFileName)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.Property(e => e.SignatureFileName)
                .HasMaxLength(100)
                .IsUnicode(false);
        });

        modelBuilder.Entity<PortfolioModelBalancing>(entity =>
        {
            entity.HasKey(e => e.IdPortfolioModelBalancing);

            entity.ToTable("PortfolioModelBalancing");

            entity.Property(e => e.IdPortfolioModelBalancing).HasColumnName("ID_PortfolioModelBalancing");

            entity.Property(e => e.ActionToTake)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.ApprovalDate).HasColumnType("datetime");

            entity.Property(e => e.ApprovedBy)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.BalancingAmount).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.BalancingDate).HasColumnType("datetime");

            entity.Property(e => e.BalancingQty).HasColumnType("decimal(24, 4)");

            entity.Property(e => e.CapturedBy)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.CashAvailable).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.ComittedCashAmount).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.Comments).HasColumnType("text");

            entity.Property(e => e.CurrentMarketValue).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.IdCustomer).HasColumnName("ID_Customer");

            entity.Property(e => e.IdPortfolio).HasColumnName("ID_Portfolio");

            entity.Property(e => e.InvestmentModule)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            
                
                

            entity.Property(e => e.QtyOwned).HasColumnType("decimal(24, 4)");

            entity.Property(e => e.SectorPercent).HasColumnType("decimal(18, 8)");

            entity.Property(e => e.SectorUnUsed).HasColumnType("decimal(18, 8)");

            entity.Property(e => e.SecurityPercent).HasColumnType("decimal(18, 8)");

            entity.Property(e => e.SecurityUnUsed).HasColumnType("decimal(18, 8)");

            entity.Property(e => e.ShareId).HasColumnName("ShareID");

            entity.Property(e => e.Status)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<PortfolioMoneyMovement>(entity =>
        {
            entity.HasKey(e => e.IdPortfolioMoneyMovement);

            entity.ToTable("PortfolioMoneyMovement");

            entity.HasIndex(e => e.Narration, "Key_PortfolioMoneyMovement_Narration");

            entity.Property(e => e.IdPortfolioMoneyMovement).HasColumnName("ID_PortfolioMoneyMovement");

            entity.Property(e => e.Amount).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.ApprovedBy)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.BankGlActNo)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.CapturedBy)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.Comments).HasColumnType("text");

            entity.Property(e => e.CurExRate).HasColumnType("decimal(18, 6)");

            entity.Property(e => e.DoNotExportToExternalGl).HasColumnName("DoNotExportToExternalGL");

            entity.Property(e => e.DocumentHyperLink).HasColumnType("text");

            entity.Property(e => e.IdCurrency)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("ID_Currency");

            entity.Property(e => e.IdInvestmentType)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("ID_InvestmentType");

            entity.Property(e => e.IdPortfolio).HasColumnName("ID_Portfolio");

            entity.Property(e => e.IdPortfolioAccount).HasColumnName("ID_PortfolioAccount");

            entity.Property(e => e.MainAccount)
                .HasMaxLength(20)
                .IsUnicode(false);

            
                
                

            entity.Property(e => e.Narration)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.Property(e => e.NoOfUnits).HasColumnType("decimal(28, 4)");

            entity.Property(e => e.ReversalId).HasColumnName("ReversalID");

            entity.Property(e => e.Status)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.TrackCode)
                .HasMaxLength(10)
                .IsUnicode(false);

            entity.Property(e => e.TransactionDate).HasColumnType("datetime");

            entity.Property(e => e.TransactionType)
                .HasMaxLength(10)
                .IsUnicode(false);

            entity.Property(e => e.ValueDate).HasColumnType("datetime");

            entity.Property(e => e.VoucherNo)
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<PortfolioMvMntTransType>(entity =>
        {
            entity.HasKey(e => new { e.TransactionType, e.IdPortfolioMovementType });

            entity.ToTable("PortfolioMvMntTransType");

            entity.HasIndex(e => e.Description, "Key_PortfolioMvMntTransType_Description")
                .IsUnique();

            entity.HasIndex(e => new { e.TransactionType, e.SfkaccountCode }, "Key_PortfolioMvMntTransType_Unique")
                .IsUnique();

            entity.Property(e => e.TransactionType)
                .HasMaxLength(10)
                .IsUnicode(false);

            entity.Property(e => e.IdPortfolioMovementType)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID_PortfolioMovementType");

            entity.Property(e => e.BankGlActNo)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.Description)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.GlActNo)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.InflowActNo)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.SfkaccountCode)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SFKAccountCode");
        });

        modelBuilder.Entity<PortfolioNavBf>(entity =>
        {
            entity.HasKey(e => e.IdPortfolioNavBf);

            entity.ToTable("PortfolioNAV_bf");

            entity.Property(e => e.IdPortfolioNavBf).HasColumnName("ID_PortfolioNAV_bf");

            entity.Property(e => e.IdPortfolio).HasColumnName("ID_Portfolio");

            
                
                

            entity.Property(e => e.Narration)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.NetAssetVaule).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.OpenDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<PortfolioNavSummary>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("Portfolio_NAV_Summary");

            entity.Property(e => e.BidPrice).HasColumnType("decimal(18, 4)");

            entity.Property(e => e.DayNav)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("DayNAV");

            entity.Property(e => e.DayNetIncome).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.DayWam)
                .HasColumnType("decimal(18, 8)")
                .HasColumnName("DayWAM");

            entity.Property(e => e.DayYield).HasColumnType("decimal(18, 8)");

            entity.Property(e => e.EquityValue).HasColumnType("decimal(38, 2)");

            entity.Property(e => e.IdPortfolio).HasColumnName("ID_Portfolio");

            entity.Property(e => e.IdPortfolioValuationHistory)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID_PortfolioValuationHistory");

            entity.Property(e => e.MgtFeesBf)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("MgtFees_bf");

            ;

            entity.Property(e => e.MtmnetAssetValue)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("MTMNetAssetValue");

            entity.Property(e => e.NetAssetVaule).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.OfferPrice).HasColumnType("decimal(18, 4)");

            entity.Property(e => e.Prov4Disposal).HasColumnType("decimal(18, 8)");

            entity.Property(e => e.TotalUnits).HasColumnType("decimal(31, 4)");

            entity.Property(e => e.UnitValue).HasColumnType("decimal(18, 4)");

            entity.Property(e => e.ValuationDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<PortfolioNavvsIndex>(entity =>
        {
            entity.HasKey(e => e.IdPortfolioPerformance);

            entity.ToTable("Portfolio_NAVvsINDEX");

            entity.HasIndex(e => e.IdBenchMark, "Key_Portfolio_NAVvsINDEX");

            entity.HasIndex(e => e.IdPortfolio, "Key_Portfolio_NAVvsINDEX_ID_Portfolio");

            entity.Property(e => e.IdPortfolioPerformance).HasColumnName("ID_PortfolioPerformance");

            entity.Property(e => e.IdBenchMark).HasColumnName("ID_BenchMark");

            entity.Property(e => e.IdPortfolio).HasColumnName("ID_Portfolio");

            
                
                

            entity.Property(e => e.ReBaseIndex)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("ReBase_Index");

            entity.Property(e => e.ReBaseNav)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("ReBase_NAV");

            entity.Property(e => e.ValueDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<PortfolioOtherFeesDetail>(entity =>
        {
            entity.HasKey(e => e.IdOtherFeesDetails);

            entity.Property(e => e.IdOtherFeesDetails).HasColumnName("ID_OtherFeesDetails");

            entity.Property(e => e.BeginAmount).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.EndAmount).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.IdOtherFeesMaster).HasColumnName("ID_OtherFeesMaster");

            entity.Property(e => e.OthFeesRate).HasColumnType("decimal(18, 8)");

            entity.HasOne(d => d.IdOtherFeesMasterNavigation)
                .WithMany(p => p.PortfolioOtherFeesDetails)
                .HasForeignKey(d => d.IdOtherFeesMaster)
                .HasConstraintName("FK_PortfolioOtherFeesDetails_PortfolioOtherFeesMaster");
        });

        modelBuilder.Entity<PortfolioOtherFeesMaster>(entity =>
        {
            entity.HasKey(e => e.IdOtherFeesMaster);

            entity.ToTable("PortfolioOtherFeesMaster");

            entity.Property(e => e.IdOtherFeesMaster).HasColumnName("ID_OtherFeesMaster");

            entity.Property(e => e.IdPortfolio).HasColumnName("ID_Portfolio");

            entity.Property(e => e.OtherFeeExpActNo)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.OtherFeePayableActNo)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.OtherFeeVatExpActNo)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.OtherFeeVatPaybleActNo)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.OtherFeesName)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.Property(e => e.OtherFeesPer)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.OtherNavType)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("OtherNAV_Type")
                .IsFixedLength();

            entity.HasOne(d => d.IdPortfolioNavigation)
                .WithMany(p => p.PortfolioOtherFeesMasters)
                .HasForeignKey(d => d.IdPortfolio)
                .HasConstraintName("FK_PortfolioOtherFeesMaster_Portfolio");
        });

        modelBuilder.Entity<PortfolioProratedFeesDetail>(entity =>
        {
            entity.HasKey(e => e.IdPortfolioProratedFeesDetails)
                .HasName("PK_PortfolioProratedFees");

            entity.Property(e => e.IdPortfolioProratedFeesDetails).HasColumnName("ID_PortfolioProratedFeesDetails");

            entity.Property(e => e.IdPortfolio).HasColumnName("ID_Portfolio");

            entity.Property(e => e.IdPortfolioProratedFeesMaster).HasColumnName("ID_PortfolioProratedFeesMaster");

            entity.Property(e => e.ManagementFees).HasColumnType("decimal(18, 8)");

            
                
                

            entity.Property(e => e.NavBegin)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("NAV_Begin");

            entity.Property(e => e.NavEnd)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("NAV_End");

            entity.Property(e => e.PcmmgtFees)
                .HasColumnType("decimal(18, 8)")
                .HasColumnName("PCMMgtFees");

            entity.Property(e => e.PfcmgtFees)
                .HasColumnType("decimal(18, 8)")
                .HasColumnName("PFCMgtFees");
        });

        modelBuilder.Entity<PortfolioProratedFeesMaster>(entity =>
        {
            entity.HasKey(e => e.IdPortfolioProratedFeesMaster);

            entity.ToTable("PortfolioProratedFeesMaster");

            entity.HasIndex(e => new { e.IdPortfolio, e.EffectiveDate }, "Key_PortfolioProratedFeesMaster_Unique")
                .IsUnique();

            entity.Property(e => e.IdPortfolioProratedFeesMaster).HasColumnName("ID_PortfolioProratedFeesMaster");

            entity.Property(e => e.EffectiveDate).HasColumnType("datetime");

            entity.Property(e => e.IdPortfolio).HasColumnName("ID_Portfolio");

            entity.Property(e => e.MgtFeesPer)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            
                
                

            entity.Property(e => e.Narration)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.PcmNavType)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("PcmNAV_Type")
                .IsFixedLength();

            entity.Property(e => e.PcmfeesPer)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("PCMFeesPer")
                .IsFixedLength();

            entity.Property(e => e.PfaNavType)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("PfaNAV_Type")
                .IsFixedLength();

            entity.Property(e => e.PfcNavType)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("PfcNAV_Type")
                .IsFixedLength();

            entity.Property(e => e.PfcfeesPer)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("PFCFeesPer")
                .IsFixedLength();
        });

        modelBuilder.Entity<PortfolioRedemptionTracking>(entity =>
        {
            entity.HasKey(e => e.IdPortfolioRedemptionTracking);

            entity.ToTable("PortfolioRedemptionTracking");

            entity.Property(e => e.IdPortfolioRedemptionTracking).HasColumnName("ID_PortfolioRedemptionTracking");

            entity.Property(e => e.CaptureDate).HasColumnType("datetime");

            entity.Property(e => e.IdPortfolioContributor).HasColumnName("ID_PortfolioContributor");

            entity.Property(e => e.IdPortfolioContributorAccount).HasColumnName("ID_PortfolioContributorAccount");

            
                
                

            entity.Property(e => e.ReceivedFromRegistraDate).HasColumnType("datetime");

            entity.Property(e => e.ResponseCode)
                .HasMaxLength(4)
                .IsUnicode(false);

            entity.Property(e => e.Send2RegistraDate).HasColumnType("datetime");

            entity.Property(e => e.SendForPaymentDate).HasColumnType("datetime");

            entity.Property(e => e.Status)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<PortfolioTransfer>(entity =>
        {
            entity.HasKey(e => e.IdPortfolioTransfer);

            entity.ToTable("PortfolioTransfer");

            entity.HasIndex(e => e.Narration, "Key_PortfolioTransfer_Narration");

            entity.Property(e => e.IdPortfolioTransfer).HasColumnName("ID_PortfolioTransfer");

            entity.Property(e => e.Amount).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.ApprovedBy)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.ApprovedDate).HasColumnType("datetime");

            entity.Property(e => e.BidPrice).HasColumnType("decimal(18, 4)");

            entity.Property(e => e.CaptureBy)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.CaptureDate).HasColumnType("datetime");

            entity.Property(e => e.Comments).HasColumnType("text");

            entity.Property(e => e.Ex2Rate).HasColumnType("decimal(18, 4)");

            entity.Property(e => e.FromBalance).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.FromIdPortfolio).HasColumnName("From_ID_Portfolio");

            entity.Property(e => e.IdDealMaster).HasColumnName("ID_DealMaster");

            entity.Property(e => e.IdInvestmentType)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("ID_InvestmentType");

            entity.Property(e => e.LoanId).HasColumnName("LoanID");

            entity.Property(e => e.Loc2Amount).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.Narration)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.Property(e => e.OfferPrice).HasColumnType("decimal(18, 4)");

            entity.Property(e => e.ReversalId).HasColumnName("ReversalID");

            entity.Property(e => e.Status)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.ToBalance).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.ToIdPortfolio).HasColumnName("To_ID_Portfolio");

            entity.Property(e => e.TransferType)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.Units2Buy).HasColumnType("decimal(24, 4)");

            entity.Property(e => e.Units2Sell).HasColumnType("decimal(24, 4)");

            entity.Property(e => e.ValueDate).HasColumnType("datetime");

            entity.Property(e => e.VoucherNo)
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<PortfolioTransferAssetList>(entity =>
        {
            entity.HasKey(e => e.IdPortfolioTransferAssetList);

            entity.ToTable("PortfolioTransferAssetList");

            entity.Property(e => e.IdPortfolioTransferAssetList).HasColumnName("ID_PortfolioTransferAssetList");

            entity.Property(e => e.AssetValue).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.FromPortfolioId).HasColumnName("From_Portfolio_ID");

            entity.Property(e => e.IdDealMaster).HasColumnName("ID_DealMaster");

            entity.Property(e => e.IdPortfolioTransfer).HasColumnName("ID_PortfolioTransfer");

            entity.Property(e => e.LoanId).HasColumnName("LoanID");

            entity.Property(e => e.ShareId).HasColumnName("ShareID");

            entity.Property(e => e.ToPortfolioId).HasColumnName("To_Portfolio_ID");

            entity.Property(e => e.TransferDate).HasColumnType("datetime");

            entity.Property(e => e.VoucherNo)
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<PortfolioTwr>(entity =>
        {
            entity.HasKey(e => e.IdPortfolioTwr);

            entity.ToTable("PortfolioTWR");

            entity.Property(e => e.IdPortfolioTwr).HasColumnName("ID_PortfolioTWR");

            entity.Property(e => e.Bmv)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("BMV");

            entity.Property(e => e.DayReturn).HasColumnType("decimal(20, 15)");

            entity.Property(e => e.Dividend).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.Emv)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("EMV");

            entity.Property(e => e.Hpr)
                .HasColumnType("decimal(20, 15)")
                .HasColumnName("HPR");

            entity.Property(e => e.Id2link).HasColumnName("ID2Link");

            entity.Property(e => e.IdAssetType)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("ID_AssetType");

            entity.Property(e => e.IdPortfolio).HasColumnName("ID_Portfolio");

            entity.Property(e => e.InvestmentClass)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.Purchase).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.Sales).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.Twr)
                .HasColumnType("decimal(31, 15)")
                .HasColumnName("TWR");

            entity.Property(e => e.ValuationDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<PortfolioUnitHistory>(entity =>
        {
            entity.HasKey(e => e.IdPortfolioUnitHistory);

            entity.ToTable("PortfolioUnitHistory");

            entity.HasIndex(e => e.IdPortfolioAccount, "Key_PortfolioUnitHistory_ID_PortfolioAccount");

            entity.Property(e => e.IdPortfolioUnitHistory).HasColumnName("ID_PortfolioUnitHistory");

            entity.Property(e => e.IdPortfolio).HasColumnName("ID_Portfolio");

            entity.Property(e => e.IdPortfolioAccount).HasColumnName("ID_PortfolioAccount");

            entity.Property(e => e.IdPortfolioDirectGldetails).HasColumnName("ID_PortfolioDirectGLDetails");

            entity.Property(e => e.MovementDate).HasColumnType("datetime");

            
                
                

            entity.Property(e => e.Narration)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.Property(e => e.UnitAmount).HasColumnType("decimal(18, 4)");

            entity.Property(e => e.UnitPrice).HasColumnType("decimal(18, 4)");

            entity.Property(e => e.ValueDate).HasColumnType("datetime");

            entity.HasOne(d => d.IdPortfolioNavigation)
                .WithMany(p => p.PortfolioUnitHistories)
                .HasForeignKey(d => d.IdPortfolio)
                .HasConstraintName("FK_PortfolioUnitHistory_Portfolio");
        });

        modelBuilder.Entity<PortfolioUnitSwap>(entity =>
        {
            entity.HasKey(e => e.IdUnitSwap);

            entity.ToTable("PortfolioUnitSwap");

            entity.Property(e => e.IdUnitSwap).HasColumnName("ID_UnitSwap");

            entity.Property(e => e.ApprovedBy)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.BidPrice).HasColumnType("decimal(18, 4)");

            entity.Property(e => e.CapturedBy)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.Comments).HasColumnType("text");

            entity.Property(e => e.FromPortfolioId).HasColumnName("From_Portfolio_ID");

            entity.Property(e => e.FromQtyBf)
                .HasColumnType("decimal(28, 4)")
                .HasColumnName("FromQtyBF");

            entity.Property(e => e.FromQtyCf)
                .HasColumnType("decimal(28, 4)")
                .HasColumnName("FromQtyCF");

            entity.Property(e => e.GlpostDate)
                .HasColumnType("datetime")
                .HasColumnName("GLPostDate");

            entity.Property(e => e.IdPortfolioContributor).HasColumnName("ID_PortfolioContributor");

            entity.Property(e => e.MoveToIdPortfolioContributor).HasColumnName("MoveTo_ID_PortfolioContributor");

            
                
                

            entity.Property(e => e.Narration)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.OfferPrice).HasColumnType("decimal(18, 4)");

            entity.Property(e => e.ReversalId).HasColumnName("ReversalID");

            entity.Property(e => e.Status)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.ToPortfolioId).HasColumnName("To_Portfolio_ID");

            entity.Property(e => e.ToQtyBf)
                .HasColumnType("decimal(28, 4)")
                .HasColumnName("ToQtyBF");

            entity.Property(e => e.ToQtyCf)
                .HasColumnType("decimal(28, 4)")
                .HasColumnName("ToQtyCF");

            entity.Property(e => e.TransferDate).HasColumnType("datetime");

            entity.Property(e => e.TransferFees).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.TransferInQty).HasColumnType("decimal(28, 4)");

            entity.Property(e => e.TransferInValue).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.TransferOutQty).HasColumnType("decimal(28, 4)");

            entity.Property(e => e.TransferOutValue).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.VoucherNo)
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<PortfolioValuationHistory>(entity =>
        {
            entity.HasKey(e => e.IdPortfolioValuationHistory)
                .IsClustered(false);

            entity.ToTable("PortfolioValuationHistory");

            entity.HasIndex(e => new { e.IdPortfolio, e.ValuationDate }, "Key_PortfolioValuationHistory_Unique")
                .IsUnique()
                .IsClustered();

            entity.Property(e => e.IdPortfolioValuationHistory).HasColumnName("ID_PortfolioValuationHistory");

            entity.Property(e => e.BidPrice).HasColumnType("decimal(18, 4)");

            entity.Property(e => e.DayNav)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("DayNAV");

            entity.Property(e => e.DayNetIncome).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.DayWam)
                .HasColumnType("decimal(18, 8)")
                .HasColumnName("DayWAM");

            entity.Property(e => e.DayYield).HasColumnType("decimal(18, 8)");

            entity.Property(e => e.IdPortfolio).HasColumnName("ID_Portfolio");

            entity.Property(e => e.MgtFeesBf)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("MgtFees_bf");

            
                
                

            entity.Property(e => e.MtmnetAssetValue)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("MTMNetAssetValue");

            entity.Property(e => e.NetAssetVaule).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.OfferPrice).HasColumnType("decimal(18, 4)");

            entity.Property(e => e.TotalUnits).HasColumnType("decimal(31, 4)");

            entity.Property(e => e.UnitValue).HasColumnType("decimal(18, 4)");

            entity.Property(e => e.ValuationDate).HasColumnType("datetime");

            entity.HasOne(d => d.IdPortfolioNavigation)
                .WithMany(p => p.PortfolioValuationHistories)
                .HasForeignKey(d => d.IdPortfolio)
                .HasConstraintName("FK_PortfolioValuationHistory_Portfolio");
        });

        modelBuilder.Entity<PortoflioCompliance>(entity =>
        {
            entity.HasKey(e => e.IdPortofolioCompliance);

            entity.ToTable("PortoflioCompliance");

            entity.HasIndex(e => new { e.IdPortfolio, e.IdInvestmentType }, "Key_PortoflioCompliance_Unique")
                .IsUnique();

            entity.Property(e => e.IdPortofolioCompliance).HasColumnName("ID_PortofolioCompliance");

            entity.Property(e => e.AddOrSubtract).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.IdInvestmentType)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("ID_InvestmentType");

            entity.Property(e => e.IdPortfolio).HasColumnName("ID_Portfolio");

            entity.Property(e => e.InvPercent).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.MaxInvPercent).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.MinInvPercent).HasColumnType("decimal(18, 2)");

            
                
                
        });

        modelBuilder.Entity<PostDate>(entity =>
        {
            entity.ToTable("PostDate");

            entity.Property(e => e.PostDateId).HasColumnName("PostDateID");

            entity.Property(e => e.BeginDate).HasColumnType("datetime");

            entity.Property(e => e.EndDate).HasColumnType("datetime");

            
                
                
        });

        modelBuilder.Entity<Preference>(entity =>
        {
            entity.HasKey(e => e.IdPreferences);

            entity.Property(e => e.IdPreferences).HasColumnName("ID_Preferences");

            entity.Property(e => e.Address01)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.Property(e => e.Address02)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.Property(e => e.AuthPassWord)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.AuthUser)
                .HasMaxLength(100)
                .IsUnicode(false);


            entity.Property(e => e.AutoPost2Gl).HasColumnName("AutoPost2GL");


            entity.Property(e => e.BrokerPayable2ActNo)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.BrokerPayableActNo)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.BrokerReceivable2ActNo)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.BrokerReceivableActNo)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.Cash1AccountNo)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.Cash2AccountNo)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.ClosedPfa).HasColumnName("ClosedPFA");

            entity.Property(e => e.CompanyName)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.Property(e => e.ConfigSystemFor)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('D')")
                .IsFixedLength()
                .HasComment("");


            entity.Property(e => e.CotRate).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.Deposit2BrokerActNo)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.DoNotPost2GlforPortfolioMovement).HasColumnName("DoNotPost2GLForPortfolioMovement");

            entity.Property(e => e.EnforceMmarketWam).HasColumnName("EnforceMMarketWAM");

            entity.Property(e => e.FeesIncomeActNo)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.FeesIncomeActNoCcenter)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("FeesIncomeActNo_CCenter");

            entity.Property(e => e.FinYearBegin)
                .HasMaxLength(3)
                .IsUnicode(false);

            entity.Property(e => e.Gl2moneytorFolder)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("GL2MoneytorFolder");

            entity.Property(e => e.GlexportFile)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("GLExportFile");

            entity.Property(e => e.Glsoftware)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("GLSoftware");

            entity.Property(e => e.Gsm1stThreeDigit)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("GSM1stThreeDigit");

            entity.Property(e => e.GsmnumberLenght).HasColumnName("GSMNumberLenght");

            entity.Property(e => e.IdApplication)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("ID_Application");

            entity.Property(e => e.IdHomeBranch)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("ID_HomeBranch");

            entity.Property(e => e.IdLocalCountry)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("ID_LocalCountry");

            entity.Property(e => e.IdLocalCurrency)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("ID_LocalCurrency");

            entity.Property(e => e.IdLocation)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("ID_Location");

            entity.Property(e => e.IdPfcState)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("ID_PfcState");

            entity.Property(e => e.IdProductLine)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("ID_ProductLine");

            entity.Property(e => e.IdState)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("ID_State");

            entity.Property(e => e.Ifrsvaluation).HasColumnName("IFRSValuation");

            entity.Property(e => e.IgnoreTransCostDate).HasColumnType("datetime");

            entity.Property(e => e.IgnoreWtaxDate).HasColumnType("datetime");

            entity.Property(e => e.IntRecableActNo)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.IntRecableActNoCcenter)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("IntRecableActNo_CCenter");


            entity.Property(e => e.Logo).HasColumnType("image");

            entity.Property(e => e.MailType)
                .HasMaxLength(4)
                .IsUnicode(false);

            entity.Property(e => e.MailingList)
                .HasMaxLength(1024)
                .IsUnicode(false);

            entity.Property(e => e.MaxMmarketWam)
                .HasColumnType("decimal(18, 8)")
                .HasColumnName("MaxMMarketWAM");

            entity.Property(e => e.MinStampDutyAmount).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.MinimumDaysInPeriodB4fees).HasColumnName("MinimumDaysInPeriodB4Fees");

            entity.Property(e => e.Money4LodgementActNo)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.Money4LodgementActNoCcenter)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("Money4LodgementActNo_CCenter");

            entity.Property(e => e.Money4PaymentActNo)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.Money4PaymentActNoCcenter)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("Money4PaymentActNo_CCenter");

            entity.Property(e => e.MoneyBookDatabaseName)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.NextFeesDeductionDate).HasColumnType("datetime");

            entity.Property(e => e.OtherIncomeActNo)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.OtherIncomeActNoCcenter)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("OtherIncomeActNo_CCenter");

            entity.Property(e => e.PayOutViaIsignProcess).HasColumnName("PayOutViaISignProcess");

            entity.Property(e => e.PayableWithTaxActNo)
                .HasMaxLength(20)
                .IsUnicode(false);


            entity.Property(e => e.Pfa2PfcFolder)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.PfaCode)
                .HasMaxLength(10)
                .IsUnicode(false);

            entity.Property(e => e.Pfc2PfaFolder)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.PfcAddress01)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.Property(e => e.PfcAddress02)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.Property(e => e.PfcBankCode)
                .HasMaxLength(10)
                .IsUnicode(false);

            entity.Property(e => e.PfcContact)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.Property(e => e.PfcEmail)
                .HasMaxLength(150)
                .IsUnicode(false);

            entity.Property(e => e.PfcName)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.Property(e => e.PfcTelephones)
                .HasMaxLength(100)
                .IsUnicode(false);


            entity.Property(e => e.PickGlfromExt).HasColumnName("PickGLFromEXT");


            entity.Property(e => e.Post2Gl).HasColumnName("Post2GL");

            entity.Property(e => e.PostTbillsMark2Market).HasColumnName("PostTBillsMark2Market");

            entity.Property(e => e.Provision4LiquidationRate).HasColumnType("decimal(18, 8)");


            entity.Property(e => e.RecogniseEquityOn)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.ReplyToAddress)
                .HasMaxLength(150)
                .IsUnicode(false);

            entity.Property(e => e.ReportPayRecAbleInValutaion).HasColumnName("ReportPayRec_ableInValutaion");

            entity.Property(e => e.RequireGsmNumber).HasColumnName("RequireGSM_Number");

            entity.Property(e => e.ReturnChqCharge).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.SecureEmailAlways).HasColumnName("SecureEmail_Always");

            entity.Property(e => e.SecureEmailStartTls).HasColumnName("SecureEmail_StartTLS");

            entity.Property(e => e.SenderAddress)
                .HasMaxLength(150)
                .IsUnicode(false);

            entity.Property(e => e.SenderName)
                .HasMaxLength(150)
                .IsUnicode(false);

            entity.Property(e => e.ShortCompanyName)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.Smtphost)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SMTPHost");

            entity.Property(e => e.Smtpport)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("SMTPPort");

            entity.Property(e => e.StampDutyAmount).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.StampDutyGlactNo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("StampDutyGLActNo");

            entity.Property(e => e.StampDutyGlactNoCcenter)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("StampDutyGLActNo_CCenter");

            entity.Property(e => e.StockBrokerTableName)
                .HasMaxLength(50)
                .IsUnicode(false);


            entity.Property(e => e.UnitValueFolder)
                .HasMaxLength(50)
                .IsUnicode(false);
            
            entity.Property(e => e.VatRate).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.WebSite)
                .HasMaxLength(150)
                .IsUnicode(false);

            entity.Property(e => e.WithTaxRate).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.WitholdTaxGlActNo)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.WitholdTaxGlActNoCcenter)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("WitholdTaxGlActNo_CCenter");

            entity.Property(e => e.XmlAuthorisedSignatory)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.Property(e => e.XmlexportPath)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("XMLExportPath");
        });

        modelBuilder.Entity<PriceIndex>(entity =>
        {
            entity.HasNoKey();

            entity.ToTable("Price_Index");

            entity.Property(e => e.Col001)
                .HasMaxLength(8000)
                .IsUnicode(false);

            entity.Property(e => e.Col002)
                .HasMaxLength(8000)
                .IsUnicode(false);

            entity.Property(e => e.Col003)
                .HasMaxLength(8000)
                .IsUnicode(false);

            entity.Property(e => e.Id)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID");
        });

        modelBuilder.Entity<Pricelist>(entity =>
        {
            entity.HasNoKey();

            entity.ToTable("pricelist");

            entity.Property(e => e.Change)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("change");

            entity.Property(e => e.Dtedate)
                .HasColumnType("datetime")
                .HasColumnName("dtedate");

            entity.Property(e => e.High)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("high");

            entity.Property(e => e.Low)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("low");

            entity.Property(e => e.Pclose)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("pclose");

            entity.Property(e => e.Popen)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("popen");

            entity.Property(e => e.Symbol)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("symbol");
        });

        modelBuilder.Entity<ProfLossChange>(entity =>
        {
            entity.HasNoKey();

            entity.ToTable("ProfLossChange");

            entity.Property(e => e.IdLnTerminate).HasColumnName("ID_LnTerminate");

            entity.Property(e => e.NewProfLoss)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("New_ProfLoss");

            entity.Property(e => e.OldProfLoss)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("Old_ProfLoss");
        });

        modelBuilder.Entity<ProffService>(entity =>
        {
            entity.HasKey(e => e.Sncode);

            entity.Property(e => e.Sncode).HasColumnName("SNCode");

            entity.Property(e => e.DAte)
                .HasColumnType("datetime")
                .HasColumnName("D_ate");

            entity.Property(e => e.EmailAddy)
                .HasMaxLength(30)
                .IsUnicode(false);

            entity.Property(e => e.FullName)
                .HasMaxLength(30)
                .IsUnicode(false);

            
                
                

            entity.Property(e => e.PfaCode)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("PFA_Code");

            entity.Property(e => e.PfaName)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("PFA_Name");

            entity.Property(e => e.PhyAddy)
                .HasMaxLength(30)
                .IsUnicode(false);

            entity.Property(e => e.PostAddy)
                .HasMaxLength(30)
                .IsUnicode(false);

            entity.Property(e => e.Servicetype)
                .HasMaxLength(30)
                .IsUnicode(false);

            entity.Property(e => e.Telephone)
                .HasMaxLength(30)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QuartlyStatement>(entity =>
        {
            entity.HasKey(e => e.Sncode);

            entity.ToTable("QuartlyStatement");

            entity.Property(e => e.Sncode).HasColumnName("SNCode");

            entity.Property(e => e.DispatchMean)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("Dispatch_Mean");

            
                
                

            entity.Property(e => e.OrgName)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.Remarks)
                .HasMaxLength(30)
                .IsUnicode(false);

            entity.Property(e => e.RsaNumbers).HasColumnName("RSA_Numbers");

            entity.Property(e => e.RsaNumbersSent).HasColumnName("RSA_Numbers_Sent");
        });

        modelBuilder.Entity<QvCustomerMaster>(entity =>
        {
            entity.HasNoKey();

            entity.ToTable("QV_CustomerMaster");

            entity.Property(e => e.CompanyName)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.Property(e => e.IdQvCustomerMaster).HasColumnName("ID_QV_CustomerMaster");
        });

        modelBuilder.Entity<RatingEngine>(entity =>
        {
            entity.HasKey(e => e.IdRatingEngine);

            entity.ToTable("RatingEngine");

            entity.HasIndex(e => e.Rating, "Key_RatingEngine_Rating")
                .IsUnique();

            entity.Property(e => e.IdRatingEngine).HasColumnName("ID_RatingEngine");

            entity.Property(e => e.BondsMaxRate).HasColumnType("decimal(18, 4)");

            entity.Property(e => e.ComplianceBasedOn)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.EquityMaxRate).HasColumnType("decimal(18, 4)");

            entity.Property(e => e.MoneyMarketMaxRate).HasColumnType("decimal(18, 4)");

            
                
                

            entity.Property(e => e.Rating)
                .HasMaxLength(10)
                .IsUnicode(false);

            entity.Property(e => e.RealEstateMaxRate).HasColumnType("decimal(18, 4)");
        });

        modelBuilder.Entity<RealEstateGlextract>(entity =>
        {
            entity.HasKey(e => e.IdRealEstateGlextract)
                .HasName("PK_RealEstate2Moneytor");

            entity.ToTable("RealEstateGLExtract");

            entity.Property(e => e.IdRealEstateGlextract).HasColumnName("ID_RealEstateGLExtract");

            entity.Property(e => e.IdCurrency)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("ID_Currency");

            entity.Property(e => e.IdInvestmentType)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("ID_InvestmentType");

            entity.Property(e => e.IdPortfolio).HasColumnName("ID_Portfolio");

            
                
                

            entity.Property(e => e.Real1ActNo)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.Real1ActNoCcenter)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("Real1ActNo_CCenter");

            entity.Property(e => e.Real2ActNo)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.Real2ActNoCcenter)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("Real2ActNo_CCenter");

            entity.Property(e => e.RealEstateName)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.Property(e => e.RealEstateType)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<RealEstateGlextractList>(entity =>
        {
            entity.HasKey(e => e.IdRealEstateGlextractList);

            entity.ToTable("RealEstateGLExtractList");

            entity.Property(e => e.IdRealEstateGlextractList).HasColumnName("ID_RealEstateGLExtractList");

            entity.Property(e => e.AccountNo)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.AccountNoCcenter)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("AccountNo_CCenter");

            entity.Property(e => e.IdRealEstateGlextract).HasColumnName("ID_RealEstateGLExtract");
        });

        modelBuilder.Entity<Receipt>(entity =>
        {
            entity.HasKey(e => e.IdReceipt);

            entity.ToTable("Receipt");

            entity.HasIndex(e => new { e.IdDealMaster, e.Valuedate }, "Key_Receipt_Speed01");

            entity.HasIndex(e => e.Valuedate, "Key_Receipt_Speed02");

            entity.HasIndex(e => new { e.IdDealMaster, e.ReceiptType, e.Status, e.Valuedate }, "Key_Receipt_SpeedUp01");

            entity.HasIndex(e => e.Valuedate, "Key_Receipt_ValueDate");

            entity.HasIndex(e => e.Valuedate, "Receipt_Speedup");

            entity.Property(e => e.IdReceipt).HasColumnName("ID_Receipt");

            entity.Property(e => e.Amount).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.Being)
                .HasMaxLength(150)
                .IsUnicode(false);

            entity.Property(e => e.CapturedBy)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.CheqNo)
                .HasMaxLength(10)
                .IsUnicode(false);

            entity.Property(e => e.DueDate).HasColumnType("datetime");

            entity.Property(e => e.ExtraInterest).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.GlPostPeriod)
                .HasMaxLength(6)
                .IsUnicode(false);

            entity.Property(e => e.GlpostDate)
                .HasColumnType("datetime")
                .HasColumnName("GLPostDate");

            entity.Property(e => e.IdBankAccount)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("ID_BankAccount");

            entity.Property(e => e.IdDealMaster).HasColumnName("ID_DealMaster");

            entity.Property(e => e.IdDealTerminate).HasColumnName("ID_DealTerminate");

            entity.Property(e => e.IdDealTerminateTracker).HasColumnName("ID_DealTerminate_Tracker");

            entity.Property(e => e.Interest).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.InterestAdjustment).HasColumnType("decimal(18, 2)");

            
                
                

            entity.Property(e => e.Principal).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.ProfitLoss).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.ReceiptFrom)
                .HasMaxLength(150)
                .IsUnicode(false);

            entity.Property(e => e.ReceiptNo)
                .HasMaxLength(10)
                .IsUnicode(false);

            entity.Property(e => e.ReceiptType)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.ReversalDate).HasColumnType("datetime");

            entity.Property(e => e.ReversalId).HasColumnName("ReversalID");

            entity.Property(e => e.SettlementDate).HasColumnType("datetime");

            entity.Property(e => e.SourceBankId)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("SourceBankID");

            entity.Property(e => e.SourceLocation)
                .HasMaxLength(10)
                .IsUnicode(false);

            entity.Property(e => e.Status)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.TransactionDate).HasColumnType("datetime");

            entity.Property(e => e.Utid).HasColumnName("UTID");

            entity.Property(e => e.Valuedate).HasColumnType("datetime");

            entity.Property(e => e.VoucherNo)
                .HasMaxLength(10)
                .IsUnicode(false);

            entity.Property(e => e.WithHoldTax).HasColumnType("decimal(18, 2)");
        });

        modelBuilder.Entity<Receipt18072008>(entity =>
        {
            entity.HasNoKey();

            entity.ToTable("Receipt18072008");

            entity.Property(e => e.Amount).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.Being)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.Property(e => e.CheqNo)
                .HasMaxLength(10)
                .IsUnicode(false);

            entity.Property(e => e.DueDate).HasColumnType("datetime");

            entity.Property(e => e.GlPostPeriod)
                .HasMaxLength(6)
                .IsUnicode(false);

            entity.Property(e => e.GlpostDate)
                .HasColumnType("datetime")
                .HasColumnName("GLPostDate");

            entity.Property(e => e.IdBankAccount)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("ID_BankAccount");

            entity.Property(e => e.IdDealMaster).HasColumnName("ID_DealMaster");

            entity.Property(e => e.IdDealTerminate).HasColumnName("ID_DealTerminate");

            entity.Property(e => e.IdReceipt)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID_Receipt");

            entity.Property(e => e.Interest).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.InterestAdjustment).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.Principal).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.ReceiptFrom)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.ReceiptNo)
                .HasMaxLength(10)
                .IsUnicode(false);

            entity.Property(e => e.ReceiptType)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.ReversalDate).HasColumnType("datetime");

            entity.Property(e => e.ReversalId).HasColumnName("ReversalID");

            entity.Property(e => e.SettlementDate).HasColumnType("datetime");

            entity.Property(e => e.SourceBankId)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("SourceBankID");

            entity.Property(e => e.SourceLocation)
                .HasMaxLength(10)
                .IsUnicode(false);

            entity.Property(e => e.Status)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.TransactionDate).HasColumnType("datetime");

            entity.Property(e => e.Valuedate).HasColumnType("datetime");

            entity.Property(e => e.VoucherNo)
                .HasMaxLength(10)
                .IsUnicode(false);

            entity.Property(e => e.WithHoldTax).HasColumnType("decimal(18, 2)");
        });

        modelBuilder.Entity<ReceiptAllocation>(entity =>
        {
            entity.HasKey(e => e.IdReceiptAllocation);

            entity.ToTable("ReceiptAllocation");

            entity.Property(e => e.IdReceiptAllocation).HasColumnName("ID_ReceiptAllocation");

            entity.Property(e => e.Amount).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.ExtraInterest).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.IdPortfolio).HasColumnName("ID_Portfolio");

            entity.Property(e => e.IdReceipt).HasColumnName("ID_Receipt");

            entity.Property(e => e.Interest).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.InterestAdjustment).HasColumnType("decimal(18, 2)");

            
                
                

            entity.Property(e => e.Principal).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.ProfitLoss).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.ValueDate).HasColumnType("datetime");

            entity.Property(e => e.WithHoldTax).HasColumnType("decimal(18, 2)");
        });

        modelBuilder.Entity<ReferedByList>(entity =>
        {
            entity.HasKey(e => e.IdReferedByBranch);

            entity.ToTable("ReferedByList");

            entity.HasIndex(e => e.ReferedByBranch, "Key_ReferedByList_ReferedByBranch")
                .IsUnique();

            entity.Property(e => e.IdReferedByBranch)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ID_ReferedByBranch");

            
                
                

            entity.Property(e => e.ReferedByBranch)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Registra>(entity =>
        {
            entity.HasKey(e => e.RegistrarId)
                .HasName("KeyRegistrarID");

            entity.ToTable("Registra");

            entity.HasIndex(e => e.Name, "KeyName2")
                .IsUnique();

            entity.Property(e => e.RegistrarId).HasColumnName("RegistrarID");

            entity.Property(e => e.Address2)
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.Adress1)
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.Contact)
                .HasMaxLength(20)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.Email)
                .HasMaxLength(40)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.FaxNumber)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();

            
                
                

            entity.Property(e => e.Name)
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.Telephone1)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.Telephone2)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<RegistrarResponseCode>(entity =>
        {
            entity.HasKey(e => e.IdResponseCode);

            entity.ToTable("RegistrarResponseCode");

            entity.HasIndex(e => e.ResponseCode, "Key_RegistrarResponseCode_ResponseCode")
                .IsUnique();

            entity.Property(e => e.IdResponseCode)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("ID_ResponseCode");

            
                
                

            entity.Property(e => e.ResponseCode)
                .HasMaxLength(100)
                .IsUnicode(false);
        });

        modelBuilder.Entity<RegulatorCompliance>(entity =>
        {
            entity.HasKey(e => e.IdRegulatorCompliance);

            entity.ToTable("RegulatorCompliance");

            entity.HasIndex(e => new { e.IdPortfolio, e.IdVariableAssetClass }, "Key_RegulatorCompliance_PortfolioVarAssetClass")
                .IsUnique();

            entity.Property(e => e.IdRegulatorCompliance).HasColumnName("ID_RegulatorCompliance");

            entity.Property(e => e.Arrangement)
                .HasMaxLength(2)
                .IsUnicode(false);

            entity.Property(e => e.IdPortfolio).HasColumnName("ID_Portfolio");

            entity.Property(e => e.IdVariableAssetClass)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("ID_VariableAssetClass");

            entity.Property(e => e.InvestmentClass)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.IssueBasedOn)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.IssuerBasedOn)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.MaxPerIssue).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.MaxPerIssuer).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.RegulatoryMax).HasColumnType("decimal(18, 2)");
        });

        modelBuilder.Entity<RelationshipManager>(entity =>
        {
            entity.HasKey(e => e.IdRelationshipManager);

            entity.ToTable("RelationshipManager");

            entity.HasIndex(e => e.RelationshipManager1, "Key_RelationshipManager_RelationshipManager")
                .IsUnique();

            entity.Property(e => e.IdRelationshipManager)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("ID_RelationshipManager");

            entity.Property(e => e.Email)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.Property(e => e.Gsm)
                .HasMaxLength(50)
                .IsUnicode(false);

            
                
                

            entity.Property(e => e.RelationshipManager1)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("RelationshipManager");

            entity.Property(e => e.Telephone)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Report2EmailDetail>(entity =>
        {
            entity.HasKey(e => e.IdReport2EmailDetails);

            entity.Property(e => e.IdReport2EmailDetails).HasColumnName("ID_Report2EmailDetails");

            entity.Property(e => e.IdReport2EmailMaster).HasColumnName("ID_Report2EmailMaster");

            
                
                

            entity.Property(e => e.ParaValue)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.Property(e => e.ParamenterType)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.ParameterName)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Report2EmailLog>(entity =>
        {
            entity.HasKey(e => e.IdReport2EmailLog);

            entity.ToTable("Report2EmailLog");

            entity.HasIndex(e => e.PdfFileName, "Key_Report2EmailLog_FileName");

            entity.HasIndex(e => e.IdPortfoilio, "Key_Report2EmailLog_ID_Portfolo");

            entity.HasIndex(e => e.IdPortfolioContributor, "Key_Report2EmailLog_ID_PortfoloContributor");

            entity.HasIndex(e => e.Status, "Key_Report2EmailLog_Status");

            entity.Property(e => e.IdReport2EmailLog).HasColumnName("ID_Report2EmailLog");

            entity.Property(e => e.BatchNo)
                .HasMaxLength(10)
                .IsUnicode(false);

            entity.Property(e => e.Comments).HasColumnType("text");

            entity.Property(e => e.CreatedBy)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.CreationDate).HasColumnType("datetime");

            entity.Property(e => e.IdPortfoilio).HasColumnName("ID_Portfoilio");

            entity.Property(e => e.IdPortfolioContributor).HasColumnName("ID_PortfolioContributor");

            
                
                

            entity.Property(e => e.PdfFileName)
                .HasMaxLength(150)
                .IsUnicode(false);

            entity.Property(e => e.ReportId).HasColumnName("ReportID");

            entity.Property(e => e.SentBy)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.SentDate).HasColumnType("datetime");

            entity.Property(e => e.Status)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.Subject)
                .HasMaxLength(150)
                .IsUnicode(false);

            entity.Property(e => e.Ucid).HasColumnName("UCID");
        });

        modelBuilder.Entity<Report2EmailMaster>(entity =>
        {
            entity.HasKey(e => e.IdReport2EmailMaster);

            entity.ToTable("Report2EmailMaster");

            entity.Property(e => e.IdReport2EmailMaster).HasColumnName("ID_Report2EmailMaster");

            entity.Property(e => e.MailBody).HasColumnType("text");

            entity.Property(e => e.MailSubject)
                .HasMaxLength(50)
                .IsUnicode(false);

            
                
                

            entity.Property(e => e.ReportId).HasColumnName("ReportID");
        });

        modelBuilder.Entity<ReportBatchMaster>(entity =>
        {
            entity.HasKey(e => e.IdReportBatchMaster);

            entity.ToTable("ReportBatchMaster");

            entity.Property(e => e.IdReportBatchMaster).HasColumnName("ID_ReportBatchMaster");

            entity.Property(e => e.BatchNo)
                .HasMaxLength(10)
                .IsUnicode(false);

            entity.Property(e => e.CreatedBy)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.Description)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.Property(e => e.SentBy)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Requisition>(entity =>
        {
            entity.HasKey(e => e.IdRequisition);

            entity.ToTable("Requisition");

            entity.HasIndex(e => e.IdDealMaster, "FK_Requisition_DealMaster");

            entity.HasIndex(e => e.LoanId, "FK_Requisition_LoanID");

            entity.HasIndex(e => e.BrokerId, "Key_Requisition_BrokerID");

            entity.HasIndex(e => e.RequestDate, "Key_Requisition_RequestDate");

            entity.Property(e => e.IdRequisition).HasColumnName("ID_Requisition");

            entity.Property(e => e.Amount).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.Being)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.Property(e => e.BrokerId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("BrokerID");

            entity.Property(e => e.CapturedBy)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.GlPostPeriod)
                .HasMaxLength(6)
                .IsUnicode(false);

            entity.Property(e => e.GlpostDate)
                .HasColumnType("datetime")
                .HasColumnName("GLPostDate");

            entity.Property(e => e.IdDealMaster).HasColumnName("ID_DealMaster");

            entity.Property(e => e.IdDealTerminateTracker).HasColumnName("ID_DealTerminate_Tracker");

            entity.Property(e => e.LoanId).HasColumnName("LoanID");

            
                
                

            entity.Property(e => e.Payee)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.RequestDate).HasColumnType("datetime");

            entity.Property(e => e.RequestType)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.ReversalId).HasColumnName("ReversalID");

            entity.Property(e => e.SettlementDate).HasColumnType("datetime");

            entity.Property(e => e.Status)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.Utid).HasColumnName("UTID");

            entity.Property(e => e.VoucherNo)
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<RequisitionAllocation>(entity =>
        {
            entity.HasKey(e => e.IdRequisitionAllocation);

            entity.ToTable("RequisitionAllocation");

            entity.Property(e => e.IdRequisitionAllocation).HasColumnName("ID_RequisitionAllocation");

            entity.Property(e => e.Amount).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.Commision).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.IdPortfolio).HasColumnName("ID_Portfolio");

            entity.Property(e => e.IdRequisition).HasColumnName("ID_Requisition");

            
                
                

            entity.Property(e => e.ValueDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<RiskProfilerDetail>(entity =>
        {
            entity.HasKey(e => e.IdRiskProfilerDetail);

            entity.HasIndex(e => new { e.IdRiskProfilerMaster, e.AnswerCode }, "FK_RiskProfilerDetails_AnswerCode")
                .IsUnique();

            entity.Property(e => e.IdRiskProfilerDetail).HasColumnName("ID_RiskProfilerDetail");

            entity.Property(e => e.Answer)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.AnswerCode)
                .HasMaxLength(5)
                .IsUnicode(false);

            entity.Property(e => e.IdRiskProfilerMaster).HasColumnName("ID_RiskProfilerMaster");

            
                
                

            entity.Property(e => e.RiskFactor).HasColumnType("decimal(18, 0)");

            entity.Property(e => e.TimingFactor).HasColumnType("decimal(18, 0)");
        });

        modelBuilder.Entity<RiskProfilerMaster>(entity =>
        {
            entity.HasKey(e => e.IdRiskProfilerMaster);

            entity.ToTable("RiskProfilerMaster");

            entity.HasIndex(e => e.QuestionCode, "FK_RiskProfilerMaster_QuestionCode")
                .IsUnique();

            entity.Property(e => e.IdRiskProfilerMaster).HasColumnName("ID_RiskProfilerMaster");

            entity.Property(e => e.AnswerControl)
                .HasMaxLength(15)
                .IsUnicode(false);

            
                
                

            entity.Property(e => e.Question)
                .HasMaxLength(200)
                .IsUnicode(false);

            entity.Property(e => e.QuestionCode)
                .HasMaxLength(5)
                .IsUnicode(false);

            entity.Property(e => e.QuestionImage)
                .HasMaxLength(255)
                .IsUnicode(false);
        });

        modelBuilder.Entity<RiskProfilerTest>(entity =>
        {
            entity.HasKey(e => e.IdRiskProfilerTest);

            entity.ToTable("RiskProfilerTest");

            entity.HasIndex(e => new { e.IdPortfolio, e.IdRiskProfilerMaster, e.IdRiskProfilerDetail }, "FK_RiskProfilerTest_PortMaster")
                .IsUnique();

            entity.Property(e => e.IdRiskProfilerTest).HasColumnName("ID_RiskProfilerTest");

            entity.Property(e => e.AnswerCode)
                .HasMaxLength(5)
                .IsUnicode(false);

            entity.Property(e => e.IdPortfolio).HasColumnName("ID_Portfolio");

            entity.Property(e => e.IdRiskProfilerDetail).HasColumnName("ID_RiskProfilerDetail");

            entity.Property(e => e.IdRiskProfilerMaster).HasColumnName("ID_RiskProfilerMaster");

            
                
                

            entity.Property(e => e.RiskFactor).HasColumnType("decimal(18, 0)");

            entity.Property(e => e.TimingFactor).HasColumnType("decimal(18, 0)");
        });

        modelBuilder.Entity<RiskType>(entity =>
        {
            entity.HasKey(e => e.IdRiskType);

            entity.ToTable("RiskType");

            entity.HasIndex(e => e.IdRiskType, "Key_RiskType_Name")
                .IsUnique();

            entity.Property(e => e.IdRiskType)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("ID_RiskType");

            entity.Property(e => e.RiskTypeName)
                .HasMaxLength(150)
                .IsUnicode(false);
        });

        modelBuilder.Entity<RoaAlloc>(entity =>
        {
            entity.ToTable("RoaAlloc");

            entity.HasIndex(e => new { e.EndDate, e.PortfolioId, e.ExhibitId }, "KeyRoaAlocYearEnd")
                .IsUnique();

            entity.Property(e => e.RoaAllocId).HasColumnName("RoaAllocID");

            entity.Property(e => e.ActualAmount).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.EndDate).HasColumnType("datetime");

            entity.Property(e => e.ExhibitId)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("ExhibitID")
                .IsFixedLength();

            
                
                

            entity.Property(e => e.PortfolioId).HasColumnName("PortfolioID");

            entity.Property(e => e.TargetAmount).HasColumnType("decimal(18, 2)");
        });

        modelBuilder.Entity<RoaBondResult>(entity =>
        {
            entity.HasKey(e => e.IdBondResult);

            entity.ToTable("ROA_Bond_Result");

            entity.Property(e => e.IdBondResult).HasColumnName("ID_BondResult");

            entity.Property(e => e.EffectiveDate).HasColumnType("datetime");

            entity.Property(e => e.EndDate).HasColumnType("datetime");

            entity.Property(e => e.IdPortfolio).HasColumnName("ID_Portfolio");

            entity.Property(e => e.IdRoasummary).HasColumnName("ID_ROASummary");

            entity.Property(e => e.InterestRate).HasColumnType("decimal(31, 2)");

            entity.Property(e => e.LoanId).HasColumnName("LoanID");

            entity.Property(e => e.MaturityDate).HasColumnType("datetime");

            
                
                

            entity.Property(e => e.Principal).HasColumnType("decimal(31, 2)");

            entity.Property(e => e.ProfitLoss).HasColumnType("decimal(31, 2)");

            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .IsUnicode(false);

            entity.Property(e => e.WeightReturns).HasColumnType("decimal(18, 8)");

            entity.Property(e => e.WeightedAverage).HasColumnType("decimal(18, 8)");
        });

        modelBuilder.Entity<RoaCaBnk>(entity =>
        {
            entity.HasKey(e => e.CaBnkId)
                .HasName("KeyCaBnkID");

            entity.ToTable("RoaCaBnk");

            entity.HasIndex(e => e.CurrCallId, "KeyCurCallID");

            entity.Property(e => e.CaBnkId).HasColumnName("CaBnkID");

            entity.Property(e => e.BankCharges).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.CurrCallId).HasColumnName("CurrCallID");

            entity.Property(e => e.Income).HasColumnType("decimal(18, 2)");

            
                
                

            entity.Property(e => e.ValueDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<RoaComp>(entity =>
        {
            entity.ToTable("RoaComp");

            entity.Property(e => e.RoaCompId).HasColumnName("RoaCompID");

            entity.Property(e => e.ExhibitId)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("ExhibitID")
                .IsFixedLength();

            entity.Property(e => e.IntestmentType)
                .HasMaxLength(35)
                .IsUnicode(false)
                .IsFixedLength();

            
                
                

            entity.Property(e => e.PortfolioId).HasColumnName("PortfolioID");

            entity.Property(e => e.Prd01Amount).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.Prd01Date).HasColumnType("datetime");

            entity.Property(e => e.Prd01Income).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.Prd01Yeild).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.Prd02Amount).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.Prd02Date).HasColumnType("datetime");

            entity.Property(e => e.Prd02Income).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.Prd02Yeild).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.Variance).HasColumnType("decimal(18, 2)");
        });

        modelBuilder.Entity<RoaEquityResult>(entity =>
        {
            entity.HasKey(e => e.IdEquityResult);

            entity.ToTable("ROA_Equity_Result");

            entity.Property(e => e.IdEquityResult).HasColumnName("ID_EquityResult");

            entity.Property(e => e.Bonus).HasColumnName("BONUS");

            entity.Property(e => e.CurrentPrice).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.Dividend).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.EndDate).HasColumnType("datetime");

            entity.Property(e => e.FlatDiff).HasColumnType("decimal(18, 8)");

            entity.Property(e => e.Gain).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.IdPortfolio).HasColumnName("ID_Portfolio");

            entity.Property(e => e.IdRoasummary).HasColumnName("ID_ROASummary");

            entity.Property(e => e.MarketValue).HasColumnType("decimal(18, 2)");

            
                
                

            entity.Property(e => e.NetAmountCost).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.Nominal).HasColumnType("decimal(28, 4)");

            entity.Property(e => e.QtySold).HasColumnType("decimal(28, 4)");

            entity.Property(e => e.SalesId).HasColumnName("SalesID");

            entity.Property(e => e.SalesProceed).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.ShareId).HasColumnName("ShareID");

            entity.Property(e => e.TotalQty).HasColumnType("decimal(28, 4)");

            entity.Property(e => e.TotalValue).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.ValueDate).HasColumnType("datetime");

            entity.Property(e => e.WeightReturns).HasColumnType("decimal(18, 8)");

            entity.Property(e => e.WeightedAverage).HasColumnType("decimal(18, 8)");
        });

        modelBuilder.Entity<RoaExAll>(entity =>
        {
            entity.HasKey(e => e.RoaExhAllid)
                .HasName("KeyRoaExhAllID");

            entity.ToTable("RoaExAll");

            entity.HasIndex(e => e.PortfolioId, "KeyExhAllPortfolioID");

            entity.HasIndex(e => e.EndDate, "KeyRoaAllEndDate");

            entity.HasIndex(e => new { e.PortfolioId, e.ExhibitId }, "KeyRoaExAllPrtExhid");

            entity.Property(e => e.RoaExhAllid).HasColumnName("RoaExhALLID");

            entity.Property(e => e.ActIncome).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.Amount).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.CummIncome).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.EndDate).HasColumnType("datetime");

            entity.Property(e => e.ExhibitId)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("ExhibitID")
                .IsFixedLength();

            entity.Property(e => e.InterestRate).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.Investment)
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength();

            
                
                

            entity.Property(e => e.PortfolioId).HasColumnName("PortfolioID");
        });

        modelBuilder.Entity<RoaExh01>(entity =>
        {
            entity.ToTable("RoaExh01");

            entity.HasIndex(e => e.PortfolioId, "KeyExh01Portfolio");

            entity.Property(e => e.RoaExh01Id).HasColumnName("RoaExh01ID");

            entity.Property(e => e.ActIncome).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.Amount).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.BankCharges).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.CummIncome).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.EndDate).HasColumnType("datetime");

            entity.Property(e => e.ExhibitId)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("ExhibitID")
                .IsFixedLength();

            entity.Property(e => e.InterestRate).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.Investment)
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength();

            
                
                

            entity.Property(e => e.PortfolioId).HasColumnName("PortfolioID");

            entity.Property(e => e.Remarks)
                .HasMaxLength(20)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<RoaExh02>(entity =>
        {
            entity.ToTable("RoaExh02");

            entity.HasIndex(e => e.PortfolioId, "KeyExh02Portfolio");

            entity.Property(e => e.RoaExh02Id).HasColumnName("RoaExh02ID");

            entity.Property(e => e.ActIncome).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.Amount).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.CummIncome).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.DealTypeId)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.EndDate).HasColumnType("datetime");

            entity.Property(e => e.ExhibitId)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("ExhibitID")
                .IsFixedLength();

            entity.Property(e => e.InterestRate).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.Investment)
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength();

            
                
                

            entity.Property(e => e.PortfolioId).HasColumnName("PortfolioID");

            entity.Property(e => e.PrnAmount).HasColumnType("decimal(18, 2)");
        });

        modelBuilder.Entity<RoaExh05>(entity =>
        {
            entity.ToTable("RoaExh05");

            entity.HasIndex(e => e.PortfolioId, "KeyExh05Portfolio");

            entity.Property(e => e.RoaExh05Id).HasColumnName("RoaExh05ID");

            entity.Property(e => e.ActIncome).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.Amount).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.CummIncome).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.EndDate).HasColumnType("datetime");

            entity.Property(e => e.ExhibitId)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("ExhibitID")
                .IsFixedLength();

            entity.Property(e => e.InterestRate).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.Investment)
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.LoanTypeId).HasColumnName("LoanTypeID");

            entity.Property(e => e.MarketValue).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.MaturityDate)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();

            
                
                

            entity.Property(e => e.PortfolioId).HasColumnName("PortfolioID");
        });

        modelBuilder.Entity<RoaExh09>(entity =>
        {
            entity.ToTable("RoaExh09");

            entity.HasIndex(e => e.PortfolioId, "KeyExh09Portfolio");

            entity.Property(e => e.RoaExh09Id).HasColumnName("RoaExh09ID");

            entity.Property(e => e.ActIncome).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.Amount).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.Balance).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.CummIncome).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.EndDate).HasColumnType("datetime");

            entity.Property(e => e.ExhibitId)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("ExhibitID")
                .IsFixedLength();

            entity.Property(e => e.InterestRate).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.Investment)
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.MortgageTypeId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("MortgageTypeID")
                .IsFixedLength();

            
                
                

            entity.Property(e => e.PortfolioId).HasColumnName("PortfolioID");
        });

        modelBuilder.Entity<RoaExh10>(entity =>
        {
            entity.ToTable("RoaExh10");

            entity.HasIndex(e => e.PortfolioId, "KeyExh10Portfolio");

            entity.Property(e => e.RoaExh10Id).HasColumnName("RoaExh10ID");

            entity.Property(e => e.ActIncome).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.Amount).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.Balance).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.CummIncome).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.EndDate).HasColumnType("datetime");

            entity.Property(e => e.ExhibitId)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("ExhibitID")
                .IsFixedLength();

            entity.Property(e => e.InterestRate).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.Investment)
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.LeaseTypeId).HasColumnName("LeaseTypeID");

            
                
                

            entity.Property(e => e.PortfolioId).HasColumnName("PortfolioID");
        });

        modelBuilder.Entity<RoaExh11>(entity =>
        {
            entity.ToTable("RoaExh11");

            entity.HasIndex(e => e.PortfolioId, "KeyExh11Portfolio");

            entity.Property(e => e.RoaExh11Id).HasColumnName("RoaExh11ID");

            entity.Property(e => e.AverageCost).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.DivDeclared).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.Dividend).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.EndDate).HasColumnType("datetime");

            entity.Property(e => e.ExhibitId)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("ExhibitID")
                .IsFixedLength();

            entity.Property(e => e.Investment)
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.Issue)
                .HasMaxLength(15)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.MarketPrice).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.MarketValue).HasColumnType("decimal(18, 2)");

            
                
                

            entity.Property(e => e.PortfolioId).HasColumnName("PortfolioID");

            entity.Property(e => e.ProfLoss).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.ShareType)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.TotalCost).HasColumnType("decimal(18, 2)");
        });

        modelBuilder.Entity<RoaExh12>(entity =>
        {
            entity.ToTable("RoaExh12");

            entity.HasIndex(e => e.PortfolioId, "KeyExh12Portfolio");

            entity.Property(e => e.RoaExh12Id).HasColumnName("RoaExh12ID");

            entity.Property(e => e.ActIncome).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.Amount).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.CummIncome).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.EndDate).HasColumnType("datetime");

            entity.Property(e => e.ExhibitId)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("ExhibitID")
                .IsFixedLength();

            entity.Property(e => e.InterestRate).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.Investment)
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength();

            
                
                

            entity.Property(e => e.PortfolioId).HasColumnName("PortfolioID");
        });

        modelBuilder.Entity<RoaExh13>(entity =>
        {
            entity.ToTable("RoaExh13");

            entity.HasIndex(e => e.PortfolioId, "KeyExh13Portfolio");

            entity.Property(e => e.RoaExh13Id).HasColumnName("RoaExh13ID");

            entity.Property(e => e.ActIncome).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.Amount).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.CummIncome).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.EndDate).HasColumnType("datetime");

            entity.Property(e => e.ExhibitId)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("ExhibitID")
                .IsFixedLength();

            entity.Property(e => e.InterestRate).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.Investment)
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength();

            
                
                

            entity.Property(e => e.PortfolioId).HasColumnName("PortfolioID");
        });

        modelBuilder.Entity<RoaExh14>(entity =>
        {
            entity.ToTable("RoaExh14");

            entity.HasIndex(e => e.PortfolioId, "KeyExh14Portfolio");

            entity.Property(e => e.RoaExh14Id).HasColumnName("RoaExh14ID");

            entity.Property(e => e.Amount).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.AnnualRental).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.EndDate).HasColumnType("datetime");

            entity.Property(e => e.ExhibitId)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("ExhibitID")
                .IsFixedLength();

            entity.Property(e => e.Investment)
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength();

            
                
                

            entity.Property(e => e.Nbv)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("NBV");

            entity.Property(e => e.PeriodRental).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.PortfolioId).HasColumnName("PortfolioID");
        });

        modelBuilder.Entity<RoaExh16>(entity =>
        {
            entity.ToTable("RoaExh16");

            entity.Property(e => e.RoaExh16Id).HasColumnName("RoaExh16ID");

            entity.Property(e => e.Amount).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.EndDate).HasColumnType("datetime");

            entity.Property(e => e.ExhibitId)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("ExhibitID")
                .IsFixedLength();

            entity.Property(e => e.InvestType)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.Investment)
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength();

            
                
                

            entity.Property(e => e.Remarks)
                .HasMaxLength(15)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<RoaExhib>(entity =>
        {
            entity.HasKey(e => e.ExhibitId)
                .HasName("KeyRoaExhibitID");

            entity.ToTable("RoaExhib");

            entity.HasIndex(e => e.Name, "KeyRoaExName")
                .IsUnique();

            entity.Property(e => e.ExhibitId)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("ExhibitID")
                .IsFixedLength();

            
                
                

            entity.Property(e => e.Name)
                .HasMaxLength(40)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<RoaGainByAssetClass>(entity =>
        {
            entity.HasKey(e => e.IdRoaGainByAssetClass);

            entity.ToTable("Roa_GainByAssetClass");

            entity.Property(e => e.IdRoaGainByAssetClass).HasColumnName("ID_ROA_GainByAssetClass");

            entity.Property(e => e.Additions).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.BeginDate).HasColumnType("datetime");

            entity.Property(e => e.CloseNav)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("CloseNAV");

            entity.Property(e => e.Disposals).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.EndDate).HasColumnType("datetime");

            entity.Property(e => e.GainLoss).HasColumnType("decimal(31, 8)");

            entity.Property(e => e.IdInvestmentType)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("ID_InvestmentType");

            entity.Property(e => e.IdPortfolio).HasColumnName("ID_Portfolio");

            
                
                

            entity.Property(e => e.OpenNav)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("OpenNAV");
        });

        modelBuilder.Entity<RoaImpar>(entity =>
        {
            entity.HasKey(e => e.RoaImparedId)
                .HasName("KeyRoaImparedID");

            entity.ToTable("RoaImpar");

            entity.Property(e => e.RoaImparedId).HasColumnName("RoaImparedID");

            entity.Property(e => e.Amount).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.EndDate).HasColumnType("datetime");

            entity.Property(e => e.ExhibitId)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("ExhibitID")
                .IsFixedLength();

            entity.Property(e => e.Investment)
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength();

            
                
                

            entity.Property(e => e.Remarks)
                .HasMaxLength(60)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<RoaIndex>(entity =>
        {
            entity.HasKey(e => e.RoaIndex1)
                .HasName("KeyRoaIndexID");

            entity.ToTable("RoaIndex");

            entity.HasIndex(e => e.Per02Date, "KeyRoaIdxDate")
                .IsUnique();

            entity.Property(e => e.RoaIndex1).HasColumnName("RoaIndex");

            entity.Property(e => e.AvDepositRate01).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.AvDepositRate02).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.AvDepositVar)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("AvDeposit_Var");

            entity.Property(e => e.AvLendingRate01).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.AvLendingRate02).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.AvLendingVar)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("AvLending_Var");

            entity.Property(e => e.CbnExRate01)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("CBN_ExRate01");

            entity.Property(e => e.CbnExRate02)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("CBN_ExRate02");

            entity.Property(e => e.CbnExRateVar)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("CBN_ExRate_Var");

            entity.Property(e => e.CbnProcVar)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("CBN_Proc_Var");

            entity.Property(e => e.CbnProceedRate01)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("CBN_ProceedRate01");

            entity.Property(e => e.CbnProceedRate02)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("CBN_ProceedRate02");

            entity.Property(e => e.CrudeOilBarrel01).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.CrudeOilBarrel02).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.CrudeOilVar)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("CrudeOil_Var");

            entity.Property(e => e.FreeFundRate01)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("FreeFund_Rate01");

            entity.Property(e => e.FreeFundRate02)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("FreeFund_Rate02");

            entity.Property(e => e.FreeFundVar)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("FreeFund_Var");

            entity.Property(e => e.Gdp01)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("GDP01");

            entity.Property(e => e.Gdp02)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("GDP02");

            entity.Property(e => e.GdpVar)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("GDP_Var");

            entity.Property(e => e.InflationRate01).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.InflationRate02).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.InflationRateVar)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("InflationRate_Var");

            entity.Property(e => e.MinReDiscountRate01).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.MinReDiscountRate02).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.MinReDiscountVar)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("MinReDiscount_Var");

            
                
                

            entity.Property(e => e.Nibor180Var)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("NIBOR180_Var");

            entity.Property(e => e.Nibor180days01)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("NIBOR180Days01");

            entity.Property(e => e.Nibor180days02)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("NIBOR180Days02");

            entity.Property(e => e.Nibor30Var)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("NIBOR30_Var");

            entity.Property(e => e.Nibor30days01)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("NIBOR30Days01");

            entity.Property(e => e.Nibor30days02)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("NIBOR30Days02");

            entity.Property(e => e.Nibor365Var)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("NIBOR365_Var");

            entity.Property(e => e.Nibor365days01)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("NIBOR365Days01");

            entity.Property(e => e.Nibor365days02)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("NIBOR365Days02");

            entity.Property(e => e.Nibor60Var)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("NIBOR60_Var");

            entity.Property(e => e.Nibor60days01)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("NIBOR60Days01");

            entity.Property(e => e.Nibor60days02)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("NIBOR60Days02");

            entity.Property(e => e.Nibor90Var)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("NIBOR90_Var");

            entity.Property(e => e.Nibor90days01)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("NIBOR90Days01");

            entity.Property(e => e.Nibor90days02)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("NIBOR90Days02");

            entity.Property(e => e.NseIndex01).HasColumnName("NSE_Index01");

            entity.Property(e => e.NseIndex02).HasColumnName("NSE_Index02");

            entity.Property(e => e.NseIndexVar)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("NSE_Index_Var");

            entity.Property(e => e.Per01Date).HasColumnType("datetime");

            entity.Property(e => e.Per02Date).HasColumnType("datetime");

            entity.Property(e => e.TreasuryBillRate01).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.TreasuryBillRate02).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.TreasuryBillVar)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("TreasuryBill_Var");
        });

        modelBuilder.Entity<RoaMoneyMarketResult>(entity =>
        {
            entity.HasKey(e => e.IdMoneyMarketResult);

            entity.ToTable("ROA_MoneyMarket_Result");

            entity.Property(e => e.IdMoneyMarketResult).HasColumnName("ID_MoneyMarketResult");

            entity.Property(e => e.EffectiveDate).HasColumnType("datetime");

            entity.Property(e => e.EndDate).HasColumnType("datetime");

            entity.Property(e => e.IdDealMaster).HasColumnName("ID_DealMaster");

            entity.Property(e => e.IdPortfolio).HasColumnName("ID_Portfolio");

            entity.Property(e => e.IdRoasummary).HasColumnName("ID_ROASummary");

            entity.Property(e => e.InterestRate).HasColumnType("decimal(31, 2)");

            entity.Property(e => e.MaturityDate).HasColumnType("datetime");

            
                
                

            entity.Property(e => e.Principal).HasColumnType("decimal(31, 2)");

            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .IsUnicode(false);

            entity.Property(e => e.TotalInterest).HasColumnType("decimal(31, 2)");

            entity.Property(e => e.WeightReturns).HasColumnType("decimal(18, 8)");

            entity.Property(e => e.WeightedAverage).HasColumnType("decimal(18, 8)");
        });

        modelBuilder.Entity<RoaStCal>(entity =>
        {
            entity.HasKey(e => e.RoaStraCalcId)
                .HasName("KeyRoaCalStratId");

            entity.ToTable("RoaStCal");

            entity.HasIndex(e => e.PortfolioId, "KeyRoaCalStraPrt")
                .IsUnique();

            entity.HasIndex(e => e.EndDate, "KeyRoaStCalDate");

            entity.Property(e => e.RoaStraCalcId).HasColumnName("RoaStraCalcID");

            entity.Property(e => e.Amount).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.EndDate).HasColumnType("datetime");

            entity.Property(e => e.ExhibitId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("ExhibitID")
                .IsFixedLength();

            
                
                

            entity.Property(e => e.PortfolioId).HasColumnName("PortfolioID");

            entity.Property(e => e.Remarks)
                .HasMaxLength(40)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.Title)
                .HasMaxLength(20)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.TotalAmount).HasColumnType("decimal(18, 2)");
        });

        modelBuilder.Entity<RoaStrat>(entity =>
        {
            entity.ToTable("RoaStrat");

            entity.HasIndex(e => new { e.PortfolioId, e.StratLinkCode }, "KeyRoaStraPrt")
                .IsUnique();

            entity.Property(e => e.RoaStratId).HasColumnName("RoaStratID");

            entity.Property(e => e.BadRemarks)
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.CompareType)
                .HasMaxLength(8)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.ExhibitId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("ExhibitID")
                .IsFixedLength();

            
                
                

            entity.Property(e => e.OkRemarks)
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.PortfolioId).HasColumnName("PortfolioID");

            entity.Property(e => e.StratLinkCode)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.StrategyRate).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.Title)
                .HasMaxLength(20)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<RoaSummary>(entity =>
        {
            entity.HasKey(e => e.IdRoasummary);

            entity.ToTable("ROA_Summary");

            entity.HasIndex(e => new { e.IdPortfolio, e.EndDate }, "Key_ROA_Summary_EndDate")
                .IsUnique();

            entity.Property(e => e.IdRoasummary).HasColumnName("ID_ROASummary");

            entity.Property(e => e.Bonds).HasColumnType("decimal(18, 8)");

            entity.Property(e => e.EndDate).HasColumnType("datetime");

            entity.Property(e => e.Equity).HasColumnType("decimal(18, 8)");

            entity.Property(e => e.IdPortfolio).HasColumnName("ID_Portfolio");

            entity.Property(e => e.MoneyMarket).HasColumnType("decimal(18, 8)");

            
                
                

            entity.Property(e => e.Narration)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.Property(e => e.TreasuryBill).HasColumnType("decimal(18, 8)");
        });

        modelBuilder.Entity<RoaTimeWeightedDetail>(entity =>
        {
            entity.HasKey(e => e.IdRoaTimeWeightedDetails);

            entity.ToTable("Roa_TimeWeightedDetails");

            entity.Property(e => e.IdRoaTimeWeightedDetails).HasColumnName("ID_ROA_TimeWeightedDetails");

            entity.Property(e => e.BndCbCashFlow)
                .HasColumnType("decimal(31, 2)")
                .HasColumnName("Bnd_CB_CashFlow");

            entity.Property(e => e.BndMrkCashFlow).HasColumnType("decimal(31, 2)");

            entity.Property(e => e.BndSbCashFlow)
                .HasColumnType("decimal(31, 2)")
                .HasColumnName("Bnd_SB_CashFlow");

            entity.Property(e => e.CapMrkCashFlow).HasColumnType("decimal(31, 2)");

            entity.Property(e => e.DayWeihgt).HasColumnType("decimal(31, 15)");

            entity.Property(e => e.EqChange).HasColumnType("decimal(31, 15)");

            entity.Property(e => e.IdPortfolio).HasColumnName("ID_Portfolio");

            entity.Property(e => e.IdRoaPortfolioTimeWeightedReturns).HasColumnName("ID_ROA_PortfolioTimeWeightedReturns");

            entity.Property(e => e.MonMrkCashFlow).HasColumnType("decimal(31, 2)");

            entity.Property(e => e.RelEstCashFlow).HasColumnType("decimal(31, 2)");

            entity.Property(e => e.TbillCashFlow)
                .HasColumnType("decimal(31, 2)")
                .HasColumnName("TBillCashFlow");

            entity.Property(e => e.ValueDate).HasColumnType("datetime");

            entity.Property(e => e.WeigthBndCb)
                .HasColumnType("decimal(31, 15)")
                .HasColumnName("WeigthBnd_CB");

            entity.Property(e => e.WeigthBndMrk).HasColumnType("decimal(31, 15)");

            entity.Property(e => e.WeigthBndSb)
                .HasColumnType("decimal(31, 15)")
                .HasColumnName("WeigthBnd_SB");

            entity.Property(e => e.WeigthCapMrk).HasColumnType("decimal(31, 15)");

            entity.Property(e => e.WeigthMonMrk).HasColumnType("decimal(31, 15)");

            entity.Property(e => e.WeigthMutualFund).HasColumnType("decimal(31, 15)");

            entity.Property(e => e.WeigthPrvEqt).HasColumnType("decimal(31, 15)");

            entity.Property(e => e.WeigthRelEst).HasColumnType("decimal(31, 15)");

            entity.Property(e => e.WeigthTbill)
                .HasColumnType("decimal(31, 15)")
                .HasColumnName("WeigthTBill");
        });

        modelBuilder.Entity<RpDpSchd>(entity =>
        {
            entity.ToTable("RpDpSchd");

            entity.HasIndex(e => e.DealTypeId, "KeyRpDpsDealID");

            entity.HasIndex(e => e.PortfolioId, "KeyRpDpsPortfolioID");

            entity.Property(e => e.RpDpSchdId).HasColumnName("RpDpSchd_ID");

            entity.Property(e => e.AcrBf)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("Acr_bf");

            entity.Property(e => e.AcrCf)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("Acr_cf");

            entity.Property(e => e.AcrPl)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("Acr_PL");

            entity.Property(e => e.Addition).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.BeginDate).HasColumnType("datetime");

            entity.Property(e => e.BookValue).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.Comments).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.DealId).HasColumnName("DealID");

            entity.Property(e => e.DealTypeId)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("DealTypeID");

            entity.Property(e => e.Description)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.Property(e => e.Disposals).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.EffectiveDate).HasColumnType("datetime");

            entity.Property(e => e.EndDate).HasColumnType("datetime");

            entity.Property(e => e.GrossRecd).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.IntAdj).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.IntRate).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.MaturityDate).HasColumnType("datetime");

            
                
                

            entity.Property(e => e.NetPl)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("Net_PL");

            entity.Property(e => e.OpenBalance).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.PortfolioId).HasColumnName("PortfolioID");

            entity.Property(e => e.WithTax).HasColumnType("decimal(18, 2)");
        });

        modelBuilder.Entity<RpDpTre>(entity =>
        {
            entity.HasNoKey();

            entity.HasIndex(e => e.DealTypeId, "KeyRpDealID");

            entity.Property(e => e.CustomerId).HasColumnName("CustomerID");

            entity.Property(e => e.DealId).HasColumnName("DealID");

            entity.Property(e => e.DealStatus)
                .HasMaxLength(20)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.DealTypeId).HasColumnName("DealTypeID");

            entity.Property(e => e.EffYeild).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.EffectiveDate).HasColumnType("datetime");

            entity.Property(e => e.EndDate).HasColumnType("datetime");

            entity.Property(e => e.IntAtMaturity).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.IntRate).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.IntReceived).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.InterestAdj).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.InterestOs)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("InterestOS");

            entity.Property(e => e.MaturityDate).HasColumnType("datetime");

            entity.Property(e => e.Narration)
                .HasMaxLength(40)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.Principal).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.RpDpTres).ValueGeneratedOnAdd();
        });

        modelBuilder.Entity<RpEqExp>(entity =>
        {
            entity.HasNoKey();

            entity.ToTable("RpEqExp");

            entity.HasIndex(e => e.SectorId, "KeyRpEqSectorID");

            entity.HasIndex(e => e.ShareId, "KeyRpEqShareID");

            entity.Property(e => e.BonusDeclred)
                .HasMaxLength(6)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.ClosureDate).HasColumnType("datetime");

            entity.Property(e => e.DatePayable).HasColumnType("datetime");

            entity.Property(e => e.DivReceived).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.EndDate).HasColumnType("datetime");

            entity.Property(e => e.FinDividendExp).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.FinalDivDeclared).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.IntDividendExp).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.NorminalValue).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.RpEqExp1)
                .ValueGeneratedOnAdd()
                .HasColumnName("RpEqExp");

            entity.Property(e => e.SectorId).HasColumnName("SectorID");

            entity.Property(e => e.ShareId).HasColumnName("ShareID");

            entity.Property(e => e.YearEnd).HasColumnType("datetime");
        });

        modelBuilder.Entity<RpEqGain>(entity =>
        {
            entity.HasNoKey();

            entity.ToTable("RpEqGain");

            entity.HasIndex(e => e.SectorId, "KeyEqUrgSector");

            entity.HasIndex(e => e.ShareId, "KeyEqUrgShareId");

            entity.Property(e => e.Av1Cost).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.AvCost).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.BeginDate).HasColumnType("datetime");

            entity.Property(e => e.EndDate).HasColumnType("datetime");

            entity.Property(e => e.Gain1Loss).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.Gain2Loss).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.IdPortfolio).HasColumnName("ID_Portfolio");

            entity.Property(e => e.MarketValue).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.Offer1Price).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.Offer2Price).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.PeriodGainLoss).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.RpEqGain1)
                .ValueGeneratedOnAdd()
                .HasColumnName("RpEqGain");

            entity.Property(e => e.SectorId).HasColumnName("SectorID");

            entity.Property(e => e.ShareId).HasColumnName("ShareID");

            entity.Property(e => e.TotShares1).HasColumnType("decimal(28, 4)");

            entity.Property(e => e.TotalCost).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.Un1Realised).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.Un2Realised).HasColumnType("decimal(18, 2)");
        });

        modelBuilder.Entity<RpEqSchd>(entity =>
        {
            entity.HasKey(e => e.EqSchdId)
                .HasName("KeyEqSchd");

            entity.ToTable("RpEqSchd");

            entity.Property(e => e.EqSchdId).HasColumnName("EqSchdID");

            entity.Property(e => e.BeginDate).HasColumnType("datetime");

            entity.Property(e => e.CostAdd)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("Cost_add");

            entity.Property(e => e.CostBf)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("Cost_bf");

            entity.Property(e => e.CostCf)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("Cost_cf");

            entity.Property(e => e.CostDisp)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("Cost_disp");

            entity.Property(e => e.EndDate).HasColumnType("datetime");

            entity.Property(e => e.MarketPrice).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.MarketValue).HasColumnType("decimal(18, 2)");

            
                
                

            entity.Property(e => e.NetAssetValue).HasColumnType("decimal(22, 2)");

            entity.Property(e => e.PortfolioId).HasColumnName("PortfolioID");

            entity.Property(e => e.ShareAdd).HasColumnName("Share_add");

            entity.Property(e => e.ShareBf).HasColumnName("Share_bf");

            entity.Property(e => e.ShareCf).HasColumnName("Share_cf");

            entity.Property(e => e.ShareDisp).HasColumnName("Share_disp");

            entity.Property(e => e.ShareId).HasColumnName("ShareID");

            entity.Property(e => e.ShareType)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<RpLnSchd>(entity =>
        {
            entity.ToTable("RpLnSchd");

            entity.HasIndex(e => e.LoanTypeId, "KeyRpLnsLoanID");

            entity.HasIndex(e => e.PortfolioId, "KeyRplnsPortfolioID");

            entity.Property(e => e.RpLnSchdId).HasColumnName("RpLnSchd_ID");

            entity.Property(e => e.AcrBf)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("Acr_bf");

            entity.Property(e => e.AcrCf)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("Acr_cf");

            entity.Property(e => e.AcrPl)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("Acr_PL");

            entity.Property(e => e.Addition).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.BeginDate).HasColumnType("datetime");

            entity.Property(e => e.CloseBalance).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.Disposals).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.EndDate).HasColumnType("datetime");

            entity.Property(e => e.GrossRecd).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.IntAdj).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.IntRate).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.LoanId).HasColumnName("LoanID");

            entity.Property(e => e.LoanTypeId).HasColumnName("LoanTypeID");

            entity.Property(e => e.MarketValue).HasColumnType("decimal(18, 2)");

            
                
                

            entity.Property(e => e.NetPl)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("Net_PL");

            entity.Property(e => e.OpenBalance).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.PortfolioId).HasColumnName("PortfolioID");

            entity.Property(e => e.WithTax).HasColumnType("decimal(18, 2)");
        });

        modelBuilder.Entity<RpLnTre>(entity =>
        {
            entity.HasKey(e => e.RpLnTres);

            entity.HasIndex(e => e.LoanTypeId, "KeyRpLnsLoanID");

            entity.Property(e => e.EffectiveDate).HasColumnType("datetime");

            entity.Property(e => e.EndDate).HasColumnType("datetime");

            entity.Property(e => e.Int1Due)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.Int2Due)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.IntAtDueDate).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.IntAtRepDate).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.IntDueDate).HasColumnType("datetime");

            entity.Property(e => e.IntRate).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.LoanAmount).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.LoanBalance).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.LoanId).HasColumnName("LoanID");

            entity.Property(e => e.LoanTypeId).HasColumnName("LoanTypeID");

            entity.Property(e => e.MaturityDate).HasColumnType("datetime");

            
                
                

            entity.Property(e => e.PrnDue).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.RePayment).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.Red1Due)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.Red2Due)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<RpLsSchd>(entity =>
        {
            entity.ToTable("RpLsSchd");

            entity.HasIndex(e => e.LeaseTypeId, "KeyRpLsLeasid");

            entity.HasIndex(e => e.PortfolioId, "KeyRplsPortID");

            entity.Property(e => e.RpLsSchdId).HasColumnName("RpLsSchd_ID");

            entity.Property(e => e.AcrBf)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("Acr_bf");

            entity.Property(e => e.AcrCf)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("Acr_cf");

            entity.Property(e => e.AcrPl)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("Acr_PL");

            entity.Property(e => e.Addition).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.BeginDate).HasColumnType("datetime");

            entity.Property(e => e.CloseBalance).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.Disposals).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.EndDate).HasColumnType("datetime");

            entity.Property(e => e.GrossRecd).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.IntAdj).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.IntRate).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.LeaseId).HasColumnName("LeaseID");

            entity.Property(e => e.LeaseTypeId).HasColumnName("LeaseTypeID");

            entity.Property(e => e.MarketValue).HasColumnType("decimal(18, 2)");

            
                
                

            entity.Property(e => e.NetPl)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("Net_PL");

            entity.Property(e => e.OpenBalance).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.PortfolioId).HasColumnName("PortfolioID");

            entity.Property(e => e.WithTax).HasColumnType("decimal(18, 2)");
        });

        modelBuilder.Entity<RpLsTre>(entity =>
        {
            entity.HasKey(e => e.RpLsTresId);

            entity.HasIndex(e => e.LeaseTypeId, "KeyRpMgtMorgID");

            entity.Property(e => e.RpLsTresId).HasColumnName("RpLsTresID");

            entity.Property(e => e.Due2Date).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.DueDates)
                .HasMaxLength(20)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.EffectiveDate).HasColumnType("datetime");

            entity.Property(e => e.EndDate).HasColumnType("datetime");

            entity.Property(e => e.IntRate).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.LeaseAmount).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.LeaseBalance).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.LeaseId).HasColumnName("LeaseID");

            entity.Property(e => e.LeaseTypeId).HasColumnName("LeaseTypeID");

            entity.Property(e => e.MaturityDate).HasColumnType("datetime");

            
                
                

            entity.Property(e => e.PayGap)
                .HasMaxLength(20)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.RepayAmt).HasColumnType("decimal(18, 2)");
        });

        modelBuilder.Entity<RpMgSchd>(entity =>
        {
            entity.ToTable("RpMgSchd");

            entity.HasIndex(e => e.MortgageTypeId, "KeyRpMgMorgID");

            entity.HasIndex(e => e.PortfolioId, "KeyRpMgPortID");

            entity.Property(e => e.RpMgSchdId).HasColumnName("RpMgSchd_ID");

            entity.Property(e => e.AcrBf)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("Acr_bf");

            entity.Property(e => e.AcrCf)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("Acr_cf");

            entity.Property(e => e.AcrPl)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("Acr_PL");

            entity.Property(e => e.Addition).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.BeginDate).HasColumnType("datetime");

            entity.Property(e => e.CloseBalance).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.Disposals).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.EndDate).HasColumnType("datetime");

            entity.Property(e => e.GrossRecd).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.IntAdj).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.IntRate).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.MortgageId).HasColumnName("MortgageID");

            entity.Property(e => e.MortgageTypeId).HasColumnName("MortgageTypeID");

            
                
                

            entity.Property(e => e.NetPl)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("Net_PL");

            entity.Property(e => e.OpenBalance).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.PortfolioId).HasColumnName("PortfolioID");

            entity.Property(e => e.WithTax).HasColumnType("decimal(18, 2)");
        });

        modelBuilder.Entity<RpMgTre>(entity =>
        {
            entity.HasNoKey();

            entity.HasIndex(e => e.MortgageTypeId, "KeyRpMgtMorgID");

            entity.Property(e => e.Due2Date).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.DueDates)
                .HasMaxLength(20)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.EffectiveDate).HasColumnType("datetime");

            entity.Property(e => e.EndDate).HasColumnType("datetime");

            entity.Property(e => e.IntRate).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.MaturityDate).HasColumnType("datetime");

            entity.Property(e => e.MorgBalance).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.MorgageAmount).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.MortgageId).HasColumnName("MortgageID");

            entity.Property(e => e.MortgageTypeId).HasColumnName("MortgageTypeID");

            entity.Property(e => e.PayGap)
                .HasMaxLength(20)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.RepayAmt).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.RpMgTresId)
                .ValueGeneratedOnAdd()
                .HasColumnName("RpMgTres_ID");
        });

        modelBuilder.Entity<RpStMent>(entity =>
        {
            entity.HasKey(e => e.RpStMent1);

            entity.ToTable("RpStMent");

            entity.HasIndex(e => e.LinkId, "KeyRpStmtLinkId");

            entity.Property(e => e.RpStMent1).HasColumnName("RpStMent");

            entity.Property(e => e.AccruedInterest).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.Additions).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.AmtRecd).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.BeginDate).HasColumnType("datetime");

            entity.Property(e => e.CloseBalance).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.EndDate).HasColumnType("datetime");

            entity.Property(e => e.IntRate).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.IntRecd).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.InterestBf).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.LinkId).HasColumnName("LinkID");

            entity.Property(e => e.Narration)
                .HasMaxLength(60)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.OpenBalance).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.PrnRecd).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.ValueDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<SecRole>(entity =>
        {
            entity.HasKey(e => e.RoleId);

            entity.ToTable("Sec_Roles");

            entity.Property(e => e.RoleId)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("RoleID");

            entity.Property(e => e.Description)
                .HasMaxLength(120)
                .IsUnicode(false);

            entity.Property(e => e.XRoleId).HasColumnName("xRoleID");
        });

        modelBuilder.Entity<SecUser>(entity =>
        {
            entity.HasKey(e => e.Uid);

            entity.ToTable("Sec_Users");

            entity.Property(e => e.Uid)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("UID");

            entity.Property(e => e.ApprovalLimit).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.EmailAddress)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("EMailAddress");

            entity.Property(e => e.FullName)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.IdLocation)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasColumnName("ID_Location");

            entity.Property(e => e.Pwd)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("PWD");

            entity.Property(e => e.XUsrId).HasColumnName("xUsrID");
        });

        modelBuilder.Entity<SecUsersRole>(entity =>
        {
            entity.HasKey(e => new { e.UserId, e.RoleId });

            entity.ToTable("Sec_UsersRoles");

            entity.Property(e => e.UserId)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("UserID");

            entity.Property(e => e.RoleId)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("RoleID");
        });

        modelBuilder.Entity<SentMail>(entity =>
        {
            entity.HasKey(e => e.SentId);

            entity.ToTable("SentMail");

            entity.HasIndex(e => e.SentId, "KeySentID")
                .IsUnique();

            entity.HasIndex(e => e.SentTo, "KeySentTo");

            entity.Property(e => e.SentId).HasColumnName("SentID");

            entity.Property(e => e.AttachedFile)
                .HasMaxLength(20)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.MessageText).HasColumnType("text");

            
                
                

            entity.Property(e => e.SentDate).HasColumnType("datetime");

            entity.Property(e => e.SentTo)
                .HasMaxLength(45)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<SettlementMode>(entity =>
        {
            entity.HasKey(e => e.IdSettlementModes);

            entity.HasIndex(e => e.ShortName, "Key_SettlementModes_ShortName")
                .IsUnique();

            entity.Property(e => e.IdSettlementModes).HasColumnName("ID_SettlementModes");

            entity.Property(e => e.SettlementName)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.Property(e => e.ShortName)
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<ShareMandateDetail>(entity =>
        {
            entity.HasKey(e => e.IdShareMandateDetail);

            entity.Property(e => e.IdShareMandateDetail).HasColumnName("ID_ShareMandateDetail");

            entity.Property(e => e.ActualCost).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.ApprovedBy)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.BrokerId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("BrokerID");

            entity.Property(e => e.CaptureDate).HasColumnType("datetime");

            entity.Property(e => e.CapturedBy)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.ComRate).HasColumnType("decimal(18, 4)");

            entity.Property(e => e.Comments).HasColumnType("text");

            entity.Property(e => e.Commission).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.Consideration).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.Cscsid)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("CSCSID")
                .IsFixedLength();

            entity.Property(e => e.Discount).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.ExpiryDate).HasColumnType("datetime");

            entity.Property(e => e.IdComplianceOverrideDetails).HasColumnName("ID_ComplianceOverrideDetails");

            entity.Property(e => e.IdEquityMandateDetails).HasColumnName("ID_EquityMandateDetails");

            entity.Property(e => e.IdEquityMandateToBrokers).HasColumnName("ID_EquityMandateToBrokers");

            entity.Property(e => e.IdPortfolioCustodian).HasColumnName("ID_PortfolioCustodian");

            entity.Property(e => e.IdPortfolioGroup).HasColumnName("ID_PortfolioGroup");

            entity.Property(e => e.IdSellTriger).HasColumnName("ID_SellTriger");

            entity.Property(e => e.InvestorAccountNo)
                .HasMaxLength(15)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.MandateDate).HasColumnType("datetime");

            entity.Property(e => e.MaxPrice).HasColumnType("decimal(18, 4)");

            
                
                

            entity.Property(e => e.NseCscsfees)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("NseCSCSFees");

            entity.Property(e => e.OtherFees).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.Premuim).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.Qty).HasColumnType("decimal(24, 8)");

            entity.Property(e => e.QtyReceived).HasColumnType("decimal(24, 8)");

            entity.Property(e => e.Remarks)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.Property(e => e.SecFees).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.ShareId).HasColumnName("ShareID");

            entity.Property(e => e.StampDuty).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.Status)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.TotalCost).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.TransactionCost).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.TransactionType)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.Vat)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VAT");
        });

        modelBuilder.Entity<ShareMandatePortfolio>(entity =>
        {
            entity.HasKey(e => e.IdShareMandatePortfolio);

            entity.ToTable("ShareMandatePortfolio");

            entity.HasIndex(e => new { e.IdShareMandateDetail, e.PortfolioId }, "Key_ShareMandatePortfolio_Unique")
                .IsUnique();

            entity.Property(e => e.IdShareMandatePortfolio).HasColumnName("ID_ShareMandatePortfolio");

            entity.Property(e => e.AllocatedCost).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.AllocatedQty).HasColumnType("decimal(20, 4)");

            entity.Property(e => e.IdShareMandateDetail).HasColumnName("ID_ShareMandateDetail");

            
                
                

            entity.Property(e => e.PortfolioGroupId).HasColumnName("PortfolioGroupID");

            entity.Property(e => e.PortfolioId).HasColumnName("PortfolioID");

            entity.Property(e => e.TakenCost).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.TakenQty).HasColumnType("decimal(20, 4)");
        });

        modelBuilder.Entity<ShareholderProfile>(entity =>
        {
            entity.HasKey(e => e.Sncode);

            entity.ToTable("ShareholderProfile");

            entity.Property(e => e.Sncode).HasColumnName("SNCode");

            entity.Property(e => e.HolderName)
                .HasMaxLength(30)
                .IsUnicode(false);

            
                
                

            entity.Property(e => e.PfaCode)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("PFA_Code");

            entity.Property(e => e.PfaName)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("PFA_Name");

            entity.Property(e => e.PostAddress)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("postAddress");

            entity.Property(e => e.Shareholding).HasColumnName("shareholding");
        });

        modelBuilder.Entity<Sheet1>(entity =>
        {
            entity.HasNoKey();

            entity.ToTable("Sheet1$");

            entity.Property(e => e.BankBalances)
                .HasMaxLength(255)
                .HasColumnName("BANK BALANCES");
        });

        modelBuilder.Entity<Signatory>(entity =>
        {
            entity.HasNoKey();

            entity.ToTable("Signatory");

            entity.Property(e => e.FullName)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.IdSignatory)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID_Signatory");

            entity.Property(e => e.SecUserId).HasColumnName("SecUserID");

            entity.Property(e => e.Sign1Amount).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.Sign2Amount).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.SignatoryLevel)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.Signature).HasColumnType("image");
        });

        modelBuilder.Entity<SignatoryOld>(entity =>
        {
            entity.HasKey(e => e.IdSignatory)
                .HasName("PK_Signatory");

            entity.ToTable("Signatory_Old");

            entity.HasIndex(e => e.FullName, "Key_Signatory_FullName")
                .IsUnique();

            entity.HasIndex(e => e.SecUserId, "Key_Signatory_SecUserID")
                .IsUnique();

            entity.Property(e => e.IdSignatory).HasColumnName("ID_Signatory");

            entity.Property(e => e.FullName)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.SecUserId).HasColumnName("SecUserID");

            entity.Property(e => e.Sign1Amount).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.Sign2Amount).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.SignatoryLevel)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.Signature).HasColumnType("image");
        });

        modelBuilder.Entity<SourceOfFund>(entity =>
        {
            entity.HasKey(e => e.IdSourceOfFund);

            entity.ToTable("SourceOfFund");

            entity.Property(e => e.IdSourceOfFund)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("ID_SourceOfFund");

            entity.Property(e => e.SourceOfFund1)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("SourceOfFund");
        });

        modelBuilder.Entity<SqlExecutorDetail>(entity =>
        {
            entity.HasKey(e => e.IdSqlExecutorDetails);

            entity.Property(e => e.IdSqlExecutorDetails)
                .ValueGeneratedNever()
                .HasColumnName("ID_SqlExecutorDetails");

            entity.Property(e => e.IdSqlExecutorMaster).HasColumnName("ID_SqlExecutorMaster");

            entity.Property(e => e.SqlMessage).HasColumnType("text");

            entity.Property(e => e.SqlScript).HasColumnType("text");
        });

        modelBuilder.Entity<SqlExecutorMaster>(entity =>
        {
            entity.HasKey(e => e.IdSqlExecutorMaster);

            entity.ToTable("SqlExecutorMaster");

            entity.Property(e => e.IdSqlExecutorMaster)
                .ValueGeneratedNever()
                .HasColumnName("ID_SqlExecutorMaster");

            entity.Property(e => e.ExecutedBy)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.ExecutionDate).HasColumnType("datetime");

            entity.Property(e => e.LoadDate).HasColumnType("datetime");

            entity.Property(e => e.VersionNotes)
                .HasMaxLength(250)
                .IsUnicode(false);
        });

        modelBuilder.Entity<State>(entity =>
        {
            entity.HasIndex(e => e.Title, "KeyTitle8")
                .IsUnique();

            entity.Property(e => e.StateId)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("StateID")
                .IsFixedLength();

            
                
                

            entity.Property(e => e.Title)
                .HasMaxLength(20)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<StokExch>(entity =>
        {
            entity.HasKey(e => e.SecId)
                .HasName("KeySecId");

            entity.ToTable("StokExch");

            entity.HasIndex(e => e.Title, "KeyTitle7")
                .IsUnique();

            entity.Property(e => e.SecId).HasColumnName("SecID");

            
                
                

            entity.Property(e => e.Title)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<SubAssetClass>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("SubAssetClass");

            entity.Property(e => e.AssetClass)
                .HasMaxLength(12)
                .IsUnicode(false);

            entity.Property(e => e.IdInv)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("ID_INV");

            entity.Property(e => e.SubAssetClass1)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SubAssetClass");
        });

        modelBuilder.Entity<SubTable>(entity =>
        {
            entity.HasNoKey();

            entity.ToTable("SubTable");

            entity.Property(e => e.IdSub)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID_Sub");

            entity.Property(e => e.IdTemp).HasColumnName("ID_Temp");

            entity.Property(e => e.PayBackDate).HasColumnType("datetime");

            entity.Property(e => e.PrincipalAmt).HasColumnType("decimal(20, 2)");
        });

        modelBuilder.Entity<Syncobj0x3044373133423143>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("syncobj_0x3044373133423143");

            entity.Property(e => e.CertificateNo)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.IdPorfolioContributor).HasColumnName("ID_PorfolioContributor");

            entity.Property(e => e.IdPortfolioContributorAccount).HasColumnName("ID_PortfolioContributorAccount");

            entity.Property(e => e.IdPortfolioContributorRedemption)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID_PortfolioContributorRedemption");

            entity.Property(e => e.IdRedemptionContributorAccount).HasColumnName("ID_RedemptionContributorAccount");

            entity.Property(e => e.NetSettlement).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.NoOfUnits).HasColumnType("decimal(24, 4)");

            entity.Property(e => e.OfferPrice).HasColumnType("decimal(18, 4)");

            entity.Property(e => e.PenaltyAmount).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.SalesValue).HasColumnType("decimal(18, 2)");
        });

        modelBuilder.Entity<Syncobj0x3045313432333641>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("syncobj_0x3045313432333641");

            entity.Property(e => e.AccountNo)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.Amount).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.BankBranchName)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.CapturedBy)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.CertficateStatus)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.CertificateNo)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.CertificateUnits).HasColumnType("decimal(24, 4)");

            entity.Property(e => e.ChequeNo)
                .HasMaxLength(10)
                .IsUnicode(false);

            entity.Property(e => e.Comments).HasColumnType("text");

            entity.Property(e => e.CostOfUnits).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.GlPostPeriod)
                .HasMaxLength(6)
                .IsUnicode(false);

            entity.Property(e => e.GlpostDate)
                .HasColumnType("datetime")
                .HasColumnName("GLPostDate");

            entity.Property(e => e.IdBank)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("ID_Bank");

            entity.Property(e => e.IdBankAccount)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("ID_BankAccount");

            entity.Property(e => e.IdCurrency)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("ID_Currency");

            entity.Property(e => e.IdImpPrtContributoAccount).HasColumnName("ID_ImpPrtContributoAccount");

            entity.Property(e => e.IdPortfolio).HasColumnName("ID_Portfolio");

            entity.Property(e => e.IdPortfolioContributor).HasColumnName("ID_PortfolioContributor");

            entity.Property(e => e.IdPortfolioContributorAccount)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID_PortfolioContributorAccount");

            entity.Property(e => e.IdPortfolioContributorBulkAccount).HasColumnName("ID_PortfolioContributorBulkAccount");

            entity.Property(e => e.IncentiveDueNow).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.Narration)
                .HasMaxLength(200)
                .IsUnicode(false);

            entity.Property(e => e.NoOfUnits).HasColumnType("decimal(24, 4)");

            entity.Property(e => e.PaymentType)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.PenaltyCharge).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.ReceiptDate).HasColumnType("datetime");

            entity.Property(e => e.ReversalId).HasColumnName("ReversalID");

            entity.Property(e => e.Status)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.TransactionDate).HasColumnType("datetime");

            entity.Property(e => e.TransactionType)
                .HasMaxLength(1)
                .IsUnicode(false);

            entity.Property(e => e.UniqueId).HasColumnName("UniqueID");

            entity.Property(e => e.UnitValue).HasColumnType("decimal(18, 4)");

            entity.Property(e => e.UnitsSold).HasColumnType("decimal(24, 4)");

            entity.Property(e => e.ValueDate).HasColumnType("datetime");

            entity.Property(e => e.VoucherNo)
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Syncobj0x3133324630454143>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("syncobj_0x3133324630454143");

            entity.Property(e => e.BidPrice).HasColumnType("decimal(18, 4)");

            entity.Property(e => e.IdPortfolio).HasColumnName("ID_Portfolio");

            entity.Property(e => e.IdPortfolioValuationHistory)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID_PortfolioValuationHistory");

            entity.Property(e => e.NetAssetVaule).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.OfferPrice).HasColumnType("decimal(18, 4)");

            entity.Property(e => e.TotalUnits).HasColumnType("decimal(31, 4)");

            entity.Property(e => e.UnitValue).HasColumnType("decimal(18, 4)");

            entity.Property(e => e.ValuationDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<Syncobj0x3243444236374639>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("syncobj_0x3243444236374639");

            entity.Property(e => e.Amount).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.AssetMgrAmount)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("AssetMgr_Amount");

            entity.Property(e => e.CurExRate).HasColumnType("decimal(18, 6)");

            entity.Property(e => e.CustodianAmount)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("Custodian_Amount");

            entity.Property(e => e.GlPostPeriod)
                .HasMaxLength(6)
                .IsUnicode(false);

            entity.Property(e => e.GlpostDate)
                .HasColumnType("datetime")
                .HasColumnName("GLPostDate");

            entity.Property(e => e.IdCurrency)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("ID_Currency");

            entity.Property(e => e.IdPortfolio).HasColumnName("ID_Portfolio");

            entity.Property(e => e.IdPortfolioInvoice).HasColumnName("ID_PortfolioInvoice");

            entity.Property(e => e.IdPortfolioManagementFees)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID_PortfolioManagementFees");

            entity.Property(e => e.Narration)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.Property(e => e.NetAssetValue).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.RebateAmount).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.RegulatorAmount)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("Regulator_Amount");

            entity.Property(e => e.TransactionDate).HasColumnType("datetime");

            entity.Property(e => e.ValueDate).HasColumnType("datetime");

            entity.Property(e => e.VatAmount).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.VoucherNo)
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Syncobj0x3343334331303741>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("syncobj_0x3343334331303741");

            entity.Property(e => e.IdPortfolio).HasColumnName("ID_Portfolio");

            entity.Property(e => e.IdPortfolioAccount).HasColumnName("ID_PortfolioAccount");

            entity.Property(e => e.IdPortfolioUnitHistory)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID_PortfolioUnitHistory");

            entity.Property(e => e.MovementDate).HasColumnType("datetime");

            entity.Property(e => e.Narration)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.Property(e => e.UnitAmount).HasColumnType("decimal(18, 4)");

            entity.Property(e => e.UnitPrice).HasColumnType("decimal(18, 4)");

            entity.Property(e => e.ValueDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<Syncobj0x3439303439303042>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("syncobj_0x3439303439303042");

            entity.Property(e => e.IdInvestmentType)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("ID_InvestmentType");

            entity.Property(e => e.InvestmentClass)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.InvestmentType)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.IssueBasedOn)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.IssuerBasedOn)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.MaxPerIssue).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.MaxPerIssuer).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.RegulatoryMax).HasColumnType("decimal(18, 2)");
        });

        modelBuilder.Entity<Syncobj0x3630464542343044>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("syncobj_0x3630464542343044");

            entity.Property(e => e.DividendAmount).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.IdPortfolio).HasColumnName("ID_Portfolio");

            entity.Property(e => e.IdPortfolioContributor).HasColumnName("ID_PortfolioContributor");

            entity.Property(e => e.IdPortfolioContributorAccount).HasColumnName("ID_PortfolioContributorAccount");

            entity.Property(e => e.IdPortfolioDividendAllocation)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID_PortfolioDividendAllocation");

            entity.Property(e => e.IdPortfolioDividendMaster).HasColumnName("ID_PortfolioDividendMaster");

            entity.Property(e => e.OfferPrice).HasColumnType("decimal(18, 4)");

            entity.Property(e => e.TreatmentType)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.UnitsAmount).HasColumnType("decimal(28, 4)");

            entity.Property(e => e.UnitsOwned).HasColumnType("decimal(31, 4)");
        });

        modelBuilder.Entity<Syncobj0x3635423843373137>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("syncobj_0x3635423843373137");

            entity.Property(e => e.AccountCode)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.AccountNo)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.Address01)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.Property(e => e.Address02)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.Property(e => e.AgentCode)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.AgentName)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.AlternateEmail)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.Property(e => e.AnnualIncome).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.BankAccountName)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.Property(e => e.BankBranchName)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.BusAddress01)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.BusAddress02)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.BusTelephone)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.BusinessName)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.Property(e => e.ChildOtherNames)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.ChildSurName)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.City)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.Comments).HasColumnType("text");

            entity.Property(e => e.ContactPerson)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.Property(e => e.DateClosed).HasColumnType("datetime");

            entity.Property(e => e.DateOfBirth).HasColumnType("datetime");

            entity.Property(e => e.DateOpened).HasColumnType("datetime");

            entity.Property(e => e.Email)
                .HasMaxLength(250)
                .IsUnicode(false);

            entity.Property(e => e.EmployeeNo)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.EmploymentDate).HasColumnType("datetime");

            entity.Property(e => e.FirstName)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.FullName)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.Property(e => e.HearedFrom)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.IdBank)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("ID_Bank");

            entity.Property(e => e.IdBusState)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("ID_BusState");

            entity.Property(e => e.IdCountry)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("ID_Country");

            entity.Property(e => e.IdNationailty)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("ID_Nationailty");

            entity.Property(e => e.IdOccupation).HasColumnName("ID_Occupation");

            entity.Property(e => e.IdPortfolioContributor)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID_PortfolioContributor");

            entity.Property(e => e.IdReferedByBranch)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("ID_ReferedByBranch");

            entity.Property(e => e.IdState)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("ID_State");

            entity.Property(e => e.InitalAmount).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.JobTitle)
                .HasMaxLength(10)
                .IsUnicode(false);

            entity.Property(e => e.JointOtherNames)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.JointSurName)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.LastLoginDate).HasColumnType("datetime");

            entity.Property(e => e.LastName)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.MaritalStatus)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.MobileNo)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.NameOfSpouse)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.Property(e => e.NextOfKin)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.Property(e => e.NextOfKinAddress).HasColumnType("text");

            entity.Property(e => e.NextofKinTelephone)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.NoOfUnits).HasColumnType("decimal(31, 4)");

            entity.Property(e => e.PaymentMethod)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.PinNo)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.Rcnumber)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("RCNumber");

            entity.Property(e => e.Status)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.Telephone)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.Property(e => e.Title)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.WebPassword)
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Syncobj0x4146433536424535>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("syncobj_0x4146433536424535");

            entity.Property(e => e.AccountClass)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.AccountClosureDate).HasColumnType("datetime");

            entity.Property(e => e.AccountOpenDate).HasColumnType("datetime");

            entity.Property(e => e.Address01)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.Address02)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.ApplyVat).HasColumnName("ApplyVAT");

            entity.Property(e => e.ApprovedBy)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.BidPrice).HasColumnType("decimal(18, 8)");

            entity.Property(e => e.BrokerageFee).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.BuyComisionRate)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("Buy_ComisionRate");

            entity.Property(e => e.CapturedBy)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.ChargeFeesOnGrossNav).HasColumnName("ChargeFeesOnGrossNAV");

            entity.Property(e => e.Comments).HasColumnType("text");

            entity.Property(e => e.ContactPerson)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.ContractDate).HasColumnType("datetime");

            entity.Property(e => e.CrIntRate).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.Cscsid)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CSCSID");

            entity.Property(e => e.DateOfBirth).HasColumnType("datetime");

            entity.Property(e => e.DeliverReportByEMail).HasColumnName("DeliverReportBy_eMail");

            entity.Property(e => e.DeliverReportByHold).HasColumnName("DeliverReportBy_Hold");

            entity.Property(e => e.DeliverReportByPost).HasColumnName("DeliverReportBy_Post");

            entity.Property(e => e.DrIntRate).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.EarlyTerminationPenalty)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.Email)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.EmploymentStatus)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.EquityValuationMedhod)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.ExpireDate).HasColumnType("datetime");

            entity.Property(e => e.FeesIncomeReserve)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.FirstName)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.Property(e => e.FixedIncomeValuationMethod)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.GsmNo)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.GuaranteeYield).HasColumnType("decimal(18, 4)");

            entity.Property(e => e.IdCurrency)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("ID_Currency");

            entity.Property(e => e.IdEmployer).HasColumnName("ID_Employer");

            entity.Property(e => e.IdIncentiveBenchmark).HasColumnName("ID_IncentiveBenchmark");

            entity.Property(e => e.IdPortfolio)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID_Portfolio");

            entity.Property(e => e.IdPortfolioContributor).HasColumnName("ID_PortfolioContributor");

            entity.Property(e => e.IdPortfolioGroup).HasColumnName("ID_PortfolioGroup");

            entity.Property(e => e.IdReferedByBranch)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ID_ReferedByBranch");

            entity.Property(e => e.IdRelationshipManager)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("ID_RelationshipManager");

            entity.Property(e => e.IdState)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("ID_State");

            entity.Property(e => e.IncentiveBasedOn)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.IncentiveCalcMethod)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.IncentiveIncomeActNo)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.IncentiveRate).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.IncomeFeesAccountNo)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.IncomeFeesRate).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.InitialInvestmentAmount).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.InitialUnitValue).HasColumnType("decimal(18, 8)");

            entity.Property(e => e.InterestExpenseActNo)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.InterestIncomeActNo)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.InvestorActNo)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.LastCompoundDate).HasColumnType("datetime");

            entity.Property(e => e.LastIncentiveDueDate).HasColumnType("datetime");

            entity.Property(e => e.LastMgtFeeDeductDate).HasColumnType("datetime");

            entity.Property(e => e.LastRenuwalDate).HasColumnType("datetime");

            entity.Property(e => e.LockInPenaltyRate).HasColumnType("decimal(18, 4)");

            entity.Property(e => e.MainAccount)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.ManagementFees).HasColumnType("decimal(18, 8)");

            entity.Property(e => e.ManagementFeesIncomeAccount)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.MgtFeesBasedOn)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.MgtFeesPer)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.MinCrBalance).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.NetAssetValue).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.NextIncentiveDueDate).HasColumnType("datetime");

            entity.Property(e => e.NextMgtFeeDeductDate).HasColumnType("datetime");

            entity.Property(e => e.OfferPrice).HasColumnType("decimal(18, 8)");

            entity.Property(e => e.PcmmgtFees)
                .HasColumnType("decimal(18, 8)")
                .HasColumnName("PCMMgtFees");

            entity.Property(e => e.PenaltyMgtFeesRate).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.PfamgtFees)
                .HasColumnType("decimal(18, 8)")
                .HasColumnName("PFAMgtFees");

            entity.Property(e => e.PfcmgtFees)
                .HasColumnType("decimal(18, 8)")
                .HasColumnName("PFCMgtFees");

            entity.Property(e => e.PinNo)
                .HasMaxLength(10)
                .IsUnicode(false);

            entity.Property(e => e.Portfolio)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.Pword)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("PWord");

            entity.Property(e => e.RealEstateValuationMethod)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.ReferedByOfficer)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.RegistrarId).HasColumnName("RegistrarID");

            entity.Property(e => e.ReportDeliveryMethod)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.RiskFactor).HasColumnType("decimal(18, 4)");

            entity.Property(e => e.SearchComments)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.SellComisionRate)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("Sell_ComisionRate");

            entity.Property(e => e.Sex)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.SfkaccountCode)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SFKAccountCode");

            entity.Property(e => e.ShortName)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.Status)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.SurName)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.Property(e => e.Telephones)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.TimeFactor).HasColumnType("decimal(18, 4)");

            entity.Property(e => e.TotalUnits).HasColumnType("decimal(31, 4)");

            entity.Property(e => e.ValuationDate).HasColumnType("datetime");

            entity.Property(e => e.WaiverNotes)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.XMasGift).HasColumnName("xMasGift");
        });

        modelBuilder.Entity<Syncobj0x4333343830413130>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("syncobj_0x4333343830413130");

            entity.Property(e => e.Amount2Share).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.ApprovedBy)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.BonusFor)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("Bonus_For");

            entity.Property(e => e.BonusRate)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("Bonus_Rate");

            entity.Property(e => e.CaptureBy)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.ClosureDate).HasColumnType("datetime");

            entity.Property(e => e.Comments).HasColumnType("text");

            entity.Property(e => e.DividendRate).HasColumnType("decimal(18, 4)");

            entity.Property(e => e.GlPostDate).HasColumnType("datetime");

            entity.Property(e => e.GrossFundUnits).HasColumnType("decimal(31, 4)");

            entity.Property(e => e.IdPortfolio).HasColumnName("ID_Portfolio");

            entity.Property(e => e.IdPortfolioDividendMaster)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID_PortfolioDividendMaster");

            entity.Property(e => e.Narration)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.Status)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.TransactionType)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.Units2Share).HasColumnType("decimal(28, 0)");

            entity.Property(e => e.ValueDate).HasColumnType("datetime");

            entity.Property(e => e.VoucherNo)
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Syncobj0x4442393134383637>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("syncobj_0x4442393134383637");

            entity.Property(e => e.Address01)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.Property(e => e.Address02)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.Property(e => e.BrokerPayable2ActNo)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.BrokerPayableActNo)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.BrokerReceivable2ActNo)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.BrokerReceivableActNo)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.Cash1AccountNo)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.Cash2AccountNo)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.ClosedPfa).HasColumnName("ClosedPFA");

            entity.Property(e => e.CompanyName)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.Property(e => e.ConfigSystemFor)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.CotRate).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.Deposit2BrokerActNo)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.FeesIncomeActNo)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.FinYearBegin)
                .HasMaxLength(3)
                .IsUnicode(false);

            entity.Property(e => e.Gl2moneytorFolder)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("GL2MoneytorFolder");

            entity.Property(e => e.GlexportFile)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("GLExportFile");

            entity.Property(e => e.Glsoftware)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("GLSoftware");

            entity.Property(e => e.Gsm1stThreeDigit)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("GSM1stThreeDigit");

            entity.Property(e => e.GsmnumberLenght).HasColumnName("GSMNumberLenght");

            entity.Property(e => e.IdApplication)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("ID_Application");

            entity.Property(e => e.IdHomeBranch)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("ID_HomeBranch");

            entity.Property(e => e.IdLocalCurrency)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("ID_LocalCurrency");

            entity.Property(e => e.IdLocation)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("ID_Location");

            entity.Property(e => e.IdPfcState)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("ID_PfcState");

            entity.Property(e => e.IdPreferences)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID_Preferences");

            entity.Property(e => e.IdProductLine)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("ID_ProductLine");

            entity.Property(e => e.IdState)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("ID_State");

            entity.Property(e => e.IntRecableActNo)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.Logo).HasColumnType("image");

            entity.Property(e => e.MailType)
                .HasMaxLength(4)
                .IsUnicode(false);

            entity.Property(e => e.MinimumDaysInPeriodB4fees).HasColumnName("MinimumDaysInPeriodB4Fees");

            entity.Property(e => e.Money4LodgementActNo)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.Money4PaymentActNo)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.MoneyBookDatabaseName)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.NextFeesDeductionDate).HasColumnType("datetime");

            entity.Property(e => e.Pfa2PfcFolder)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.PfaCode)
                .HasMaxLength(10)
                .IsUnicode(false);

            entity.Property(e => e.Pfc2PfaFolder)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.PfcAddress01)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.Property(e => e.PfcAddress02)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.Property(e => e.PfcBankCode)
                .HasMaxLength(10)
                .IsUnicode(false);

            entity.Property(e => e.PfcContact)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.Property(e => e.PfcName)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.Property(e => e.PfcTelephones)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.Property(e => e.Post2Gl).HasColumnName("Post2GL");

            entity.Property(e => e.Provision4LiquidationRate).HasColumnType("decimal(18, 8)");

            entity.Property(e => e.ReplyToAddress)
                .HasMaxLength(150)
                .IsUnicode(false);

            entity.Property(e => e.ReportPayRecAbleInValutaion).HasColumnName("ReportPayRec_ableInValutaion");

            entity.Property(e => e.RequireGsmNumber).HasColumnName("RequireGSM_Number");

            entity.Property(e => e.ReturnChqCharge).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.SenderAddress)
                .HasMaxLength(150)
                .IsUnicode(false);

            entity.Property(e => e.SenderName)
                .HasMaxLength(150)
                .IsUnicode(false);

            entity.Property(e => e.ShortCompanyName)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.Smtphost)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SMTPHost");

            entity.Property(e => e.Smtpport)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("SMTPPort");

            entity.Property(e => e.StockBrokerTableName)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.UnitValueFolder)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.VatRate).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.WithTaxRate).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.WitholdTaxGlActNo)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.XmlAuthorisedSignatory)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.Property(e => e.XmlexportPath)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("XMLExportPath");
        });

        modelBuilder.Entity<Tagsave>(entity =>
        {
            entity.HasNoKey();

            entity.ToTable("TAGSAVE");

            entity.HasIndex(e => new { e.Tagid, e.Lastname, e.Firstname }, "UQ__TAGSAVE__076201D4")
                .IsUnique();

            entity.HasIndex(e => new { e.Tagid, e.Lastname, e.Firstname }, "UQ__TAGSAVE__5B78929E")
                .IsUnique();

            entity.Property(e => e.Firstname)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("FIRSTNAME")
                .IsFixedLength();

            entity.Property(e => e.Lastname)
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasColumnName("LASTNAME")
                .IsFixedLength();

            entity.Property(e => e.Tagid).HasColumnName("TAGID");

            entity.Property(e => e.Tagptr).HasColumnName("TAGPTR");
        });

        modelBuilder.Entity<TbillResult>(entity =>
        {
            entity.HasNoKey();

            entity.ToTable("TBill_Result");

            entity.Property(e => e.CustIntrest).HasColumnType("decimal(31, 2)");

            entity.Property(e => e.CustNoNom).HasColumnType("decimal(31, 4)");

            entity.Property(e => e.EndDate).HasColumnType("datetime");

            entity.Property(e => e.IdTbillRawData).HasColumnName("ID_TBillRawData");

            entity.Property(e => e.IdTbillResult)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID_TBillResult");

            entity.Property(e => e.InterestRate).HasColumnType("decimal(31, 2)");

            entity.Property(e => e.IssueDate).HasColumnType("datetime");

            entity.Property(e => e.MaturityDate).HasColumnType("datetime");

            entity.Property(e => e.NetAmount).HasColumnType("decimal(31, 2)");

            entity.Property(e => e.Premium).HasColumnType("decimal(31, 2)");

            entity.Property(e => e.ShortName)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .IsUnicode(false);

            entity.Property(e => e.TotalCost).HasColumnType("decimal(31, 2)");

            entity.Property(e => e.TranCode)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.ValueDate).HasColumnType("datetime");

            entity.Property(e => e.WeightReturns).HasColumnType("decimal(18, 8)");

            entity.Property(e => e.WeightedAverage).HasColumnType("decimal(18, 8)");
        });

        modelBuilder.Entity<TbillTreatmentType>(entity =>
        {
            entity.HasKey(e => e.IdTbillTreatmentType);

            entity.ToTable("TBillTreatmentType");

            entity.HasIndex(e => e.TbillTreatmentType1, "Key_TBillTreatmentType_TreatmentType");

            entity.Property(e => e.IdTbillTreatmentType)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("ID_TBillTreatmentType");

            entity.Property(e => e.TbillTreatmentType1)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("TBillTreatmentType");

            entity.Property(e => e.ValuationMethod)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<Tbl>(entity =>
        {
            entity.HasNoKey();

            entity.ToTable("tbl");

            entity.Property(e => e.Id).HasColumnName("id");

            entity.Property(e => e.Unit).HasColumnType("decimal(18, 4)");
        });

        modelBuilder.Entity<TempBlotterTbillUpload>(entity =>
        {
            entity.HasKey(e => e.IdTempBlotterTbills)
                .HasName("PK_TemBlotterTbillUpload");

            entity.ToTable("TempBlotterTbillUpload");

            entity.Property(e => e.IdTempBlotterTbills).HasColumnName("Id_TempBlotterTbills");

            entity.Property(e => e.Broker)
                .HasMaxLength(150)
                .HasColumnName("BROKER");

            entity.Property(e => e.Countterparty)
                .HasMaxLength(150)
                .HasColumnName("COUNTTERPARTY");

            entity.Property(e => e.Dealdate)
                .HasColumnType("datetime")
                .HasColumnName("DEALDATE");

            entity.Property(e => e.Discountedvalue)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("DISCOUNTEDVALUE");

            entity.Property(e => e.Discountrate)
                .HasColumnType("decimal(18, 8)")
                .HasColumnName("DISCOUNTRATE");

            entity.Property(e => e.ExRate).HasColumnType("decimal(18, 4)");

            entity.Property(e => e.Interest)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("INTEREST");

            entity.Property(e => e.Maturitydate)
                .HasColumnType("datetime")
                .HasColumnName("MATURITYDATE");

            entity.Property(e => e.Ntbvalue)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("NTBVALUE");

            entity.Property(e => e.Portfolio)
                .HasMaxLength(50)
                .HasColumnName("PORTFOLIO");

            entity.Property(e => e.Settlementdate)
                .HasColumnType("datetime")
                .HasColumnName("SETTLEMENTDATE");

            entity.Property(e => e.Tenor).HasColumnName("TENOR");

            entity.Property(e => e.Tradetype)
                .HasMaxLength(30)
                .HasColumnName("TRADETYPE");
        });

        modelBuilder.Entity<TempTermInterestTable>(entity =>
        {
            entity.HasKey(e => e.IdDealAmortSchedule);

            entity.ToTable("TempTermInterestTable");

            entity.Property(e => e.IdDealAmortSchedule).HasColumnName("ID_DealAmortSchedule");

            entity.Property(e => e.CapitalisedPostedInterest).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.CloseBalance).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.DueDate).HasColumnType("datetime");

            entity.Property(e => e.IdDealMaster).HasColumnName("ID_DealMaster");

            entity.Property(e => e.IntAmount).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.IntPerDay).HasColumnType("decimal(31, 15)");

            entity.Property(e => e.OpenBalance).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.PrnAmount).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.RentalAmount).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.ReversalId).HasColumnName("ReversalID");

            entity.Property(e => e.UniqueUserId)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("UniqueUserID");

            entity.Property(e => e.WithTaxAmount).HasColumnType("decimal(18, 2)");
        });

        modelBuilder.Entity<Tmp103PortfolioInvestmentSummary>(entity =>
        {
            entity.HasKey(e => e.IdPortfolioInvestmentSummary)
                .HasName("PK__Tmp_103_Portfoli__43BC023D");

            entity.ToTable("Tmp_103_PortfolioInvestmentSummary");

            entity.Property(e => e.IdPortfolioInvestmentSummary)
                .ValueGeneratedNever()
                .HasColumnName("ID_PortfolioInvestmentSummary");

            entity.Property(e => e.Assetvalue)
                .HasColumnType("decimal(31, 2)")
                .HasColumnName("ASSETVALUE");

            entity.Property(e => e.Costofasset)
                .HasColumnType("decimal(31, 2)")
                .HasColumnName("COSTOFASSET");

            entity.Property(e => e.IdInvestmentType)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("ID_InvestmentType")
                .IsFixedLength();

            entity.Property(e => e.IdPortfolio).HasColumnName("ID_Portfolio");

            entity.Property(e => e.Pcentgainloss)
                .HasColumnType("decimal(19, 2)")
                .HasColumnName("PCENTGAINLOSS");

            entity.Property(e => e.Pcentoftotal)
                .HasColumnType("decimal(19, 2)")
                .HasColumnName("PCENTOFTOTAL");

            entity.Property(e => e.Valuedate)
                .HasColumnType("datetime")
                .HasColumnName("VALUEDATE");
        });

        modelBuilder.Entity<Tmp104PortfolioInvestmentSummary>(entity =>
        {
            entity.HasKey(e => e.IdPortfolioInvestmentSummary)
                .HasName("PK__Tmp_104_Portfoli__6C8B6FAB");

            entity.ToTable("Tmp_104_PortfolioInvestmentSummary");

            entity.Property(e => e.IdPortfolioInvestmentSummary)
                .ValueGeneratedNever()
                .HasColumnName("ID_PortfolioInvestmentSummary");

            entity.Property(e => e.Assetvalue)
                .HasColumnType("decimal(31, 2)")
                .HasColumnName("ASSETVALUE");

            entity.Property(e => e.Costofasset)
                .HasColumnType("decimal(31, 2)")
                .HasColumnName("COSTOFASSET");

            entity.Property(e => e.IdInvestmentType)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("ID_InvestmentType")
                .IsFixedLength();

            entity.Property(e => e.IdPortfolio).HasColumnName("ID_Portfolio");

            entity.Property(e => e.Pcentgainloss)
                .HasColumnType("decimal(19, 2)")
                .HasColumnName("PCENTGAINLOSS");

            entity.Property(e => e.Pcentoftotal)
                .HasColumnType("decimal(19, 2)")
                .HasColumnName("PCENTOFTOTAL");

            entity.Property(e => e.Valuedate)
                .HasColumnType("datetime")
                .HasColumnName("VALUEDATE");
        });

        modelBuilder.Entity<Tmp106PortfolioInvestmentSummary>(entity =>
        {
            entity.HasKey(e => e.IdPortfolioInvestmentSummary)
                .HasName("PK__Tmp_106_Portfoli__542B6CE3");

            entity.ToTable("Tmp_106_PortfolioInvestmentSummary");

            entity.Property(e => e.IdPortfolioInvestmentSummary)
                .ValueGeneratedNever()
                .HasColumnName("ID_PortfolioInvestmentSummary");

            entity.Property(e => e.Assetvalue)
                .HasColumnType("decimal(31, 2)")
                .HasColumnName("ASSETVALUE");

            entity.Property(e => e.Costofasset)
                .HasColumnType("decimal(31, 2)")
                .HasColumnName("COSTOFASSET");

            entity.Property(e => e.IdInvestmentType)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("ID_InvestmentType")
                .IsFixedLength();

            entity.Property(e => e.IdPortfolio).HasColumnName("ID_Portfolio");

            entity.Property(e => e.Pcentgainloss)
                .HasColumnType("decimal(19, 2)")
                .HasColumnName("PCENTGAINLOSS");

            entity.Property(e => e.Pcentoftotal)
                .HasColumnType("decimal(19, 2)")
                .HasColumnName("PCENTOFTOTAL");

            entity.Property(e => e.Valuedate)
                .HasColumnType("datetime")
                .HasColumnName("VALUEDATE");
        });

        modelBuilder.Entity<Tmp108PortfolioInvestmentSummary>(entity =>
        {
            entity.HasKey(e => e.IdPortfolioInvestmentSummary)
                .HasName("PK__Tmp_108_Portfoli__0E8B81F4");

            entity.ToTable("Tmp_108_PortfolioInvestmentSummary");

            entity.Property(e => e.IdPortfolioInvestmentSummary)
                .ValueGeneratedNever()
                .HasColumnName("ID_PortfolioInvestmentSummary");

            entity.Property(e => e.Assetvalue)
                .HasColumnType("decimal(31, 2)")
                .HasColumnName("ASSETVALUE");

            entity.Property(e => e.Costofasset)
                .HasColumnType("decimal(31, 2)")
                .HasColumnName("COSTOFASSET");

            entity.Property(e => e.IdInvestmentType)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("ID_InvestmentType")
                .IsFixedLength();

            entity.Property(e => e.IdPortfolio).HasColumnName("ID_Portfolio");

            entity.Property(e => e.Pcentgainloss)
                .HasColumnType("decimal(19, 2)")
                .HasColumnName("PCENTGAINLOSS");

            entity.Property(e => e.Pcentoftotal)
                .HasColumnType("decimal(19, 2)")
                .HasColumnName("PCENTOFTOTAL");

            entity.Property(e => e.Valuedate)
                .HasColumnType("datetime")
                .HasColumnName("VALUEDATE");
        });

        modelBuilder.Entity<Tmp109DealDistribution>(entity =>
        {
            entity.HasNoKey();

            entity.ToTable("Tmp_109_DealDistribution");

            entity.Property(e => e.DueDate).HasColumnType("datetime");

            entity.Property(e => e.IdCustomer).HasColumnName("ID_Customer");

            entity.Property(e => e.IdDealMaster).HasColumnName("ID_DealMaster");

            entity.Property(e => e.IdDealPrtDistribution)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID_DealPrtDistribution");

            entity.Property(e => e.IdDealType)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("ID_DealType");

            entity.Property(e => e.IdPortfolio).HasColumnName("ID_Portfolio");

            entity.Property(e => e.Interest).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.MarketValue).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.Principal).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.Status)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<Tmp109PortfolioInvestmentSummary>(entity =>
        {
            entity.HasKey(e => e.IdPortfolioInvestmentSummary)
                .HasName("PK__Tmp_109_Portfoli__028AA023");

            entity.ToTable("Tmp_109_PortfolioInvestmentSummary");

            entity.Property(e => e.IdPortfolioInvestmentSummary)
                .ValueGeneratedNever()
                .HasColumnName("ID_PortfolioInvestmentSummary");

            entity.Property(e => e.Assetvalue)
                .HasColumnType("decimal(31, 2)")
                .HasColumnName("ASSETVALUE");

            entity.Property(e => e.Costofasset)
                .HasColumnType("decimal(31, 2)")
                .HasColumnName("COSTOFASSET");

            entity.Property(e => e.IdInvestmentType)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("ID_InvestmentType")
                .IsFixedLength();

            entity.Property(e => e.IdPortfolio).HasColumnName("ID_Portfolio");

            entity.Property(e => e.Pcentgainloss)
                .HasColumnType("decimal(19, 2)")
                .HasColumnName("PCENTGAINLOSS");

            entity.Property(e => e.Pcentoftotal)
                .HasColumnType("decimal(19, 2)")
                .HasColumnName("PCENTOFTOTAL");

            entity.Property(e => e.Valuedate)
                .HasColumnType("datetime")
                .HasColumnName("VALUEDATE");
        });

        modelBuilder.Entity<Tmp10DealDistribution>(entity =>
        {
            entity.HasNoKey();

            entity.ToTable("Tmp_10_DealDistribution");

            entity.Property(e => e.DueDate).HasColumnType("datetime");

            entity.Property(e => e.IdCustomer).HasColumnName("ID_Customer");

            entity.Property(e => e.IdDealMaster).HasColumnName("ID_DealMaster");

            entity.Property(e => e.IdDealPrtDistribution)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID_DealPrtDistribution");

            entity.Property(e => e.IdDealType)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("ID_DealType");

            entity.Property(e => e.IdPortfolio).HasColumnName("ID_Portfolio");

            entity.Property(e => e.Interest).HasColumnType("decimal(18, 0)");

            entity.Property(e => e.MarketValue).HasColumnType("decimal(18, 0)");

            entity.Property(e => e.Principal).HasColumnType("decimal(18, 0)");

            entity.Property(e => e.Status)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<Tmp10NavVsIndex>(entity =>
        {
            entity.HasNoKey();

            entity.ToTable("Tmp_10_NAV_vs_INDEX");

            entity.Property(e => e.IdBenchMark).HasColumnName("ID_BenchMark");

            entity.Property(e => e.IdPortfolio).HasColumnName("ID_Portfolio");

            entity.Property(e => e.IdPortfolioPerformance)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID_PortfolioPerformance");

            entity.Property(e => e.ReBaseIndex)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("ReBase_Index");

            entity.Property(e => e.ReBaseNav)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("ReBase_NAV");

            entity.Property(e => e.ValueDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<Tmp10PortfolioInvestmentSummary>(entity =>
        {
            entity.HasKey(e => e.IdPortfolioInvestmentSummary)
                .HasName("PK__Tmp_10_Portfolio__4EEFC496");

            entity.ToTable("Tmp_10_PortfolioInvestmentSummary");

            entity.Property(e => e.IdPortfolioInvestmentSummary)
                .ValueGeneratedNever()
                .HasColumnName("ID_PortfolioInvestmentSummary");

            entity.Property(e => e.Assetvalue)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("ASSETVALUE");

            entity.Property(e => e.Costofasset)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("COSTOFASSET");

            entity.Property(e => e.IdInvestmentType)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("ID_InvestmentType")
                .IsFixedLength();

            entity.Property(e => e.IdPortfolio).HasColumnName("ID_Portfolio");

            entity.Property(e => e.Pcentgainloss)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("PCENTGAINLOSS");

            entity.Property(e => e.Pcentoftotal)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("PCENTOFTOTAL");

            entity.Property(e => e.Valuedate)
                .HasColumnType("datetime")
                .HasColumnName("VALUEDATE");
        });

        modelBuilder.Entity<Tmp10Sum2Return>(entity =>
        {
            entity.HasNoKey();

            entity.ToTable("Tmp_10_Sum2Return");

            entity.HasIndex(e => e.Amount, "UQ__Tmp_10_Sum2Retur__035DFD74")
                .IsUnique();

            entity.HasIndex(e => e.Amount, "UQ__Tmp_10_Sum2Retur__3B920C08")
                .IsUnique();

            entity.HasIndex(e => e.Amount, "UQ__Tmp_10_Sum2Retur__48F2FB6B")
                .IsUnique();

            entity.HasIndex(e => e.Amount, "UQ__Tmp_10_Sum2Retur__50849DFB")
                .IsUnique();

            entity.HasIndex(e => e.Amount, "UQ__Tmp_10_Sum2Retur__709AD124")
                .IsUnique();

            entity.Property(e => e.Amount)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("AMOUNT");
        });

        modelBuilder.Entity<Tmp11NavVsIndex>(entity =>
        {
            entity.HasKey(e => e.IdPortfolioPerformance);

            entity.ToTable("Tmp_11_NAV_vs_INDEX");

            entity.Property(e => e.IdPortfolioPerformance).HasColumnName("ID_PortfolioPerformance");

            entity.Property(e => e.IdBenchMark).HasColumnName("ID_BenchMark");

            entity.Property(e => e.IdPortfolio).HasColumnName("ID_Portfolio");

            entity.Property(e => e.ReBaseIndex)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("ReBase_Index");

            entity.Property(e => e.ReBaseNav)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("ReBase_NAV");

            entity.Property(e => e.ValueDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<Tmp11PortfolioInvestmentSummary>(entity =>
        {
            entity.HasKey(e => e.IdPortfolioInvestmentSummary)
                .HasName("PK__Tmp_11_Portfolio__2375C74B");

            entity.ToTable("Tmp_11_PortfolioInvestmentSummary");

            entity.Property(e => e.IdPortfolioInvestmentSummary)
                .ValueGeneratedNever()
                .HasColumnName("ID_PortfolioInvestmentSummary");

            entity.Property(e => e.Assetvalue)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("ASSETVALUE");

            entity.Property(e => e.Costofasset)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("COSTOFASSET");

            entity.Property(e => e.IdInvestmentType)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("ID_InvestmentType")
                .IsFixedLength();

            entity.Property(e => e.IdPortfolio).HasColumnName("ID_Portfolio");

            entity.Property(e => e.Pcentgainloss)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("PCENTGAINLOSS");

            entity.Property(e => e.Pcentoftotal)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("PCENTOFTOTAL");

            entity.Property(e => e.Valuedate)
                .HasColumnType("datetime")
                .HasColumnName("VALUEDATE");
        });

        modelBuilder.Entity<Tmp11Sum2Return>(entity =>
        {
            entity.HasNoKey();

            entity.ToTable("Tmp_11_Sum2Return");

            entity.HasIndex(e => e.Amount, "UQ__Tmp_11_Sum2Retur__02E830D1")
                .IsUnique();

            entity.HasIndex(e => e.Amount, "UQ__Tmp_11_Sum2Retur__13593225")
                .IsUnique();

            entity.HasIndex(e => e.Amount, "UQ__Tmp_11_Sum2Retur__15F1AEFB")
                .IsUnique();

            entity.HasIndex(e => e.Amount, "UQ__Tmp_11_Sum2Retur__2018A105")
                .IsUnique();

            entity.HasIndex(e => e.Amount, "UQ__Tmp_11_Sum2Retur__21FD228E")
                .IsUnique();

            entity.HasIndex(e => e.Amount, "UQ__Tmp_11_Sum2Retur__3B4C8585")
                .IsUnique();

            entity.HasIndex(e => e.Amount, "UQ__Tmp_11_Sum2Retur__5A27A90E")
                .IsUnique();

            entity.Property(e => e.Amount)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("AMOUNT");
        });

        modelBuilder.Entity<Tmp12NavVsIndex>(entity =>
        {
            entity.HasNoKey();

            entity.ToTable("Tmp_12_NAV_vs_INDEX");

            entity.Property(e => e.IdBenchMark).HasColumnName("ID_BenchMark");

            entity.Property(e => e.IdPortfolio).HasColumnName("ID_Portfolio");

            entity.Property(e => e.IdPortfolioPerformance)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID_PortfolioPerformance");

            entity.Property(e => e.ReBaseIndex)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("ReBase_Index");

            entity.Property(e => e.ReBaseNav)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("ReBase_NAV");

            entity.Property(e => e.ValueDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<Tmp12PortfolioInvestmentSummary>(entity =>
        {
            entity.HasKey(e => e.IdPortfolioInvestmentSummary)
                .HasName("PK__Tmp_12_Portfolio__5709AE93");

            entity.ToTable("Tmp_12_PortfolioInvestmentSummary");

            entity.Property(e => e.IdPortfolioInvestmentSummary)
                .ValueGeneratedNever()
                .HasColumnName("ID_PortfolioInvestmentSummary");

            entity.Property(e => e.Assetvalue)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("ASSETVALUE");

            entity.Property(e => e.Costofasset)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("COSTOFASSET");

            entity.Property(e => e.IdInvestmentType)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("ID_InvestmentType")
                .IsFixedLength();

            entity.Property(e => e.IdPortfolio).HasColumnName("ID_Portfolio");

            entity.Property(e => e.Pcentgainloss)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("PCENTGAINLOSS");

            entity.Property(e => e.Pcentoftotal)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("PCENTOFTOTAL");

            entity.Property(e => e.Valuedate)
                .HasColumnType("datetime")
                .HasColumnName("VALUEDATE");
        });

        modelBuilder.Entity<Tmp12Sum2Return>(entity =>
        {
            entity.HasNoKey();

            entity.ToTable("Tmp_12_Sum2Return");

            entity.HasIndex(e => e.Amount, "UQ__Tmp_12_Sum2Retur__2DD42584")
                .IsUnique();

            entity.HasIndex(e => e.Amount, "UQ__Tmp_12_Sum2Retur__49C72413")
                .IsUnique();

            entity.HasIndex(e => e.Amount, "UQ__Tmp_12_Sum2Retur__61556038")
                .IsUnique();

            entity.Property(e => e.Amount)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("AMOUNT");
        });

        modelBuilder.Entity<Tmp13NavVsIndex>(entity =>
        {
            entity.HasNoKey();

            entity.ToTable("Tmp_13_NAV_vs_INDEX");

            entity.Property(e => e.IdBenchMark).HasColumnName("ID_BenchMark");

            entity.Property(e => e.IdPortfolio).HasColumnName("ID_Portfolio");

            entity.Property(e => e.IdPortfolioPerformance)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID_PortfolioPerformance");

            entity.Property(e => e.ReBaseIndex)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("ReBase_Index");

            entity.Property(e => e.ReBaseNav)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("ReBase_NAV");

            entity.Property(e => e.ValueDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<Tmp13Sum2Return>(entity =>
        {
            entity.HasNoKey();

            entity.ToTable("Tmp_13_Sum2Return");

            entity.HasIndex(e => e.Amount, "UQ__Tmp_13_Sum2Retur__01CEB370")
                .IsUnique();

            entity.Property(e => e.Amount)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("AMOUNT");
        });

        modelBuilder.Entity<Tmp14NavVsIndex>(entity =>
        {
            entity.HasNoKey();

            entity.ToTable("Tmp_14_NAV_vs_INDEX");

            entity.Property(e => e.IdBenchMark).HasColumnName("ID_BenchMark");

            entity.Property(e => e.IdPortfolio).HasColumnName("ID_Portfolio");

            entity.Property(e => e.IdPortfolioPerformance)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID_PortfolioPerformance");

            entity.Property(e => e.ReBaseIndex)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("ReBase_Index");

            entity.Property(e => e.ReBaseNav)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("ReBase_NAV");

            entity.Property(e => e.ValueDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<Tmp14Sum2Return>(entity =>
        {
            entity.HasNoKey();

            entity.ToTable("Tmp_14_Sum2Return");

            entity.HasIndex(e => e.Amount, "UQ__Tmp_14_Sum2Retur__2D7D891B")
                .IsUnique();

            entity.Property(e => e.Amount)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("AMOUNT");
        });

        modelBuilder.Entity<Tmp15Sum2Return>(entity =>
        {
            entity.HasNoKey();

            entity.ToTable("Tmp_15_Sum2Return");

            entity.HasIndex(e => e.Amount, "UQ__Tmp_15_Sum2Retur__5D61A667")
                .IsUnique();

            entity.Property(e => e.Amount)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("AMOUNT");
        });

        modelBuilder.Entity<Tmp16NavVsIndex>(entity =>
        {
            entity.HasNoKey();

            entity.ToTable("Tmp_16_NAV_vs_INDEX");

            entity.Property(e => e.IdBenchMark).HasColumnName("ID_BenchMark");

            entity.Property(e => e.IdPortfolio).HasColumnName("ID_Portfolio");

            entity.Property(e => e.IdPortfolioPerformance)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID_PortfolioPerformance");

            entity.Property(e => e.ReBaseIndex)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("ReBase_Index");

            entity.Property(e => e.ReBaseNav)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("ReBase_NAV");

            entity.Property(e => e.ValueDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<Tmp16PortfolioInvestmentSummary>(entity =>
        {
            entity.HasKey(e => e.IdPortfolioInvestmentSummary)
                .HasName("PK__Tmp_16_Portfolio__708A54CB");

            entity.ToTable("Tmp_16_PortfolioInvestmentSummary");

            entity.Property(e => e.IdPortfolioInvestmentSummary)
                .ValueGeneratedNever()
                .HasColumnName("ID_PortfolioInvestmentSummary");

            entity.Property(e => e.Assetvalue)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("ASSETVALUE");

            entity.Property(e => e.Costofasset)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("COSTOFASSET");

            entity.Property(e => e.IdInvestmentType)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("ID_InvestmentType")
                .IsFixedLength();

            entity.Property(e => e.IdPortfolio).HasColumnName("ID_Portfolio");

            entity.Property(e => e.Pcentgainloss)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("PCENTGAINLOSS");

            entity.Property(e => e.Pcentoftotal)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("PCENTOFTOTAL");

            entity.Property(e => e.Valuedate)
                .HasColumnType("datetime")
                .HasColumnName("VALUEDATE");
        });

        modelBuilder.Entity<Tmp16Sum2Return>(entity =>
        {
            entity.HasNoKey();

            entity.ToTable("Tmp_16_Sum2Return");

            entity.Property(e => e.Amount)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("AMOUNT");
        });

        modelBuilder.Entity<Tmp17NavVsIndex>(entity =>
        {
            entity.HasNoKey();

            entity.ToTable("Tmp_17_NAV_vs_INDEX");

            entity.Property(e => e.IdBenchMark).HasColumnName("ID_BenchMark");

            entity.Property(e => e.IdPortfolio).HasColumnName("ID_Portfolio");

            entity.Property(e => e.IdPortfolioPerformance)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID_PortfolioPerformance");

            entity.Property(e => e.ReBaseIndex)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("ReBase_Index");

            entity.Property(e => e.ReBaseNav)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("ReBase_NAV");

            entity.Property(e => e.ValueDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<Tmp17Sum2Return>(entity =>
        {
            entity.HasNoKey();

            entity.ToTable("Tmp_17_Sum2Return");

            entity.HasIndex(e => e.Amount, "UQ__Tmp_17_Sum2Retur__040CCCF4")
                .IsUnique();

            entity.HasIndex(e => e.Amount, "UQ__Tmp_17_Sum2Retur__12BADEFE")
                .IsUnique();

            entity.HasIndex(e => e.Amount, "UQ__Tmp_17_Sum2Retur__4165518E")
                .IsUnique();

            entity.Property(e => e.Amount)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("AMOUNT");
        });

        modelBuilder.Entity<Tmp18Sum2Return>(entity =>
        {
            entity.HasNoKey();

            entity.ToTable("Tmp_18_Sum2Return");

            entity.HasIndex(e => e.Amount, "UQ__Tmp_18_Sum2Retur__30156C64")
                .IsUnique();

            entity.Property(e => e.Amount)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("AMOUNT");
        });

        modelBuilder.Entity<Tmp19NavVsIndex>(entity =>
        {
            entity.HasNoKey();

            entity.ToTable("Tmp_19_NAV_vs_INDEX");

            entity.Property(e => e.IdBenchMark).HasColumnName("ID_BenchMark");

            entity.Property(e => e.IdPortfolio).HasColumnName("ID_Portfolio");

            entity.Property(e => e.IdPortfolioPerformance)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID_PortfolioPerformance");

            entity.Property(e => e.ReBaseIndex)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("ReBase_Index");

            entity.Property(e => e.ReBaseNav)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("ReBase_NAV");

            entity.Property(e => e.ValueDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<Tmp19Sum2Return>(entity =>
        {
            entity.HasNoKey();

            entity.ToTable("Tmp_19_Sum2Return");

            entity.HasIndex(e => e.Amount, "UQ__Tmp_19_Sum2Retur__20A90BA2")
                .IsUnique();

            entity.HasIndex(e => e.Amount, "UQ__Tmp_19_Sum2Retur__350FF702")
                .IsUnique();

            entity.Property(e => e.Amount)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("AMOUNT");
        });

        modelBuilder.Entity<Tmp1NavVsIndex>(entity =>
        {
            entity.HasKey(e => e.IdPortfolioPerformance);

            entity.ToTable("Tmp_1_NAV_vs_INDEX");

            entity.Property(e => e.IdPortfolioPerformance).HasColumnName("ID_PortfolioPerformance");

            entity.Property(e => e.IdBenchMark).HasColumnName("ID_BenchMark");

            entity.Property(e => e.IdPortfolio).HasColumnName("ID_Portfolio");

            entity.Property(e => e.ReBaseIndex)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("ReBase_Index");

            entity.Property(e => e.ReBaseNav)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("ReBase_NAV");

            entity.Property(e => e.ValueDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<Tmp1Sum2Return>(entity =>
        {
            entity.HasNoKey();

            entity.ToTable("Tmp_1_Sum2Return");

            entity.HasIndex(e => e.Amount, "UQ__Tmp_1_Sum2Return__3B0C8E63")
                .IsUnique();

            entity.HasIndex(e => e.Amount, "UQ__Tmp_1_Sum2Return__56764864")
                .IsUnique();

            entity.Property(e => e.Amount)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("AMOUNT");
        });

        modelBuilder.Entity<Tmp20NavVsIndex>(entity =>
        {
            entity.HasNoKey();

            entity.ToTable("Tmp_20_NAV_vs_INDEX");

            entity.Property(e => e.IdBenchMark).HasColumnName("ID_BenchMark");

            entity.Property(e => e.IdPortfolio).HasColumnName("ID_Portfolio");

            entity.Property(e => e.IdPortfolioPerformance)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID_PortfolioPerformance");

            entity.Property(e => e.ReBaseIndex)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("ReBase_Index");

            entity.Property(e => e.ReBaseNav)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("ReBase_NAV");

            entity.Property(e => e.ValueDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<Tmp20Sum2Return>(entity =>
        {
            entity.HasNoKey();

            entity.ToTable("Tmp_20_Sum2Return");

            entity.HasIndex(e => e.Amount, "UQ__Tmp_20_Sum2Retur__1AF0324C")
                .IsUnique();

            entity.HasIndex(e => e.Amount, "UQ__Tmp_20_Sum2Retur__526FE1FF")
                .IsUnique();

            entity.Property(e => e.Amount)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("AMOUNT");
        });

        modelBuilder.Entity<Tmp21PortfolioInvestmentSummary>(entity =>
        {
            entity.HasKey(e => e.IdPortfolioInvestmentSummary)
                .HasName("PK__Tmp_21_Portfolio__639A6E01");

            entity.ToTable("Tmp_21_PortfolioInvestmentSummary");

            entity.Property(e => e.IdPortfolioInvestmentSummary)
                .ValueGeneratedNever()
                .HasColumnName("ID_PortfolioInvestmentSummary");

            entity.Property(e => e.Assetvalue)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("ASSETVALUE");

            entity.Property(e => e.Costofasset)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("COSTOFASSET");

            entity.Property(e => e.IdInvestmentType)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("ID_InvestmentType")
                .IsFixedLength();

            entity.Property(e => e.IdPortfolio).HasColumnName("ID_Portfolio");

            entity.Property(e => e.Pcentgainloss)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("PCENTGAINLOSS");

            entity.Property(e => e.Pcentoftotal)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("PCENTOFTOTAL");

            entity.Property(e => e.Valuedate)
                .HasColumnType("datetime")
                .HasColumnName("VALUEDATE");
        });

        modelBuilder.Entity<Tmp21Sum2Return>(entity =>
        {
            entity.HasNoKey();

            entity.ToTable("Tmp_21_Sum2Return");

            entity.HasIndex(e => e.Amount, "UQ__Tmp_21_Sum2Retur__30B6ECE7")
                .IsUnique();

            entity.Property(e => e.Amount)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("AMOUNT");
        });

        modelBuilder.Entity<Tmp22NavVsIndex>(entity =>
        {
            entity.HasNoKey();

            entity.ToTable("Tmp_22_NAV_vs_INDEX");

            entity.Property(e => e.IdBenchMark).HasColumnName("ID_BenchMark");

            entity.Property(e => e.IdPortfolio).HasColumnName("ID_Portfolio");

            entity.Property(e => e.IdPortfolioPerformance)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID_PortfolioPerformance");

            entity.Property(e => e.ReBaseIndex)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("ReBase_Index");

            entity.Property(e => e.ReBaseNav)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("ReBase_NAV");

            entity.Property(e => e.ValueDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<Tmp22Sum2Return>(entity =>
        {
            entity.HasNoKey();

            entity.ToTable("Tmp_22_Sum2Return");

            entity.HasIndex(e => e.Amount, "UQ__Tmp_22_Sum2Retur__36DE6CD1")
                .IsUnique();

            entity.Property(e => e.Amount)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("AMOUNT");
        });

        modelBuilder.Entity<Tmp23NavVsIndex>(entity =>
        {
            entity.HasNoKey();

            entity.ToTable("Tmp_23_NAV_vs_INDEX");

            entity.Property(e => e.IdBenchMark).HasColumnName("ID_BenchMark");

            entity.Property(e => e.IdPortfolio).HasColumnName("ID_Portfolio");

            entity.Property(e => e.IdPortfolioPerformance)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID_PortfolioPerformance");

            entity.Property(e => e.ReBaseIndex)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("ReBase_Index");

            entity.Property(e => e.ReBaseNav)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("ReBase_NAV");

            entity.Property(e => e.ValueDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<Tmp23Sum2Return>(entity =>
        {
            entity.HasNoKey();

            entity.ToTable("Tmp_23_Sum2Return");

            entity.Property(e => e.Amount)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("AMOUNT");
        });

        modelBuilder.Entity<Tmp24NavVsIndex>(entity =>
        {
            entity.HasNoKey();

            entity.ToTable("Tmp_24_NAV_vs_INDEX");

            entity.Property(e => e.IdBenchMark).HasColumnName("ID_BenchMark");

            entity.Property(e => e.IdPortfolio).HasColumnName("ID_Portfolio");

            entity.Property(e => e.IdPortfolioPerformance)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID_PortfolioPerformance");

            entity.Property(e => e.ReBaseIndex)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("ReBase_Index");

            entity.Property(e => e.ReBaseNav)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("ReBase_NAV");

            entity.Property(e => e.ValueDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<Tmp25Sum2Return>(entity =>
        {
            entity.HasNoKey();

            entity.ToTable("Tmp_25_Sum2Return");

            entity.HasIndex(e => e.Amount, "UQ__Tmp_25_Sum2Retur__6A1E19B5")
                .IsUnique();

            entity.Property(e => e.Amount)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("AMOUNT");
        });

        modelBuilder.Entity<Tmp26Sum2Return>(entity =>
        {
            entity.HasNoKey();

            entity.ToTable("Tmp_26_Sum2Return");

            entity.HasIndex(e => e.Amount, "UQ__Tmp_26_Sum2Retur__3D2C4304")
                .IsUnique();

            entity.Property(e => e.Amount)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("AMOUNT");
        });

        modelBuilder.Entity<Tmp27PortfolioInvestmentSummary>(entity =>
        {
            entity.HasKey(e => e.IdPortfolioInvestmentSummary)
                .HasName("PK__Tmp_27_Portfolio__392F32E9");

            entity.ToTable("Tmp_27_PortfolioInvestmentSummary");

            entity.Property(e => e.IdPortfolioInvestmentSummary)
                .ValueGeneratedNever()
                .HasColumnName("ID_PortfolioInvestmentSummary");

            entity.Property(e => e.Assetvalue)
                .HasColumnType("decimal(31, 2)")
                .HasColumnName("ASSETVALUE");

            entity.Property(e => e.Costofasset)
                .HasColumnType("decimal(31, 2)")
                .HasColumnName("COSTOFASSET");

            entity.Property(e => e.IdInvestmentType)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("ID_InvestmentType")
                .IsFixedLength();

            entity.Property(e => e.IdPortfolio).HasColumnName("ID_Portfolio");

            entity.Property(e => e.Pcentgainloss)
                .HasColumnType("decimal(19, 2)")
                .HasColumnName("PCENTGAINLOSS");

            entity.Property(e => e.Pcentoftotal)
                .HasColumnType("decimal(19, 2)")
                .HasColumnName("PCENTOFTOTAL");

            entity.Property(e => e.Valuedate)
                .HasColumnType("datetime")
                .HasColumnName("VALUEDATE");
        });

        modelBuilder.Entity<Tmp27Sum2Return>(entity =>
        {
            entity.HasNoKey();

            entity.ToTable("Tmp_27_Sum2Return");

            entity.HasIndex(e => e.Amount, "UQ__Tmp_27_Sum2Retur__055CEB2D")
                .IsUnique();

            entity.Property(e => e.Amount)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("AMOUNT");
        });

        modelBuilder.Entity<Tmp28PortfolioInvestmentSummary>(entity =>
        {
            entity.HasKey(e => e.IdPortfolioInvestmentSummary)
                .HasName("PK__Tmp_28_Portfolio__35698EFD");

            entity.ToTable("Tmp_28_PortfolioInvestmentSummary");

            entity.Property(e => e.IdPortfolioInvestmentSummary)
                .ValueGeneratedNever()
                .HasColumnName("ID_PortfolioInvestmentSummary");

            entity.Property(e => e.Assetvalue)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("ASSETVALUE");

            entity.Property(e => e.Costofasset)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("COSTOFASSET");

            entity.Property(e => e.IdInvestmentType)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("ID_InvestmentType")
                .IsFixedLength();

            entity.Property(e => e.IdPortfolio).HasColumnName("ID_Portfolio");

            entity.Property(e => e.Pcentgainloss)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("PCENTGAINLOSS");

            entity.Property(e => e.Pcentoftotal)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("PCENTOFTOTAL");

            entity.Property(e => e.Valuedate)
                .HasColumnType("datetime")
                .HasColumnName("VALUEDATE");
        });

        modelBuilder.Entity<Tmp2DealDistribution>(entity =>
        {
            entity.HasNoKey();

            entity.ToTable("Tmp_2_DealDistribution");

            entity.Property(e => e.DueDate).HasColumnType("datetime");

            entity.Property(e => e.IdCustomer).HasColumnName("ID_Customer");

            entity.Property(e => e.IdDealMaster).HasColumnName("ID_DealMaster");

            entity.Property(e => e.IdDealPrtDistribution)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID_DealPrtDistribution");

            entity.Property(e => e.IdDealType)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("ID_DealType");

            entity.Property(e => e.IdPortfolio).HasColumnName("ID_Portfolio");

            entity.Property(e => e.Interest).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.MarketValue).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.Principal).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.Status)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<Tmp2GLoanPortfolioDistribution>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("Tmp_2_gLoanPortfolioDistribution");

            entity.Property(e => e.BondType)
                .HasMaxLength(3)
                .IsUnicode(false);

            entity.Property(e => e.Id)
                .ValueGeneratedOnAdd()
                .HasColumnName("id");

            entity.Property(e => e.NorminalValue).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.PortfolioId).HasColumnName("PortfolioID");

            entity.Property(e => e.QtyBalance).HasColumnType("decimal(28, 4)");

            entity.Property(e => e.Symbol)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Tmp2MmIntBuild>(entity =>
        {
            entity.HasKey(e => e.IdDealAmortSchedule);

            entity.ToTable("Tmp_2_MM_IntBuild");

            entity.Property(e => e.IdDealAmortSchedule).HasColumnName("ID_DealAmortSchedule");

            entity.Property(e => e.CapitalisedPostedInterest).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.CloseBalance).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.DueDate).HasColumnType("datetime");

            entity.Property(e => e.IdDealMaster).HasColumnName("ID_DealMaster");

            entity.Property(e => e.IntAmount).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.IntPerDay).HasColumnType("decimal(31, 15)");

            entity.Property(e => e.OpenBalance).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.PrnAmount).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.RentalAmount).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.ReversalId).HasColumnName("ReversalID");

            entity.Property(e => e.UniqueUserId)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("UniqueUserID");

            entity.Property(e => e.WithTaxAmount).HasColumnType("decimal(18, 2)");
        });

        modelBuilder.Entity<Tmp2NavVsIndex>(entity =>
        {
            entity.HasNoKey();

            entity.ToTable("Tmp_2_NAV_vs_INDEX");

            entity.Property(e => e.IdBenchMark).HasColumnName("ID_BenchMark");

            entity.Property(e => e.IdPortfolio).HasColumnName("ID_Portfolio");

            entity.Property(e => e.IdPortfolioPerformance)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID_PortfolioPerformance");

            entity.Property(e => e.ReBaseIndex)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("ReBase_Index");

            entity.Property(e => e.ReBaseNav)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("ReBase_NAV");

            entity.Property(e => e.ValueDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<Tmp2PortfolioInvestmentSummary>(entity =>
        {
            entity.HasKey(e => e.IdPortfolioInvestmentSummary)
                .HasName("PK__Tmp_2_Po__95B940F1228ABB05");

            entity.ToTable("Tmp_2_PortfolioInvestmentSummary");

            entity.Property(e => e.IdPortfolioInvestmentSummary)
                .ValueGeneratedNever()
                .HasColumnName("ID_PortfolioInvestmentSummary");

            entity.Property(e => e.Assetvalue)
                .HasColumnType("decimal(31, 2)")
                .HasColumnName("ASSETVALUE");

            entity.Property(e => e.Costofasset)
                .HasColumnType("decimal(31, 2)")
                .HasColumnName("COSTOFASSET");

            entity.Property(e => e.IdInvestmentType)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("ID_InvestmentType")
                .IsFixedLength();

            entity.Property(e => e.IdPortfolio).HasColumnName("ID_Portfolio");

            entity.Property(e => e.Pcentgainloss)
                .HasColumnType("decimal(19, 2)")
                .HasColumnName("PCENTGAINLOSS");

            entity.Property(e => e.Pcentoftotal)
                .HasColumnType("decimal(19, 2)")
                .HasColumnName("PCENTOFTOTAL");

            entity.Property(e => e.Valuedate)
                .HasColumnType("datetime")
                .HasColumnName("VALUEDATE");
        });

        modelBuilder.Entity<Tmp2Sum2Return>(entity =>
        {
            entity.HasNoKey();

            entity.ToTable("Tmp_2_Sum2Return");

            entity.HasIndex(e => e.Amount, "UQ__Tmp_2_Sum2Return__1907E9DA")
                .IsUnique();

            entity.HasIndex(e => e.Amount, "UQ__Tmp_2_Sum2Return__2D3D91F9")
                .IsUnique();

            entity.HasIndex(e => e.Amount, "UQ__Tmp_2_Sum2Return__4ACEC037")
                .IsUnique();

            entity.HasIndex(e => e.Amount, "UQ__Tmp_2_Sum2Return__54520183")
                .IsUnique();

            entity.HasIndex(e => e.Amount, "UQ__Tmp_2_Sum2Return__62D6C1B2")
                .IsUnique();

            entity.HasIndex(e => e.Amount, "UQ__Tmp_2_Sum2Return__63904C60")
                .IsUnique();

            entity.HasIndex(e => e.Amount, "UQ__Tmp_2_Sum2Return__6680FC4D")
                .IsUnique();

            entity.HasIndex(e => e.Amount, "UQ__Tmp_2_Sum2Return__73432868")
                .IsUnique();

            entity.HasIndex(e => e.Amount, "UQ__Tmp_2_Sum2Return__74F7089B")
                .IsUnique();

            entity.Property(e => e.Amount)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("AMOUNT");
        });

        modelBuilder.Entity<Tmp30Sum2Return>(entity =>
        {
            entity.HasNoKey();

            entity.ToTable("Tmp_30_Sum2Return");

            entity.Property(e => e.Amount)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("AMOUNT");
        });

        modelBuilder.Entity<Tmp31PortfolioInvestmentSummary>(entity =>
        {
            entity.HasKey(e => e.IdPortfolioInvestmentSummary)
                .HasName("PK__Tmp_31_Portfolio__6BBB7E0D");

            entity.ToTable("Tmp_31_PortfolioInvestmentSummary");

            entity.Property(e => e.IdPortfolioInvestmentSummary)
                .ValueGeneratedNever()
                .HasColumnName("ID_PortfolioInvestmentSummary");

            entity.Property(e => e.Assetvalue)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("ASSETVALUE");

            entity.Property(e => e.Costofasset)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("COSTOFASSET");

            entity.Property(e => e.IdInvestmentType)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("ID_InvestmentType")
                .IsFixedLength();

            entity.Property(e => e.IdPortfolio).HasColumnName("ID_Portfolio");

            entity.Property(e => e.Pcentgainloss)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("PCENTGAINLOSS");

            entity.Property(e => e.Pcentoftotal)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("PCENTOFTOTAL");

            entity.Property(e => e.Valuedate)
                .HasColumnType("datetime")
                .HasColumnName("VALUEDATE");
        });

        modelBuilder.Entity<Tmp32Sum2Return>(entity =>
        {
            entity.HasNoKey();

            entity.ToTable("Tmp_32_Sum2Return");

            entity.HasIndex(e => e.Amount, "UQ__Tmp_32_Sum2Retur__5E7DB797")
                .IsUnique();

            entity.Property(e => e.Amount)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("AMOUNT");
        });

        modelBuilder.Entity<Tmp33PortfolioInvestmentSummary>(entity =>
        {
            entity.HasKey(e => e.IdPortfolioInvestmentSummary)
                .HasName("PK__Tmp_33_Portfolio__6594C97A");

            entity.ToTable("Tmp_33_PortfolioInvestmentSummary");

            entity.Property(e => e.IdPortfolioInvestmentSummary)
                .ValueGeneratedNever()
                .HasColumnName("ID_PortfolioInvestmentSummary");

            entity.Property(e => e.Assetvalue)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("ASSETVALUE");

            entity.Property(e => e.Costofasset)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("COSTOFASSET");

            entity.Property(e => e.IdInvestmentType)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("ID_InvestmentType")
                .IsFixedLength();

            entity.Property(e => e.IdPortfolio).HasColumnName("ID_Portfolio");

            entity.Property(e => e.Pcentgainloss)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("PCENTGAINLOSS");

            entity.Property(e => e.Pcentoftotal)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("PCENTOFTOTAL");

            entity.Property(e => e.Valuedate)
                .HasColumnType("datetime")
                .HasColumnName("VALUEDATE");
        });

        modelBuilder.Entity<Tmp33Sum2Return>(entity =>
        {
            entity.HasNoKey();

            entity.ToTable("Tmp_33_Sum2Return");

            entity.HasIndex(e => e.Amount, "UQ__Tmp_33_Sum2Retur__230D49A5")
                .IsUnique();

            entity.HasIndex(e => e.Amount, "UQ__Tmp_33_Sum2Retur__641FEBA6")
                .IsUnique();

            entity.Property(e => e.Amount)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("AMOUNT");
        });

        modelBuilder.Entity<Tmp34Sum2Return>(entity =>
        {
            entity.HasNoKey();

            entity.ToTable("Tmp_34_Sum2Return");

            entity.HasIndex(e => e.Amount, "UQ__Tmp_34_Sum2Retur__5089FB92")
                .IsUnique();

            entity.Property(e => e.Amount)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("AMOUNT");
        });

        modelBuilder.Entity<Tmp35PortfolioInvestmentSummary>(entity =>
        {
            entity.HasKey(e => e.IdPortfolioInvestmentSummary)
                .HasName("PK__Tmp_35_Portfolio__78E86067");

            entity.ToTable("Tmp_35_PortfolioInvestmentSummary");

            entity.Property(e => e.IdPortfolioInvestmentSummary)
                .ValueGeneratedNever()
                .HasColumnName("ID_PortfolioInvestmentSummary");

            entity.Property(e => e.Assetvalue)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("ASSETVALUE");

            entity.Property(e => e.Costofasset)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("COSTOFASSET");

            entity.Property(e => e.IdInvestmentType)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("ID_InvestmentType")
                .IsFixedLength();

            entity.Property(e => e.IdPortfolio).HasColumnName("ID_Portfolio");

            entity.Property(e => e.Pcentgainloss)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("PCENTGAINLOSS");

            entity.Property(e => e.Pcentoftotal)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("PCENTOFTOTAL");

            entity.Property(e => e.Valuedate)
                .HasColumnType("datetime")
                .HasColumnName("VALUEDATE");
        });

        modelBuilder.Entity<Tmp35Sum2Return>(entity =>
        {
            entity.HasNoKey();

            entity.ToTable("Tmp_35_Sum2Return");

            entity.HasIndex(e => e.Amount, "UQ__Tmp_35_Sum2Retur__3DE13B72")
                .IsUnique();

            entity.Property(e => e.Amount)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("AMOUNT");
        });

        modelBuilder.Entity<Tmp36PortfolioInvestmentSummary>(entity =>
        {
            entity.HasKey(e => e.IdPortfolioInvestmentSummary)
                .HasName("PK__Tmp_36_Portfolio__05A7CF47");

            entity.ToTable("Tmp_36_PortfolioInvestmentSummary");

            entity.Property(e => e.IdPortfolioInvestmentSummary)
                .ValueGeneratedNever()
                .HasColumnName("ID_PortfolioInvestmentSummary");

            entity.Property(e => e.Assetvalue)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("ASSETVALUE");

            entity.Property(e => e.Costofasset)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("COSTOFASSET");

            entity.Property(e => e.IdInvestmentType)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("ID_InvestmentType")
                .IsFixedLength();

            entity.Property(e => e.IdPortfolio).HasColumnName("ID_Portfolio");

            entity.Property(e => e.Pcentgainloss)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("PCENTGAINLOSS");

            entity.Property(e => e.Pcentoftotal)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("PCENTOFTOTAL");

            entity.Property(e => e.Valuedate)
                .HasColumnType("datetime")
                .HasColumnName("VALUEDATE");
        });

        modelBuilder.Entity<Tmp38Sum2Return>(entity =>
        {
            entity.HasNoKey();

            entity.ToTable("Tmp_38_Sum2Return");

            entity.HasIndex(e => e.Amount, "UQ__Tmp_38_Sum2Retur__31B92B74")
                .IsUnique();

            entity.HasIndex(e => e.Amount, "UQ__Tmp_38_Sum2Retur__399187A1")
                .IsUnique();

            entity.Property(e => e.Amount)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("AMOUNT");
        });

        modelBuilder.Entity<Tmp39DealDistribution>(entity =>
        {
            entity.HasNoKey();

            entity.ToTable("Tmp_39_DealDistribution");

            entity.Property(e => e.DueDate).HasColumnType("datetime");

            entity.Property(e => e.IdCustomer).HasColumnName("ID_Customer");

            entity.Property(e => e.IdDealMaster).HasColumnName("ID_DealMaster");

            entity.Property(e => e.IdDealPrtDistribution)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID_DealPrtDistribution");

            entity.Property(e => e.IdDealType)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("ID_DealType");

            entity.Property(e => e.IdPortfolio).HasColumnName("ID_Portfolio");

            entity.Property(e => e.Interest).HasColumnType("decimal(18, 0)");

            entity.Property(e => e.MarketValue).HasColumnType("decimal(18, 0)");

            entity.Property(e => e.Principal).HasColumnType("decimal(18, 0)");

            entity.Property(e => e.Status)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<Tmp39Sum2Return>(entity =>
        {
            entity.HasNoKey();

            entity.ToTable("Tmp_39_Sum2Return");

            entity.HasIndex(e => e.Amount, "UQ__Tmp_39_Sum2Retur__56F26FBF")
                .IsUnique();

            entity.Property(e => e.Amount)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("AMOUNT");
        });

        modelBuilder.Entity<Tmp3Sum2Return>(entity =>
        {
            entity.HasNoKey();

            entity.ToTable("Tmp_3_Sum2Return");

            entity.HasIndex(e => e.Amount, "UQ__Tmp_3_Sum2Return__2F90BA16")
                .IsUnique();

            entity.HasIndex(e => e.Amount, "UQ__Tmp_3_Sum2Return__4D2B3E9E")
                .IsUnique();

            entity.HasIndex(e => e.Amount, "UQ__Tmp_3_Sum2Return__4FD2A11F")
                .IsUnique();

            entity.HasIndex(e => e.Amount, "UQ__Tmp_3_Sum2Return__6ECC298B")
                .IsUnique();

            entity.Property(e => e.Amount)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("AMOUNT");
        });

        modelBuilder.Entity<Tmp40Sum2Return>(entity =>
        {
            entity.HasNoKey();

            entity.ToTable("Tmp_40_Sum2Return");

            entity.HasIndex(e => e.Amount, "UQ__Tmp_40_Sum2Retur__2C355C48")
                .IsUnique();

            entity.Property(e => e.Amount)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("AMOUNT");
        });

        modelBuilder.Entity<Tmp42PortfolioInvestmentSummary>(entity =>
        {
            entity.HasKey(e => e.IdPortfolioInvestmentSummary)
                .HasName("PK__Tmp_42_Portfolio__7C425951");

            entity.ToTable("Tmp_42_PortfolioInvestmentSummary");

            entity.Property(e => e.IdPortfolioInvestmentSummary)
                .ValueGeneratedNever()
                .HasColumnName("ID_PortfolioInvestmentSummary");

            entity.Property(e => e.Assetvalue)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("ASSETVALUE");

            entity.Property(e => e.Costofasset)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("COSTOFASSET");

            entity.Property(e => e.IdInvestmentType)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("ID_InvestmentType")
                .IsFixedLength();

            entity.Property(e => e.IdPortfolio).HasColumnName("ID_Portfolio");

            entity.Property(e => e.Pcentgainloss)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("PCENTGAINLOSS");

            entity.Property(e => e.Pcentoftotal)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("PCENTOFTOTAL");

            entity.Property(e => e.Valuedate)
                .HasColumnType("datetime")
                .HasColumnName("VALUEDATE");
        });

        modelBuilder.Entity<Tmp47Sum2Return>(entity =>
        {
            entity.HasNoKey();

            entity.ToTable("Tmp_47_Sum2Return");

            entity.HasIndex(e => e.Amount, "UQ__Tmp_47_Sum2Retur__0E587E99")
                .IsUnique();

            entity.Property(e => e.Amount)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("AMOUNT");
        });

        modelBuilder.Entity<Tmp48Sum2Return>(entity =>
        {
            entity.HasNoKey();

            entity.ToTable("Tmp_48_Sum2Return");

            entity.HasIndex(e => e.Amount, "UQ__Tmp_48_Sum2Retur__139DED51")
                .IsUnique();

            entity.Property(e => e.Amount)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("AMOUNT");
        });

        modelBuilder.Entity<Tmp4DealDistribution>(entity =>
        {
            entity.HasNoKey();

            entity.ToTable("Tmp_4_DealDistribution");

            entity.Property(e => e.DueDate).HasColumnType("datetime");

            entity.Property(e => e.IdCustomer).HasColumnName("ID_Customer");

            entity.Property(e => e.IdDealMaster).HasColumnName("ID_DealMaster");

            entity.Property(e => e.IdDealPrtDistribution)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID_DealPrtDistribution");

            entity.Property(e => e.IdDealType)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("ID_DealType");

            entity.Property(e => e.IdPortfolio).HasColumnName("ID_Portfolio");

            entity.Property(e => e.Interest).HasColumnType("decimal(18, 0)");

            entity.Property(e => e.MarketValue).HasColumnType("decimal(18, 0)");

            entity.Property(e => e.Principal).HasColumnType("decimal(18, 0)");

            entity.Property(e => e.Status)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<Tmp4NavVsIndex>(entity =>
        {
            entity.HasKey(e => e.IdPortfolioPerformance);

            entity.ToTable("Tmp_4_NAV_vs_INDEX");

            entity.Property(e => e.IdPortfolioPerformance).HasColumnName("ID_PortfolioPerformance");

            entity.Property(e => e.IdBenchMark).HasColumnName("ID_BenchMark");

            entity.Property(e => e.IdPortfolio).HasColumnName("ID_Portfolio");

            entity.Property(e => e.ReBaseIndex)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("ReBase_Index");

            entity.Property(e => e.ReBaseNav)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("ReBase_NAV");

            entity.Property(e => e.ValueDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<Tmp4PortfolioInvestmentSummary>(entity =>
        {
            entity.HasKey(e => e.IdPortfolioInvestmentSummary)
                .HasName("PK__Tmp_4_PortfolioI__3AAE325E");

            entity.ToTable("Tmp_4_PortfolioInvestmentSummary");

            entity.Property(e => e.IdPortfolioInvestmentSummary)
                .ValueGeneratedNever()
                .HasColumnName("ID_PortfolioInvestmentSummary");

            entity.Property(e => e.Assetvalue)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("ASSETVALUE");

            entity.Property(e => e.Costofasset)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("COSTOFASSET");

            entity.Property(e => e.IdInvestmentType)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("ID_InvestmentType")
                .IsFixedLength();

            entity.Property(e => e.IdPortfolio).HasColumnName("ID_Portfolio");

            entity.Property(e => e.Pcentgainloss)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("PCENTGAINLOSS");

            entity.Property(e => e.Pcentoftotal)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("PCENTOFTOTAL");

            entity.Property(e => e.Valuedate)
                .HasColumnType("datetime")
                .HasColumnName("VALUEDATE");
        });

        modelBuilder.Entity<Tmp4Sum2Return>(entity =>
        {
            entity.HasNoKey();

            entity.ToTable("Tmp_4_Sum2Return");

            entity.HasIndex(e => e.Amount, "UQ__Tmp_4_Sum2Return__02E830D1")
                .IsUnique();

            entity.HasIndex(e => e.Amount, "UQ__Tmp_4_Sum2Return__03789B6E")
                .IsUnique();

            entity.HasIndex(e => e.Amount, "UQ__Tmp_4_Sum2Return__23AA061E")
                .IsUnique();

            entity.HasIndex(e => e.Amount, "UQ__Tmp_4_Sum2Return__28CEDFB8")
                .IsUnique();

            entity.HasIndex(e => e.Amount, "UQ__Tmp_4_Sum2Return__5657182A")
                .IsUnique();

            entity.HasIndex(e => e.Amount, "UQ__Tmp_4_Sum2Return__67309724")
                .IsUnique();

            entity.HasIndex(e => e.Amount, "UQ__Tmp_4_Sum2Return__739C96F7")
                .IsUnique();

            entity.HasIndex(e => e.Amount, "UQ__Tmp_4_Sum2Return__77AB884F")
                .IsUnique();

            entity.Property(e => e.Amount)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("AMOUNT");
        });

        modelBuilder.Entity<Tmp50Sum2Return>(entity =>
        {
            entity.HasNoKey();

            entity.ToTable("Tmp_50_Sum2Return");

            entity.HasIndex(e => e.Amount, "UQ__Tmp_50_Sum2Retur__1F79B451")
                .IsUnique();

            entity.Property(e => e.Amount)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("AMOUNT");
        });

        modelBuilder.Entity<Tmp52Sum2Return>(entity =>
        {
            entity.HasNoKey();

            entity.ToTable("Tmp_52_Sum2Return");

            entity.HasIndex(e => e.Amount, "UQ__Tmp_52_Sum2Retur__7BE65F51")
                .IsUnique();

            entity.Property(e => e.Amount)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("AMOUNT");
        });

        modelBuilder.Entity<Tmp5NavVsIndex>(entity =>
        {
            entity.HasKey(e => e.IdPortfolioPerformance);

            entity.ToTable("Tmp_5_NAV_vs_INDEX");

            entity.Property(e => e.IdPortfolioPerformance).HasColumnName("ID_PortfolioPerformance");

            entity.Property(e => e.IdBenchMark).HasColumnName("ID_BenchMark");

            entity.Property(e => e.IdPortfolio).HasColumnName("ID_Portfolio");

            entity.Property(e => e.ReBaseIndex)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("ReBase_Index");

            entity.Property(e => e.ReBaseNav)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("ReBase_NAV");

            entity.Property(e => e.ValueDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<Tmp5Sum2Return>(entity =>
        {
            entity.HasNoKey();

            entity.ToTable("Tmp_5_Sum2Return");

            entity.HasIndex(e => e.Amount, "UQ__Tmp_5_Sum2Return__16BA1F54")
                .IsUnique();

            entity.HasIndex(e => e.Amount, "UQ__Tmp_5_Sum2Return__2484897E")
                .IsUnique();

            entity.HasIndex(e => e.Amount, "UQ__Tmp_5_Sum2Return__3553B50D")
                .IsUnique();

            entity.HasIndex(e => e.Amount, "UQ__Tmp_5_Sum2Return__5F0630CE")
                .IsUnique();

            entity.HasIndex(e => e.Amount, "UQ__Tmp_5_Sum2Return__6596F9B5")
                .IsUnique();

            entity.HasIndex(e => e.Amount, "UQ__Tmp_5_Sum2Return__6958D6B8")
                .IsUnique();

            entity.Property(e => e.Amount)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("AMOUNT");
        });

        modelBuilder.Entity<Tmp60NavVsIndex>(entity =>
        {
            entity.HasKey(e => e.IdPortfolioPerformance);

            entity.ToTable("Tmp_60_NAV_vs_INDEX");

            entity.Property(e => e.IdPortfolioPerformance).HasColumnName("ID_PortfolioPerformance");

            entity.Property(e => e.IdBenchMark).HasColumnName("ID_BenchMark");

            entity.Property(e => e.IdPortfolio).HasColumnName("ID_Portfolio");

            entity.Property(e => e.ReBaseIndex)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("ReBase_Index");

            entity.Property(e => e.ReBaseNav)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("ReBase_NAV");

            entity.Property(e => e.ValueDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<Tmp60Sum2Return>(entity =>
        {
            entity.HasNoKey();

            entity.ToTable("Tmp_60_Sum2Return");

            entity.HasIndex(e => e.Amount, "UQ__Tmp_60_Sum2Retur__1D90C9F4")
                .IsUnique();

            entity.Property(e => e.Amount)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("AMOUNT");
        });

        modelBuilder.Entity<Tmp62NavVsIndex>(entity =>
        {
            entity.HasKey(e => e.IdPortfolioPerformance);

            entity.ToTable("Tmp_62_NAV_vs_INDEX");

            entity.Property(e => e.IdPortfolioPerformance).HasColumnName("ID_PortfolioPerformance");

            entity.Property(e => e.IdBenchMark).HasColumnName("ID_BenchMark");

            entity.Property(e => e.IdPortfolio).HasColumnName("ID_Portfolio");

            entity.Property(e => e.ReBaseIndex)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("ReBase_Index");

            entity.Property(e => e.ReBaseNav)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("ReBase_NAV");

            entity.Property(e => e.ValueDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<Tmp62PortfolioInvestmentSummary>(entity =>
        {
            entity.HasKey(e => e.IdPortfolioInvestmentSummary)
                .HasName("PK__Tmp_62_Portfolio__28FB885B");

            entity.ToTable("Tmp_62_PortfolioInvestmentSummary");

            entity.Property(e => e.IdPortfolioInvestmentSummary)
                .ValueGeneratedNever()
                .HasColumnName("ID_PortfolioInvestmentSummary");

            entity.Property(e => e.Assetvalue)
                .HasColumnType("decimal(31, 2)")
                .HasColumnName("ASSETVALUE");

            entity.Property(e => e.Costofasset)
                .HasColumnType("decimal(31, 2)")
                .HasColumnName("COSTOFASSET");

            entity.Property(e => e.IdInvestmentType)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("ID_InvestmentType")
                .IsFixedLength();

            entity.Property(e => e.IdPortfolio).HasColumnName("ID_Portfolio");

            entity.Property(e => e.Pcentgainloss)
                .HasColumnType("decimal(19, 2)")
                .HasColumnName("PCENTGAINLOSS");

            entity.Property(e => e.Pcentoftotal)
                .HasColumnType("decimal(19, 2)")
                .HasColumnName("PCENTOFTOTAL");

            entity.Property(e => e.Valuedate)
                .HasColumnType("datetime")
                .HasColumnName("VALUEDATE");
        });

        modelBuilder.Entity<Tmp62Sum2Return>(entity =>
        {
            entity.HasNoKey();

            entity.ToTable("Tmp_62_Sum2Return");

            entity.HasIndex(e => e.Amount, "UQ__Tmp_62_Sum2Retur__2EB1FFAC")
                .IsUnique();

            entity.Property(e => e.Amount)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("AMOUNT");
        });

        modelBuilder.Entity<Tmp63PortfolioInvestmentSummary>(entity =>
        {
            entity.HasKey(e => e.IdPortfolioInvestmentSummary)
                .HasName("PK__Tmp_63_Portfolio__2440F4DF");

            entity.ToTable("Tmp_63_PortfolioInvestmentSummary");

            entity.Property(e => e.IdPortfolioInvestmentSummary)
                .ValueGeneratedNever()
                .HasColumnName("ID_PortfolioInvestmentSummary");

            entity.Property(e => e.Assetvalue)
                .HasColumnType("decimal(31, 2)")
                .HasColumnName("ASSETVALUE");

            entity.Property(e => e.Costofasset)
                .HasColumnType("decimal(31, 2)")
                .HasColumnName("COSTOFASSET");

            entity.Property(e => e.IdInvestmentType)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("ID_InvestmentType")
                .IsFixedLength();

            entity.Property(e => e.IdPortfolio).HasColumnName("ID_Portfolio");

            entity.Property(e => e.Pcentgainloss)
                .HasColumnType("decimal(19, 2)")
                .HasColumnName("PCENTGAINLOSS");

            entity.Property(e => e.Pcentoftotal)
                .HasColumnType("decimal(19, 2)")
                .HasColumnName("PCENTOFTOTAL");

            entity.Property(e => e.Valuedate)
                .HasColumnType("datetime")
                .HasColumnName("VALUEDATE");
        });

        modelBuilder.Entity<Tmp63Sum2Return>(entity =>
        {
            entity.HasNoKey();

            entity.ToTable("Tmp_63_Sum2Return");

            entity.HasIndex(e => e.Amount, "UQ__Tmp_63_Sum2Retur__5640CE19")
                .IsUnique();

            entity.Property(e => e.Amount)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("AMOUNT");
        });

        modelBuilder.Entity<Tmp64Sum2Return>(entity =>
        {
            entity.HasNoKey();

            entity.ToTable("Tmp_64_Sum2Return");

            entity.HasIndex(e => e.Amount, "UQ__Tmp_64_Sum2Retur__540C0ADF")
                .IsUnique();

            entity.Property(e => e.Amount)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("AMOUNT");
        });

        modelBuilder.Entity<Tmp65PortfolioInvestmentSummary>(entity =>
        {
            entity.HasKey(e => e.IdPortfolioInvestmentSummary)
                .HasName("PK__Tmp_65_Portfolio__5077AA34");

            entity.ToTable("Tmp_65_PortfolioInvestmentSummary");

            entity.Property(e => e.IdPortfolioInvestmentSummary)
                .ValueGeneratedNever()
                .HasColumnName("ID_PortfolioInvestmentSummary");

            entity.Property(e => e.Assetvalue)
                .HasColumnType("decimal(31, 2)")
                .HasColumnName("ASSETVALUE");

            entity.Property(e => e.Costofasset)
                .HasColumnType("decimal(31, 2)")
                .HasColumnName("COSTOFASSET");

            entity.Property(e => e.IdInvestmentType)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("ID_InvestmentType")
                .IsFixedLength();

            entity.Property(e => e.IdPortfolio).HasColumnName("ID_Portfolio");

            entity.Property(e => e.Pcentgainloss)
                .HasColumnType("decimal(19, 2)")
                .HasColumnName("PCENTGAINLOSS");

            entity.Property(e => e.Pcentoftotal)
                .HasColumnType("decimal(19, 2)")
                .HasColumnName("PCENTOFTOTAL");

            entity.Property(e => e.Valuedate)
                .HasColumnType("datetime")
                .HasColumnName("VALUEDATE");
        });

        modelBuilder.Entity<Tmp65Sum2Return>(entity =>
        {
            entity.HasNoKey();

            entity.ToTable("Tmp_65_Sum2Return");

            entity.HasIndex(e => e.Amount, "UQ__Tmp_65_Sum2Retur__115A446C")
                .IsUnique();

            entity.Property(e => e.Amount)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("AMOUNT");
        });

        modelBuilder.Entity<Tmp66NavVsIndex>(entity =>
        {
            entity.HasKey(e => e.IdPortfolioPerformance);

            entity.ToTable("Tmp_66_NAV_vs_INDEX");

            entity.Property(e => e.IdPortfolioPerformance).HasColumnName("ID_PortfolioPerformance");

            entity.Property(e => e.IdBenchMark).HasColumnName("ID_BenchMark");

            entity.Property(e => e.IdPortfolio).HasColumnName("ID_Portfolio");

            entity.Property(e => e.ReBaseIndex)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("ReBase_Index");

            entity.Property(e => e.ReBaseNav)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("ReBase_NAV");

            entity.Property(e => e.ValueDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<Tmp66Sum2Return>(entity =>
        {
            entity.HasNoKey();

            entity.ToTable("Tmp_66_Sum2Return");

            entity.HasIndex(e => e.Amount, "UQ__Tmp_66_Sum2Retur__3F5D68C1")
                .IsUnique();

            entity.Property(e => e.Amount)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("AMOUNT");
        });

        modelBuilder.Entity<Tmp67NavVsIndex>(entity =>
        {
            entity.HasKey(e => e.IdPortfolioPerformance);

            entity.ToTable("Tmp_67_NAV_vs_INDEX");

            entity.Property(e => e.IdPortfolioPerformance).HasColumnName("ID_PortfolioPerformance");

            entity.Property(e => e.IdBenchMark).HasColumnName("ID_BenchMark");

            entity.Property(e => e.IdPortfolio).HasColumnName("ID_Portfolio");

            entity.Property(e => e.ReBaseIndex)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("ReBase_Index");

            entity.Property(e => e.ReBaseNav)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("ReBase_NAV");

            entity.Property(e => e.ValueDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<Tmp67Sum2Return>(entity =>
        {
            entity.HasNoKey();

            entity.ToTable("Tmp_67_Sum2Return");

            entity.HasIndex(e => e.Amount, "UQ__Tmp_67_Sum2Retur__7BE1C4B3")
                .IsUnique();

            entity.Property(e => e.Amount)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("AMOUNT");
        });

        modelBuilder.Entity<Tmp68DealDistribution>(entity =>
        {
            entity.HasNoKey();

            entity.ToTable("Tmp_68_DealDistribution");

            entity.Property(e => e.DueDate).HasColumnType("datetime");

            entity.Property(e => e.IdCustomer).HasColumnName("ID_Customer");

            entity.Property(e => e.IdDealMaster).HasColumnName("ID_DealMaster");

            entity.Property(e => e.IdDealPrtDistribution)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID_DealPrtDistribution");

            entity.Property(e => e.IdDealType)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("ID_DealType");

            entity.Property(e => e.IdPortfolio).HasColumnName("ID_Portfolio");

            entity.Property(e => e.Interest).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.MarketValue).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.Principal).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.Status)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<Tmp69NavVsIndex>(entity =>
        {
            entity.HasKey(e => e.IdPortfolioPerformance);

            entity.ToTable("Tmp_69_NAV_vs_INDEX");

            entity.Property(e => e.IdPortfolioPerformance).HasColumnName("ID_PortfolioPerformance");

            entity.Property(e => e.IdBenchMark).HasColumnName("ID_BenchMark");

            entity.Property(e => e.IdPortfolio).HasColumnName("ID_Portfolio");

            entity.Property(e => e.ReBaseIndex)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("ReBase_Index");

            entity.Property(e => e.ReBaseNav)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("ReBase_NAV");

            entity.Property(e => e.ValueDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<Tmp6NavVsIndex>(entity =>
        {
            entity.HasNoKey();

            entity.ToTable("Tmp_6_NAV_vs_INDEX");

            entity.Property(e => e.IdBenchMark).HasColumnName("ID_BenchMark");

            entity.Property(e => e.IdPortfolio).HasColumnName("ID_Portfolio");

            entity.Property(e => e.IdPortfolioPerformance)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID_PortfolioPerformance");

            entity.Property(e => e.ReBaseIndex)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("ReBase_Index");

            entity.Property(e => e.ReBaseNav)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("ReBase_NAV");

            entity.Property(e => e.ValueDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<Tmp6Sum2Return>(entity =>
        {
            entity.HasNoKey();

            entity.ToTable("Tmp_6_Sum2Return");

            entity.HasIndex(e => e.Amount, "UQ__Tmp_6_Sum2Return__1D0297F0")
                .IsUnique();

            entity.HasIndex(e => e.Amount, "UQ__Tmp_6_Sum2Return__283B47BF")
                .IsUnique();

            entity.Property(e => e.Amount)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("AMOUNT");
        });

        modelBuilder.Entity<Tmp72Sum2Return>(entity =>
        {
            entity.HasNoKey();

            entity.ToTable("Tmp_72_Sum2Return");

            entity.HasIndex(e => e.Amount, "UQ__Tmp_72_Sum2Retur__3258E37F")
                .IsUnique();

            entity.Property(e => e.Amount)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("AMOUNT");
        });

        modelBuilder.Entity<Tmp73Sum2Return>(entity =>
        {
            entity.HasNoKey();

            entity.ToTable("Tmp_73_Sum2Return");

            entity.HasIndex(e => e.Amount, "UQ__Tmp_73_Sum2Retur__0C4D36A6")
                .IsUnique();

            entity.Property(e => e.Amount)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("AMOUNT");
        });

        modelBuilder.Entity<Tmp77PortfolioInvestmentSummary>(entity =>
        {
            entity.HasKey(e => e.IdPortfolioInvestmentSummary)
                .HasName("PK__Tmp_77_Portfolio__5DC26471");

            entity.ToTable("Tmp_77_PortfolioInvestmentSummary");

            entity.Property(e => e.IdPortfolioInvestmentSummary)
                .ValueGeneratedNever()
                .HasColumnName("ID_PortfolioInvestmentSummary");

            entity.Property(e => e.Assetvalue)
                .HasColumnType("decimal(31, 2)")
                .HasColumnName("ASSETVALUE");

            entity.Property(e => e.Costofasset)
                .HasColumnType("decimal(31, 2)")
                .HasColumnName("COSTOFASSET");

            entity.Property(e => e.IdInvestmentType)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("ID_InvestmentType")
                .IsFixedLength();

            entity.Property(e => e.IdPortfolio).HasColumnName("ID_Portfolio");

            entity.Property(e => e.Pcentgainloss)
                .HasColumnType("decimal(19, 2)")
                .HasColumnName("PCENTGAINLOSS");

            entity.Property(e => e.Pcentoftotal)
                .HasColumnType("decimal(19, 2)")
                .HasColumnName("PCENTOFTOTAL");

            entity.Property(e => e.Valuedate)
                .HasColumnType("datetime")
                .HasColumnName("VALUEDATE");
        });

        modelBuilder.Entity<Tmp79Sum2Return>(entity =>
        {
            entity.HasNoKey();

            entity.ToTable("Tmp_79_Sum2Return");

            entity.HasIndex(e => e.Amount, "UQ__Tmp_79_Sum2Retur__361465CA")
                .IsUnique();

            entity.Property(e => e.Amount)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("AMOUNT");
        });

        modelBuilder.Entity<Tmp7PortfolioInvestmentSummary>(entity =>
        {
            entity.HasKey(e => e.IdPortfolioInvestmentSummary)
                .HasName("PK__Tmp_7_PortfolioI__3DE53425");

            entity.ToTable("Tmp_7_PortfolioInvestmentSummary");

            entity.Property(e => e.IdPortfolioInvestmentSummary)
                .ValueGeneratedNever()
                .HasColumnName("ID_PortfolioInvestmentSummary");

            entity.Property(e => e.Assetvalue)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("ASSETVALUE");

            entity.Property(e => e.Costofasset)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("COSTOFASSET");

            entity.Property(e => e.IdInvestmentType)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("ID_InvestmentType")
                .IsFixedLength();

            entity.Property(e => e.IdPortfolio).HasColumnName("ID_Portfolio");

            entity.Property(e => e.Pcentgainloss)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("PCENTGAINLOSS");

            entity.Property(e => e.Pcentoftotal)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("PCENTOFTOTAL");

            entity.Property(e => e.Valuedate)
                .HasColumnType("datetime")
                .HasColumnName("VALUEDATE");
        });

        modelBuilder.Entity<Tmp7Sum2Return>(entity =>
        {
            entity.HasNoKey();

            entity.ToTable("Tmp_7_Sum2Return");

            entity.HasIndex(e => e.Amount, "UQ__Tmp_7_Sum2Return__0E7088C4")
                .IsUnique();

            entity.HasIndex(e => e.Amount, "UQ__Tmp_7_Sum2Return__23114258")
                .IsUnique();

            entity.HasIndex(e => e.Amount, "UQ__Tmp_7_Sum2Return__2EFBBD39")
                .IsUnique();

            entity.HasIndex(e => e.Amount, "UQ__Tmp_7_Sum2Return__378C70FA")
                .IsUnique();

            entity.HasIndex(e => e.Amount, "UQ__Tmp_7_Sum2Return__57650F06")
                .IsUnique();

            entity.Property(e => e.Amount)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("AMOUNT");
        });

        modelBuilder.Entity<Tmp80PortfolioInvestmentSummary>(entity =>
        {
            entity.HasKey(e => e.IdPortfolioInvestmentSummary)
                .HasName("PK__Tmp_80_Portfolio__42F45D3B");

            entity.ToTable("Tmp_80_PortfolioInvestmentSummary");

            entity.Property(e => e.IdPortfolioInvestmentSummary)
                .ValueGeneratedNever()
                .HasColumnName("ID_PortfolioInvestmentSummary");

            entity.Property(e => e.Assetvalue)
                .HasColumnType("decimal(31, 2)")
                .HasColumnName("ASSETVALUE");

            entity.Property(e => e.Costofasset)
                .HasColumnType("decimal(31, 2)")
                .HasColumnName("COSTOFASSET");

            entity.Property(e => e.IdInvestmentType)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("ID_InvestmentType")
                .IsFixedLength();

            entity.Property(e => e.IdPortfolio).HasColumnName("ID_Portfolio");

            entity.Property(e => e.Pcentgainloss)
                .HasColumnType("decimal(19, 2)")
                .HasColumnName("PCENTGAINLOSS");

            entity.Property(e => e.Pcentoftotal)
                .HasColumnType("decimal(19, 2)")
                .HasColumnName("PCENTOFTOTAL");

            entity.Property(e => e.Valuedate)
                .HasColumnType("datetime")
                .HasColumnName("VALUEDATE");
        });

        modelBuilder.Entity<Tmp80Sum2Return>(entity =>
        {
            entity.HasNoKey();

            entity.ToTable("Tmp_80_Sum2Return");

            entity.HasIndex(e => e.Amount, "UQ__Tmp_80_Sum2Retur__38B06B32")
                .IsUnique();

            entity.Property(e => e.Amount)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("AMOUNT");
        });

        modelBuilder.Entity<Tmp81Sum2Return>(entity =>
        {
            entity.HasNoKey();

            entity.ToTable("Tmp_81_Sum2Return");

            entity.HasIndex(e => e.Amount, "UQ__Tmp_81_Sum2Retur__4DE5EFD9")
                .IsUnique();

            entity.Property(e => e.Amount)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("AMOUNT");
        });

        modelBuilder.Entity<Tmp82PortfolioInvestmentSummary>(entity =>
        {
            entity.HasKey(e => e.IdPortfolioInvestmentSummary)
                .HasName("PK__Tmp_82_Portfolio__76E3732C");

            entity.ToTable("Tmp_82_PortfolioInvestmentSummary");

            entity.Property(e => e.IdPortfolioInvestmentSummary)
                .ValueGeneratedNever()
                .HasColumnName("ID_PortfolioInvestmentSummary");

            entity.Property(e => e.Assetvalue)
                .HasColumnType("decimal(31, 2)")
                .HasColumnName("ASSETVALUE");

            entity.Property(e => e.Costofasset)
                .HasColumnType("decimal(31, 2)")
                .HasColumnName("COSTOFASSET");

            entity.Property(e => e.IdInvestmentType)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("ID_InvestmentType")
                .IsFixedLength();

            entity.Property(e => e.IdPortfolio).HasColumnName("ID_Portfolio");

            entity.Property(e => e.Pcentgainloss)
                .HasColumnType("decimal(19, 2)")
                .HasColumnName("PCENTGAINLOSS");

            entity.Property(e => e.Pcentoftotal)
                .HasColumnType("decimal(19, 2)")
                .HasColumnName("PCENTOFTOTAL");

            entity.Property(e => e.Valuedate)
                .HasColumnType("datetime")
                .HasColumnName("VALUEDATE");
        });

        modelBuilder.Entity<Tmp82Sum2Return>(entity =>
        {
            entity.HasNoKey();

            entity.ToTable("Tmp_82_Sum2Return");

            entity.HasIndex(e => e.Amount, "UQ__Tmp_82_Sum2Retur__49E518D5")
                .IsUnique();

            entity.Property(e => e.Amount)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("AMOUNT");
        });

        modelBuilder.Entity<Tmp83Sum2Return>(entity =>
        {
            entity.HasNoKey();

            entity.ToTable("Tmp_83_Sum2Return");

            entity.HasIndex(e => e.Amount, "UQ__Tmp_83_Sum2Retur__5637E7F0")
                .IsUnique();

            entity.Property(e => e.Amount)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("AMOUNT");
        });

        modelBuilder.Entity<Tmp84PortfolioInvestmentSummary>(entity =>
        {
            entity.HasKey(e => e.IdPortfolioInvestmentSummary)
                .HasName("PK__Tmp_84_Portfolio__27133FE9");

            entity.ToTable("Tmp_84_PortfolioInvestmentSummary");

            entity.Property(e => e.IdPortfolioInvestmentSummary)
                .ValueGeneratedNever()
                .HasColumnName("ID_PortfolioInvestmentSummary");

            entity.Property(e => e.Assetvalue)
                .HasColumnType("decimal(31, 2)")
                .HasColumnName("ASSETVALUE");

            entity.Property(e => e.Costofasset)
                .HasColumnType("decimal(31, 2)")
                .HasColumnName("COSTOFASSET");

            entity.Property(e => e.IdInvestmentType)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("ID_InvestmentType")
                .IsFixedLength();

            entity.Property(e => e.IdPortfolio).HasColumnName("ID_Portfolio");

            entity.Property(e => e.Pcentgainloss)
                .HasColumnType("decimal(19, 2)")
                .HasColumnName("PCENTGAINLOSS");

            entity.Property(e => e.Pcentoftotal)
                .HasColumnType("decimal(19, 2)")
                .HasColumnName("PCENTOFTOTAL");

            entity.Property(e => e.Valuedate)
                .HasColumnType("datetime")
                .HasColumnName("VALUEDATE");
        });

        modelBuilder.Entity<Tmp84Sum2Return>(entity =>
        {
            entity.HasNoKey();

            entity.ToTable("Tmp_84_Sum2Return");

            entity.HasIndex(e => e.Amount, "UQ__Tmp_84_Sum2Retur__454B4C41")
                .IsUnique();

            entity.Property(e => e.Amount)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("AMOUNT");
        });

        modelBuilder.Entity<Tmp86PortfolioInvestmentSummary>(entity =>
        {
            entity.HasKey(e => e.IdPortfolioInvestmentSummary)
                .HasName("PK__Tmp_86_Portfolio__4FC94AD5");

            entity.ToTable("Tmp_86_PortfolioInvestmentSummary");

            entity.Property(e => e.IdPortfolioInvestmentSummary)
                .ValueGeneratedNever()
                .HasColumnName("ID_PortfolioInvestmentSummary");

            entity.Property(e => e.Assetvalue)
                .HasColumnType("decimal(31, 2)")
                .HasColumnName("ASSETVALUE");

            entity.Property(e => e.Costofasset)
                .HasColumnType("decimal(31, 2)")
                .HasColumnName("COSTOFASSET");

            entity.Property(e => e.IdInvestmentType)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("ID_InvestmentType")
                .IsFixedLength();

            entity.Property(e => e.IdPortfolio).HasColumnName("ID_Portfolio");

            entity.Property(e => e.Pcentgainloss)
                .HasColumnType("decimal(19, 2)")
                .HasColumnName("PCENTGAINLOSS");

            entity.Property(e => e.Pcentoftotal)
                .HasColumnType("decimal(19, 2)")
                .HasColumnName("PCENTOFTOTAL");

            entity.Property(e => e.Valuedate)
                .HasColumnType("datetime")
                .HasColumnName("VALUEDATE");
        });

        modelBuilder.Entity<Tmp87Sum2Return>(entity =>
        {
            entity.HasNoKey();

            entity.ToTable("Tmp_87_Sum2Return");

            entity.HasIndex(e => e.Amount, "UQ__Tmp_87_Sum2Retur__519FB20A")
                .IsUnique();

            entity.Property(e => e.Amount)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("AMOUNT");
        });

        modelBuilder.Entity<Tmp88Sum2Return>(entity =>
        {
            entity.HasNoKey();

            entity.ToTable("Tmp_88_Sum2Return");

            entity.HasIndex(e => e.Amount, "UQ__Tmp_88_Sum2Retur__23873867")
                .IsUnique();

            entity.Property(e => e.Amount)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("AMOUNT");
        });

        modelBuilder.Entity<Tmp8NavVsIndex>(entity =>
        {
            entity.HasNoKey();

            entity.ToTable("Tmp_8_NAV_vs_INDEX");

            entity.Property(e => e.IdBenchMark).HasColumnName("ID_BenchMark");

            entity.Property(e => e.IdPortfolio).HasColumnName("ID_Portfolio");

            entity.Property(e => e.IdPortfolioPerformance)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID_PortfolioPerformance");

            entity.Property(e => e.ReBaseIndex)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("ReBase_Index");

            entity.Property(e => e.ReBaseNav)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("ReBase_NAV");

            entity.Property(e => e.ValueDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<Tmp8PortfolioInvestmentSummary>(entity =>
        {
            entity.HasKey(e => e.IdPortfolioInvestmentSummary)
                .HasName("PK__Tmp_8_PortfolioI__19C0A931");

            entity.ToTable("Tmp_8_PortfolioInvestmentSummary");

            entity.Property(e => e.IdPortfolioInvestmentSummary)
                .ValueGeneratedNever()
                .HasColumnName("ID_PortfolioInvestmentSummary");

            entity.Property(e => e.Assetvalue)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("ASSETVALUE");

            entity.Property(e => e.Costofasset)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("COSTOFASSET");

            entity.Property(e => e.IdInvestmentType)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("ID_InvestmentType")
                .IsFixedLength();

            entity.Property(e => e.IdPortfolio).HasColumnName("ID_Portfolio");

            entity.Property(e => e.Pcentgainloss)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("PCENTGAINLOSS");

            entity.Property(e => e.Pcentoftotal)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("PCENTOFTOTAL");

            entity.Property(e => e.Valuedate)
                .HasColumnType("datetime")
                .HasColumnName("VALUEDATE");
        });

        modelBuilder.Entity<Tmp8Sum2Return>(entity =>
        {
            entity.HasNoKey();

            entity.ToTable("Tmp_8_Sum2Return");

            entity.HasIndex(e => e.Amount, "UQ__Tmp_8_Sum2Return__51A148B8")
                .IsUnique();

            entity.HasIndex(e => e.Amount, "UQ__Tmp_8_Sum2Return__5DE7240C")
                .IsUnique();

            entity.Property(e => e.Amount)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("AMOUNT");
        });

        modelBuilder.Entity<Tmp90Sum2Return>(entity =>
        {
            entity.HasNoKey();

            entity.ToTable("Tmp_90_Sum2Return");

            entity.HasIndex(e => e.Amount, "UQ__Tmp_90_Sum2Retur__1EB9F857")
                .IsUnique();

            entity.Property(e => e.Amount)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("AMOUNT");
        });

        modelBuilder.Entity<Tmp92PortfolioInvestmentSummary>(entity =>
        {
            entity.HasKey(e => e.IdPortfolioInvestmentSummary)
                .HasName("PK__Tmp_92_Portfolio__0300C7FC");

            entity.ToTable("Tmp_92_PortfolioInvestmentSummary");

            entity.Property(e => e.IdPortfolioInvestmentSummary)
                .ValueGeneratedNever()
                .HasColumnName("ID_PortfolioInvestmentSummary");

            entity.Property(e => e.Assetvalue)
                .HasColumnType("decimal(31, 2)")
                .HasColumnName("ASSETVALUE");

            entity.Property(e => e.Costofasset)
                .HasColumnType("decimal(31, 2)")
                .HasColumnName("COSTOFASSET");

            entity.Property(e => e.IdInvestmentType)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("ID_InvestmentType")
                .IsFixedLength();

            entity.Property(e => e.IdPortfolio).HasColumnName("ID_Portfolio");

            entity.Property(e => e.Pcentgainloss)
                .HasColumnType("decimal(19, 2)")
                .HasColumnName("PCENTGAINLOSS");

            entity.Property(e => e.Pcentoftotal)
                .HasColumnType("decimal(19, 2)")
                .HasColumnName("PCENTOFTOTAL");

            entity.Property(e => e.Valuedate)
                .HasColumnType("datetime")
                .HasColumnName("VALUEDATE");
        });

        modelBuilder.Entity<Tmp92Sum2Return>(entity =>
        {
            entity.HasNoKey();

            entity.ToTable("Tmp_92_Sum2Return");

            entity.HasIndex(e => e.Amount, "UQ__Tmp_92_Sum2Retur__768B4015")
                .IsUnique();

            entity.Property(e => e.Amount)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("AMOUNT");
        });

        modelBuilder.Entity<Tmp94PortfolioInvestmentSummary>(entity =>
        {
            entity.HasKey(e => e.IdPortfolioInvestmentSummary)
                .HasName("PK__Tmp_94_Portfolio__308674FD");

            entity.ToTable("Tmp_94_PortfolioInvestmentSummary");

            entity.Property(e => e.IdPortfolioInvestmentSummary)
                .ValueGeneratedNever()
                .HasColumnName("ID_PortfolioInvestmentSummary");

            entity.Property(e => e.Assetvalue)
                .HasColumnType("decimal(31, 2)")
                .HasColumnName("ASSETVALUE");

            entity.Property(e => e.Costofasset)
                .HasColumnType("decimal(31, 2)")
                .HasColumnName("COSTOFASSET");

            entity.Property(e => e.IdInvestmentType)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("ID_InvestmentType")
                .IsFixedLength();

            entity.Property(e => e.IdPortfolio).HasColumnName("ID_Portfolio");

            entity.Property(e => e.Pcentgainloss)
                .HasColumnType("decimal(19, 2)")
                .HasColumnName("PCENTGAINLOSS");

            entity.Property(e => e.Pcentoftotal)
                .HasColumnType("decimal(19, 2)")
                .HasColumnName("PCENTOFTOTAL");

            entity.Property(e => e.Valuedate)
                .HasColumnType("datetime")
                .HasColumnName("VALUEDATE");
        });

        modelBuilder.Entity<Tmp9NavVsIndex>(entity =>
        {
            entity.HasKey(e => e.IdPortfolioPerformance);

            entity.ToTable("Tmp_9_NAV_vs_INDEX");

            entity.Property(e => e.IdPortfolioPerformance).HasColumnName("ID_PortfolioPerformance");

            entity.Property(e => e.IdBenchMark).HasColumnName("ID_BenchMark");

            entity.Property(e => e.IdPortfolio).HasColumnName("ID_Portfolio");

            entity.Property(e => e.ReBaseIndex)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("ReBase_Index");

            entity.Property(e => e.ReBaseNav)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("ReBase_NAV");

            entity.Property(e => e.ValueDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<Tmp9PortfolioInvestmentSummary>(entity =>
        {
            entity.HasKey(e => e.IdPortfolioInvestmentSummary)
                .HasName("PK__Tmp_9_PortfolioI__023A5E72");

            entity.ToTable("Tmp_9_PortfolioInvestmentSummary");

            entity.Property(e => e.IdPortfolioInvestmentSummary)
                .ValueGeneratedNever()
                .HasColumnName("ID_PortfolioInvestmentSummary");

            entity.Property(e => e.Assetvalue)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("ASSETVALUE");

            entity.Property(e => e.Costofasset)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("COSTOFASSET");

            entity.Property(e => e.IdInvestmentType)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("ID_InvestmentType")
                .IsFixedLength();

            entity.Property(e => e.IdPortfolio).HasColumnName("ID_Portfolio");

            entity.Property(e => e.Pcentgainloss)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("PCENTGAINLOSS");

            entity.Property(e => e.Pcentoftotal)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("PCENTOFTOTAL");

            entity.Property(e => e.Valuedate)
                .HasColumnType("datetime")
                .HasColumnName("VALUEDATE");
        });

        modelBuilder.Entity<Tmp9Sum2Return>(entity =>
        {
            entity.HasNoKey();

            entity.ToTable("Tmp_9_Sum2Return");

            entity.HasIndex(e => e.Amount, "UQ__Tmp_9_Sum2Return__1A0B8D4B")
                .IsUnique();

            entity.HasIndex(e => e.Amount, "UQ__Tmp_9_Sum2Return__278FA59B")
                .IsUnique();

            entity.HasIndex(e => e.Amount, "UQ__Tmp_9_Sum2Return__5523C826")
                .IsUnique();

            entity.HasIndex(e => e.Amount, "UQ__Tmp_9_Sum2Return__626029B8")
                .IsUnique();

            entity.Property(e => e.Amount)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("AMOUNT");
        });

        modelBuilder.Entity<TmpBrwBuildInt>(entity =>
        {
            entity.HasKey(e => e.IdBorrowAmortSchedule);

            entity.ToTable("Tmp_BrwBuildInt");

            entity.Property(e => e.IdBorrowAmortSchedule).HasColumnName("ID_BorrowAmortSchedule");

            entity.Property(e => e.CapitalisedPostedInterest).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.CloseBalance).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.DueDate).HasColumnType("datetime");

            entity.Property(e => e.EndDate).HasColumnType("datetime");

            entity.Property(e => e.IdBorrowMaster).HasColumnName("ID_BorrowMaster");

            entity.Property(e => e.IntAmount).HasColumnType("decimal(31, 15)");

            entity.Property(e => e.IntPerDay).HasColumnType("decimal(31, 15)");

            entity.Property(e => e.OpenBalance).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.PrnAmount).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.RentalAmount).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.ReversalId).HasColumnName("ReversalID");

            entity.Property(e => e.UniqueUserId)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("UniqueUserID");

            entity.Property(e => e.WithTaxAmount).HasColumnType("decimal(18, 2)");
        });

        modelBuilder.Entity<TmpCpasValuation>(entity =>
        {
            entity.HasKey(e => e.IdCpasValuation)
                .HasName("Key_TmpCpasValuation");

            entity.ToTable("TmpCpasValuation");

            entity.Property(e => e.IdCpasValuation).HasColumnName("ID_CpasValuation");

            entity.Property(e => e.Amount01)
                .HasColumnType("decimal(31, 2)")
                .HasColumnName("Amount_01");

            entity.Property(e => e.Arrangement)
                .HasMaxLength(2)
                .IsUnicode(false);

            entity.Property(e => e.Description)
                .HasMaxLength(150)
                .IsUnicode(false);

            entity.Property(e => e.ExRate).HasColumnType("decimal(18, 8)");

            entity.Property(e => e.ForexAmount).HasColumnType("decimal(31, 2)");

            entity.Property(e => e.MarketValue).HasColumnType("decimal(31, 8)");

            entity.Property(e => e.OpenNav)
                .HasColumnType("decimal(31, 2)")
                .HasColumnName("OpenNAV");

            entity.Property(e => e.ValuationDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<TmpDailyGrsUnit>(entity =>
        {
            entity.HasKey(e => e.IdTmpDailyGrsUnit);

            entity.ToTable("Tmp_DailyGrsUnit");

            entity.Property(e => e.IdTmpDailyGrsUnit).HasColumnName("ID_Tmp_DailyGrsUnit");

            entity.Property(e => e.DayDate).HasColumnType("datetime");

            entity.Property(e => e.GrossUnits).HasColumnType("decimal(31, 4)");
        });

        modelBuilder.Entity<TmpDocumentMaster>(entity =>
        {
            entity.HasNoKey();

            entity.ToTable("Tmp_DocumentMaster");

            entity.Property(e => e.AccountClass)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength();

            entity.Property(e => e.Document)
                .HasMaxLength(150)
                .IsUnicode(false);

            entity.Property(e => e.IdControbutorTypeList)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("ID_ControbutorType_List");

            entity.Property(e => e.IdDocumentMaster)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID_DocumentMaster");
        });

        modelBuilder.Entity<TmpDvrExport>(entity =>
        {
            entity.HasKey(e => e.IdTmpDvrExport);

            entity.ToTable("TmpDvrExport");

            entity.HasIndex(e => new { e.IdPortfolio, e.ValuationDate }, "Key_TmpDvrExport_ValuationDate");

            entity.Property(e => e.IdTmpDvrExport).HasColumnName("ID_TmpDvrExport");

            entity.Property(e => e.AccountNo)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.AssetClass)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.Conideration).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.Description)
                .HasMaxLength(150)
                .IsUnicode(false);

            entity.Property(e => e.EffectiveDate).HasColumnType("datetime");

            entity.Property(e => e.FaceValue)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("face_value");

            entity.Property(e => e.FaceValue1)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("FaceValue");

            entity.Property(e => e.Holding).HasColumnType("decimal(31, 8)");

            entity.Property(e => e.IdInv)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("ID_Inv");

            entity.Property(e => e.IdInvestmentType)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("ID_InvestmentType");

            entity.Property(e => e.IdPortfolio).HasColumnName("ID_Portfolio");

            entity.Property(e => e.IdTreatmentType)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("ID_TreatmentType");

            entity.Property(e => e.InterestRate)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("interest_rate");

            entity.Property(e => e.InterestToDate)
                .HasColumnType("decimal(20, 2)")
                .HasColumnName("interest_to_date");

            entity.Property(e => e.ItemId).HasColumnName("item_id");

            entity.Property(e => e.MarketPrice).HasColumnType("decimal(18, 4)");

            entity.Property(e => e.MarketValue).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.MaturityDate).HasColumnType("datetime");

            entity.Property(e => e.MaturityDate1)
                .HasColumnType("datetime")
                .HasColumnName("maturity_date");

            entity.Property(e => e.OriginalCost).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.PremDisc)
                .HasColumnType("decimal(20, 2)")
                .HasColumnName("Prem_Disc");

            entity.Property(e => e.PurchaseCost).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.PurchaseDate).HasColumnType("datetime");

            entity.Property(e => e.ShareId).HasColumnName("ShareID");

            entity.Property(e => e.SubAssetClass)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.Property(e => e.TotalCost).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.TransactionCost).HasColumnType("decimal(31, 2)");

            entity.Property(e => e.Treatment)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.Property(e => e.Unamortised).HasColumnType("decimal(20, 2)");

            entity.Property(e => e.ValuationDate).HasColumnType("datetime");

            entity.Property(e => e.ValueDate)
                .HasColumnType("datetime")
                .HasColumnName("value_date");
        });

        modelBuilder.Entity<TmpEqDep>(entity =>
        {
            entity.HasNoKey();

            entity.ToTable("Tmp_EqDep");

            entity.Property(e => e.AmountRefunded).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.BankId).HasColumnName("BankID");

            entity.Property(e => e.BrokerId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("BrokerID");

            entity.Property(e => e.ChequeNo)
                .HasMaxLength(15)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.Comments).HasColumnType("text");

            entity.Property(e => e.DepositAmount).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.DepositDate).HasColumnType("datetime");

            entity.Property(e => e.DepositId)
                .ValueGeneratedOnAdd()
                .HasColumnName("DepositID");

            entity.Property(e => e.InvestType)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasDefaultValueSql("('Eq')")
                .IsFixedLength();

            entity.Property(e => e.IssueId)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("IssueID")
                .IsFixedLength();

            entity.Property(e => e.Narration)
                .HasMaxLength(40)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.QtyAllotted).HasColumnType("decimal(18, 8)");

            entity.Property(e => e.QtyExpected).HasColumnType("decimal(18, 8)");

            entity.Property(e => e.QtyRefunded).HasColumnType("decimal(18, 8)");

            entity.Property(e => e.ReversalId).HasColumnName("ReversalID");

            entity.Property(e => e.RightId).HasColumnName("RightID");

            entity.Property(e => e.SettlementDate).HasColumnType("datetime");

            entity.Property(e => e.ShareId).HasColumnName("ShareID");

            entity.Property(e => e.Sign1Id)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("Sign1ID")
                .IsFixedLength();

            entity.Property(e => e.Sign2Id)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("Sign2ID")
                .IsFixedLength();

            entity.Property(e => e.Status)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.TotalInterest).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.TransType)
                .HasMaxLength(2)
                .IsUnicode(false);

            entity.Property(e => e.UnitCost).HasColumnType("decimal(18, 2)");
        });

        modelBuilder.Entity<TmpEqreturn>(entity =>
        {
            entity.HasKey(e => e.Id2link);

            entity.ToTable("tmpEqreturns");

            entity.Property(e => e.Id2link)
                .ValueGeneratedNever()
                .HasColumnName("id2link");

            entity.Property(e => e.BeginValue).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.CurrentValue)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("currentValue");

            entity.Property(e => e.Name)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("name");

            entity.Property(e => e.Ytddividents)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("YTDdividents");

            entity.Property(e => e.Ytdpurchases)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("YTDPurchases");

            entity.Property(e => e.Ytdsales)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("YTDSales");
        });

        modelBuilder.Entity<TmpEquityReturn>(entity =>
        {
            entity.HasKey(e => e.LineId)
                .HasName("PK_tblReturns");

            entity.ToTable("tmpEquityReturns");

            entity.Property(e => e.LineId).HasColumnName("Line_ID");

            entity.Property(e => e.BeginValue).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.CurrentValue).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.Fund)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.Property(e => e.FundReturns).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.Ytdpurchase)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("YTDPurchase");

            entity.Property(e => e.YtdsaleDividend)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("YTDSaleDividend");
        });

        modelBuilder.Entity<TmpErrordeal>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("Tmp_errordeals");

            entity.Property(e => e.DueDate).HasColumnType("datetime");

            entity.Property(e => e.IdDealMaster).HasColumnName("ID_DealMaster");

            entity.Property(e => e.Noofrec).HasColumnName("noofrec");
        });

        modelBuilder.Entity<TmpLnMast>(entity =>
        {
            entity.HasNoKey();

            entity.ToTable("Tmp_LnMast");

            entity.Property(e => e.AcrBf)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("Acr_BF");

            entity.Property(e => e.BankId).HasColumnName("BankID");

            entity.Property(e => e.BrokerId)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("BrokerID");

            entity.Property(e => e.ChequeNo)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.Comments).HasColumnType("text");

            entity.Property(e => e.Commission).HasColumnType("decimal(18, 0)");

            entity.Property(e => e.ContractNoteNo)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.CostPrice).HasColumnType("decimal(18, 0)");

            entity.Property(e => e.CumInterest).HasColumnType("decimal(18, 0)");

            entity.Property(e => e.CurrencyId)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("CurrencyID")
                .IsFixedLength();

            entity.Property(e => e.CustomerId).HasColumnName("CustomerID");

            entity.Property(e => e.Discount).HasColumnType("decimal(18, 0)");

            entity.Property(e => e.EffectiveDate).HasColumnType("datetime");

            entity.Property(e => e.IdBranch)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("ID_Branch");

            entity.Property(e => e.IdLocation)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("ID_Location");

            entity.Property(e => e.IdProductLine)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("ID_ProductLine");

            entity.Property(e => e.IdTransactionProcess).HasColumnName("ID_TransactionProcess");

            entity.Property(e => e.IntRepaid).HasColumnType("decimal(18, 0)");

            entity.Property(e => e.InvestType)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.IssueRate).HasColumnType("decimal(18, 0)");

            entity.Property(e => e.IssueType)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.LastTransDate).HasColumnType("datetime");

            entity.Property(e => e.LoanId).ValueGeneratedOnAdd();

            entity.Property(e => e.LoanTypeId).HasColumnName("LoanTypeID");

            entity.Property(e => e.MaturityDate).HasColumnType("datetime");

            entity.Property(e => e.Narration)
                .HasMaxLength(40)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.NorminalCost).HasColumnType("decimal(18, 0)");

            entity.Property(e => e.NseCscsfees)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("NseCSCSFees");

            entity.Property(e => e.OtherFees).HasColumnType("decimal(18, 0)");

            entity.Property(e => e.Premuim).HasColumnType("decimal(18, 0)");

            entity.Property(e => e.PrnRepaid).HasColumnType("decimal(18, 0)");

            entity.Property(e => e.QtyRedeemed).HasColumnType("decimal(18, 0)");

            entity.Property(e => e.SecFees).HasColumnType("decimal(18, 0)");

            entity.Property(e => e.SettlementDate).HasColumnType("datetime");

            entity.Property(e => e.StampDuty).HasColumnType("decimal(18, 0)");

            entity.Property(e => e.Status)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.StockExchangeId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("StockExchangeID");

            entity.Property(e => e.Symbol)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.TransactionCost).HasColumnType("decimal(18, 0)");

            entity.Property(e => e.TransferNo)
                .HasMaxLength(15)
                .IsUnicode(false);

            entity.Property(e => e.UnitCost).HasColumnType("decimal(18, 0)");

            entity.Property(e => e.Vat)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("VAT");
        });

        modelBuilder.Entity<TmpLnSymbol>(entity =>
        {
            entity.HasNoKey();

            entity.ToTable("Tmp_LnSymbol");

            entity.Property(e => e.Add2BaseInterestRate).HasColumnType("decimal(18, 0)");

            entity.Property(e => e.AmountIssued).HasColumnType("decimal(18, 0)");

            entity.Property(e => e.BeginDate).HasColumnType("datetime");

            entity.Property(e => e.DaysInYear)
                .HasMaxLength(10)
                .IsUnicode(false);

            entity.Property(e => e.Description)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.EffectiveIntRate).HasColumnType("decimal(18, 0)");

            entity.Property(e => e.EndDate).HasColumnType("datetime");

            entity.Property(e => e.FixedInterestRate).HasColumnType("decimal(18, 0)");

            entity.Property(e => e.IdCurrency)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("ID_Currency");

            entity.Property(e => e.IdCustomer).HasColumnName("ID_Customer");

            entity.Property(e => e.IntEndDate).HasColumnType("datetime");

            entity.Property(e => e.IntPaymentGap)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.IntStartDate).HasColumnType("datetime");

            entity.Property(e => e.InterestType)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.LastResetDate).HasColumnType("datetime");

            entity.Property(e => e.MaxInterestRate).HasColumnType("decimal(18, 0)");

            entity.Property(e => e.MinInterestRate).HasColumnType("decimal(18, 0)");

            entity.Property(e => e.PrnEndDate).HasColumnType("datetime");

            entity.Property(e => e.PrnPaymentGap)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.PrnPaymentType)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.PrnStartDate).HasColumnType("datetime");

            entity.Property(e => e.QtyIssued).HasColumnType("decimal(18, 0)");

            entity.Property(e => e.Rating)
                .HasMaxLength(10)
                .IsUnicode(false);

            entity.Property(e => e.ResetFloatGap)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.Symbol)
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TmpLnSymbolReceipt>(entity =>
        {
            entity.HasNoKey();

            entity.ToTable("Tmp_LnSymbolReceipt");

            entity.Property(e => e.Amount).HasColumnType("decimal(18, 0)");

            entity.Property(e => e.CheqNo)
                .HasMaxLength(10)
                .IsUnicode(false);

            entity.Property(e => e.Comments).HasColumnType("text");

            entity.Property(e => e.CurrencyId)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("CurrencyID");

            entity.Property(e => e.GlPostPeriod)
                .HasMaxLength(6)
                .IsUnicode(false);

            entity.Property(e => e.GlpostDate)
                .HasColumnType("datetime")
                .HasColumnName("GLPostDate");

            entity.Property(e => e.IdBankAccount)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("ID_BankAccount");

            entity.Property(e => e.IdLnSymbolReceipt)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID_LnSymbolReceipt");

            entity.Property(e => e.IntAmount).HasColumnType("decimal(18, 0)");

            entity.Property(e => e.Narration)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.PaymentType)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.PrnAmount).HasColumnType("decimal(18, 0)");

            entity.Property(e => e.ReceiptNo)
                .HasMaxLength(10)
                .IsUnicode(false);

            entity.Property(e => e.ReceiptType)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.ReversalId).HasColumnName("ReversalID");

            entity.Property(e => e.SourceBankId)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("SourceBankID");

            entity.Property(e => e.SourceLocation)
                .HasMaxLength(10)
                .IsUnicode(false);

            entity.Property(e => e.Status)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.Symbol)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.TransactionDate)
                .HasColumnType("datetime")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.ValueDate).HasColumnType("datetime");

            entity.Property(e => e.VoucherNo)
                .HasMaxLength(10)
                .IsUnicode(false);

            entity.Property(e => e.WitholdingTax).HasColumnType("decimal(18, 0)");
        });

        modelBuilder.Entity<TmpMmbuildInt>(entity =>
        {
            entity.HasKey(e => e.IdDealAmortSchedule);

            entity.ToTable("Tmp_MMBuildInt");

            entity.Property(e => e.IdDealAmortSchedule).HasColumnName("ID_DealAmortSchedule");

            entity.Property(e => e.CapitalisedPostedInterest).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.CloseBalance).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.DueDate).HasColumnType("datetime");

            entity.Property(e => e.IdDealMaster).HasColumnName("ID_DealMaster");

            entity.Property(e => e.IntAmount).HasColumnType("decimal(31, 15)");

            entity.Property(e => e.IntPerDay).HasColumnType("decimal(31, 15)");

            entity.Property(e => e.OpenBalance).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.PrnAmount).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.RentalAmount).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.ReversalId).HasColumnName("ReversalID");

            entity.Property(e => e.UniqueUserId)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("UniqueUserID");

            entity.Property(e => e.WithTaxAmount).HasColumnType("decimal(18, 2)");
        });

        modelBuilder.Entity<TmpNoDisplaytable>(entity =>
        {
            entity.HasNoKey();

            entity.ToTable("TmpNoDisplaytable");

            entity.Property(e => e.CapitalisedPostedInterest).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.CloseBalance).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.DueDate).HasColumnType("datetime");

            entity.Property(e => e.IdBorrowAmortSchedule)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID_BorrowAmortSchedule");

            entity.Property(e => e.IdBorrowMaster).HasColumnName("ID_BorrowMaster");

            entity.Property(e => e.IntAmount).HasColumnType("decimal(31, 15)");

            entity.Property(e => e.IntPerDay).HasColumnType("decimal(31, 15)");

            entity.Property(e => e.OpenBalance).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.PrnAmount).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.RentalAmount).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.ReversalId).HasColumnName("ReversalID");

            entity.Property(e => e.WithTaxAmount).HasColumnType("decimal(18, 2)");
        });

        modelBuilder.Entity<TmpPortfolio1>(entity =>
        {
            entity.HasNoKey();

            entity.ToTable("Tmp_Portfolio_1");

            entity.Property(e => e.AccountClass)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.AccountClosureDate).HasColumnType("datetime");

            entity.Property(e => e.AccountOpenDate).HasColumnType("datetime");

            entity.Property(e => e.Address01)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.Address02)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.ApplyVat).HasColumnName("ApplyVAT");

            entity.Property(e => e.ApprovedBy)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.BidPrice).HasColumnType("decimal(18, 0)");

            entity.Property(e => e.BrokerageFee).HasColumnType("decimal(18, 0)");

            entity.Property(e => e.CapturedBy)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.Comments).HasColumnType("text");

            entity.Property(e => e.ContactPerson)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.ContractDate).HasColumnType("datetime");

            entity.Property(e => e.CrIntRate).HasColumnType("decimal(18, 0)");

            entity.Property(e => e.DateOfBirth).HasColumnType("datetime");

            entity.Property(e => e.DrIntRate).HasColumnType("decimal(18, 0)");

            entity.Property(e => e.EarlyTerminationPenalty)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.Email)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.EmploymentStatus)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.EquityValuationMedhod)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.ExpireDate).HasColumnType("datetime");

            entity.Property(e => e.FeesIncomeReserve)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.FirstName)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.FixedIncomeValuationMethod)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.GsmNo)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.GuaranteeYield).HasColumnType("decimal(18, 0)");

            entity.Property(e => e.IdCurrency)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("ID_Currency");

            entity.Property(e => e.IdEmployer).HasColumnName("ID_Employer");

            entity.Property(e => e.IdIncentiveBenchmark).HasColumnName("ID_IncentiveBenchmark");

            entity.Property(e => e.IdPortfolio)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID_Portfolio");

            entity.Property(e => e.IdPortfolioGroup).HasColumnName("ID_PortfolioGroup");

            entity.Property(e => e.IdReferedByBranch)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ID_ReferedByBranch");

            entity.Property(e => e.IdRelationshipManager)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("ID_RelationshipManager");

            entity.Property(e => e.IdState)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("ID_State");

            entity.Property(e => e.IncentiveBasedOn)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.IncentiveCalcMethod)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.IncentiveIncomeActNo)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.IncentiveRate).HasColumnType("decimal(18, 0)");

            entity.Property(e => e.IncomeFeesAccountNo)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.IncomeFeesRate).HasColumnType("decimal(18, 0)");

            entity.Property(e => e.InitialInvestmentAmount).HasColumnType("decimal(18, 0)");

            entity.Property(e => e.InitialUnitValue).HasColumnType("decimal(18, 0)");

            entity.Property(e => e.InterestExpenseActNo)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.InterestIncomeActNo)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.LastCompoundDate).HasColumnType("datetime");

            entity.Property(e => e.LastIncentiveDueDate).HasColumnType("datetime");

            entity.Property(e => e.LastMgtFeeDeductDate).HasColumnType("datetime");

            entity.Property(e => e.LastRenuwalDate).HasColumnType("datetime");

            entity.Property(e => e.MainAccount)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.ManagementFees).HasColumnType("decimal(18, 0)");

            entity.Property(e => e.ManagementFeesIncomeAccount)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.MgtFeesBasedOn)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.MgtFeesPer)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.MinCrBalance).HasColumnType("decimal(18, 0)");

            entity.Property(e => e.NetAssetValue).HasColumnType("decimal(18, 0)");

            entity.Property(e => e.NextIncentiveDueDate).HasColumnType("datetime");

            entity.Property(e => e.NextMgtFeeDeductDate).HasColumnType("datetime");

            entity.Property(e => e.OfferPrice).HasColumnType("decimal(18, 0)");

            entity.Property(e => e.PcmmgtFees)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("PCMMgtFees");

            entity.Property(e => e.PenaltyMgtFeesRate).HasColumnType("decimal(18, 0)");

            entity.Property(e => e.PfamgtFees)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("PFAMgtFees");

            entity.Property(e => e.PfcmgtFees)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("PFCMgtFees");

            entity.Property(e => e.PinNo)
                .HasMaxLength(10)
                .IsUnicode(false);

            entity.Property(e => e.Portfolio)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.RealEstateValuationMethod)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.ReferedByOfficer)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.ReportDeliveryMethod)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.RiskFactor).HasColumnType("decimal(18, 0)");

            entity.Property(e => e.SearchComments)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.Sex)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.SfkaccountCode)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("SFKAccountCode");

            entity.Property(e => e.Status)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.SurName)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.Telephones)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.TimeFactor).HasColumnType("decimal(18, 0)");

            entity.Property(e => e.TotalUnits).HasColumnType("decimal(18, 0)");

            entity.Property(e => e.WaiverNotes)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.XMasGift).HasColumnName("xMasGift");
        });

        modelBuilder.Entity<TmpPortfolioCashForecastMaster>(entity =>
        {
            entity.HasNoKey();

            entity.ToTable("Tmp_PortfolioCashForecastMaster");

            entity.Property(e => e.Available4Investment).HasColumnType("decimal(18, 0)");

            entity.Property(e => e.Bond).HasColumnType("decimal(18, 0)");

            entity.Property(e => e.ClosingBalance).HasColumnType("decimal(18, 0)");

            entity.Property(e => e.Comments).HasColumnType("text");

            entity.Property(e => e.Equity).HasColumnType("decimal(18, 0)");

            entity.Property(e => e.ForecastDate).HasColumnType("datetime");

            entity.Property(e => e.FundsAvailable).HasColumnType("decimal(18, 0)");

            entity.Property(e => e.IdCurrency)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("ID_Currency");

            entity.Property(e => e.IdPortfolio).HasColumnName("ID_Portfolio");

            entity.Property(e => e.IdPortfolioCashForecastMaster)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID_PortfolioCashForecastMaster");

            entity.Property(e => e.MoneyMarket).HasColumnType("decimal(18, 0)");

            entity.Property(e => e.OpeningBalance).HasColumnType("decimal(18, 0)");

            entity.Property(e => e.OtherReceipts).HasColumnType("decimal(18, 0)");

            entity.Property(e => e.PaymentRemarks)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.PaymentsPlanned).HasColumnType("decimal(18, 0)");

            entity.Property(e => e.PrepairedBy)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.ProposedInvestment)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.RealEstate).HasColumnType("decimal(18, 0)");

            entity.Property(e => e.ReceiptRemarks)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.Status)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<TmpPortfolioInvestmentSummary>(entity =>
        {
            entity.HasKey(e => e.IdPortfolioInvestmentSummary)
                .HasName("PK_Pmp_PortfolioInvestmentSummary");

            entity.ToTable("Tmp_PortfolioInvestmentSummary");

            entity.Property(e => e.IdPortfolioInvestmentSummary).HasColumnName("ID_PortfolioInvestmentSummary");

            entity.Property(e => e.AssetValue).HasColumnType("decimal(31, 2)");

            entity.Property(e => e.CostOfAsset).HasColumnType("decimal(31, 2)");

            entity.Property(e => e.IdInvestmentType)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("ID_InvestmentType")
                .IsFixedLength();

            entity.Property(e => e.IdPortfolio).HasColumnName("ID_Portfolio");

            entity.Property(e => e.PcentGainLoss).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.PcentOfTotal).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.ValueDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<TmpPortfolioNavvsIndex10>(entity =>
        {
            entity.HasKey(e => e.IdPortfolioPerformance);

            entity.ToTable("Tmp_Portfolio_NAVvsINDEX_10");

            entity.HasIndex(e => e.IdBenchMark, "Key_Tmp_Portfolio_NAVvsINDEX_10");

            entity.HasIndex(e => e.IdPortfolio, "Key_Tmp_Portfolio_NAVvsINDEX_10_ID_Portfolio");

            entity.Property(e => e.IdPortfolioPerformance).HasColumnName("ID_PortfolioPerformance");

            entity.Property(e => e.IdBenchMark).HasColumnName("ID_BenchMark");

            entity.Property(e => e.IdPortfolio).HasColumnName("ID_Portfolio");

            entity.Property(e => e.ReBaseIndex)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("ReBase_Index");

            entity.Property(e => e.ReBaseNav)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("ReBase_NAV");

            entity.Property(e => e.ValueDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<TmpPortfolioNavvsIndex104>(entity =>
        {
            entity.HasKey(e => e.IdPortfolioPerformance);

            entity.ToTable("Tmp_Portfolio_NAVvsINDEX_104");

            entity.HasIndex(e => e.IdBenchMark, "Key_Tmp_Portfolio_NAVvsINDEX_104");

            entity.HasIndex(e => e.IdPortfolio, "Key_Tmp_Portfolio_NAVvsINDEX_104_ID_Portfolio");

            entity.Property(e => e.IdPortfolioPerformance).HasColumnName("ID_PortfolioPerformance");

            entity.Property(e => e.IdBenchMark).HasColumnName("ID_BenchMark");

            entity.Property(e => e.IdPortfolio).HasColumnName("ID_Portfolio");

            entity.Property(e => e.ReBaseIndex)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("ReBase_Index");

            entity.Property(e => e.ReBaseNav)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("ReBase_NAV");

            entity.Property(e => e.ValueDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<TmpPortfolioNavvsIndex105>(entity =>
        {
            entity.HasKey(e => e.IdPortfolioPerformance);

            entity.ToTable("Tmp_Portfolio_NAVvsINDEX_105");

            entity.HasIndex(e => e.IdBenchMark, "Key_Tmp_Portfolio_NAVvsINDEX_105");

            entity.HasIndex(e => e.IdPortfolio, "Key_Tmp_Portfolio_NAVvsINDEX_105_ID_Portfolio");

            entity.Property(e => e.IdPortfolioPerformance).HasColumnName("ID_PortfolioPerformance");

            entity.Property(e => e.IdBenchMark).HasColumnName("ID_BenchMark");

            entity.Property(e => e.IdPortfolio).HasColumnName("ID_Portfolio");

            entity.Property(e => e.ReBaseIndex)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("ReBase_Index");

            entity.Property(e => e.ReBaseNav)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("ReBase_NAV");

            entity.Property(e => e.ValueDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<TmpPortfolioNavvsIndex106>(entity =>
        {
            entity.HasKey(e => e.IdPortfolioPerformance);

            entity.ToTable("Tmp_Portfolio_NAVvsINDEX_106");

            entity.HasIndex(e => e.IdBenchMark, "Key_Tmp_Portfolio_NAVvsINDEX_106");

            entity.HasIndex(e => e.IdPortfolio, "Key_Tmp_Portfolio_NAVvsINDEX_106_ID_Portfolio");

            entity.Property(e => e.IdPortfolioPerformance).HasColumnName("ID_PortfolioPerformance");

            entity.Property(e => e.IdBenchMark).HasColumnName("ID_BenchMark");

            entity.Property(e => e.IdPortfolio).HasColumnName("ID_Portfolio");

            entity.Property(e => e.ReBaseIndex)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("ReBase_Index");

            entity.Property(e => e.ReBaseNav)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("ReBase_NAV");

            entity.Property(e => e.ValueDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<TmpPortfolioNavvsIndex107>(entity =>
        {
            entity.HasKey(e => e.IdPortfolioPerformance);

            entity.ToTable("Tmp_Portfolio_NAVvsINDEX_107");

            entity.HasIndex(e => e.IdBenchMark, "Key_Tmp_Portfolio_NAVvsINDEX_107");

            entity.HasIndex(e => e.IdPortfolio, "Key_Tmp_Portfolio_NAVvsINDEX_107_ID_Portfolio");

            entity.Property(e => e.IdPortfolioPerformance).HasColumnName("ID_PortfolioPerformance");

            entity.Property(e => e.IdBenchMark).HasColumnName("ID_BenchMark");

            entity.Property(e => e.IdPortfolio).HasColumnName("ID_Portfolio");

            entity.Property(e => e.ReBaseIndex)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("ReBase_Index");

            entity.Property(e => e.ReBaseNav)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("ReBase_NAV");

            entity.Property(e => e.ValueDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<TmpPortfolioNavvsIndex11>(entity =>
        {
            entity.HasNoKey();

            entity.ToTable("Tmp_Portfolio_NAVvsINDEX_-1");

            entity.Property(e => e.IdBenchMark).HasColumnName("ID_BenchMark");

            entity.Property(e => e.IdPortfolio).HasColumnName("ID_Portfolio");

            entity.Property(e => e.IdPortfolioPerformance)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID_PortfolioPerformance");

            entity.Property(e => e.ReBaseIndex)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("ReBase_Index");

            entity.Property(e => e.ReBaseNav)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("ReBase_NAV");

            entity.Property(e => e.ValueDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<TmpPortfolioNavvsIndex12>(entity =>
        {
            entity.HasKey(e => e.IdPortfolioPerformance);

            entity.ToTable("Tmp_Portfolio_NAVvsINDEX_12");

            entity.HasIndex(e => e.IdBenchMark, "Key_Tmp_Portfolio_NAVvsINDEX_12");

            entity.HasIndex(e => e.IdPortfolio, "Key_Tmp_Portfolio_NAVvsINDEX_12_ID_Portfolio");

            entity.Property(e => e.IdPortfolioPerformance).HasColumnName("ID_PortfolioPerformance");

            entity.Property(e => e.IdBenchMark).HasColumnName("ID_BenchMark");

            entity.Property(e => e.IdPortfolio).HasColumnName("ID_Portfolio");

            entity.Property(e => e.ReBaseIndex)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("ReBase_Index");

            entity.Property(e => e.ReBaseNav)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("ReBase_NAV");

            entity.Property(e => e.ValueDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<TmpPortfolioNavvsIndex120>(entity =>
        {
            entity.HasKey(e => e.IdPortfolioPerformance);

            entity.ToTable("Tmp_Portfolio_NAVvsINDEX_120");

            entity.HasIndex(e => e.IdBenchMark, "Key_Tmp_Portfolio_NAVvsINDEX_120");

            entity.HasIndex(e => e.IdPortfolio, "Key_Tmp_Portfolio_NAVvsINDEX_120_ID_Portfolio");

            entity.Property(e => e.IdPortfolioPerformance).HasColumnName("ID_PortfolioPerformance");

            entity.Property(e => e.IdBenchMark).HasColumnName("ID_BenchMark");

            entity.Property(e => e.IdPortfolio).HasColumnName("ID_Portfolio");

            entity.Property(e => e.ReBaseIndex)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("ReBase_Index");

            entity.Property(e => e.ReBaseNav)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("ReBase_NAV");

            entity.Property(e => e.ValueDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<TmpPortfolioNavvsIndex16>(entity =>
        {
            entity.HasKey(e => e.IdPortfolioPerformance);

            entity.ToTable("Tmp_Portfolio_NAVvsINDEX_16");

            entity.HasIndex(e => e.IdBenchMark, "Key_Tmp_Portfolio_NAVvsINDEX_16");

            entity.HasIndex(e => e.IdPortfolio, "Key_Tmp_Portfolio_NAVvsINDEX_16_ID_Portfolio");

            entity.Property(e => e.IdPortfolioPerformance).HasColumnName("ID_PortfolioPerformance");

            entity.Property(e => e.IdBenchMark).HasColumnName("ID_BenchMark");

            entity.Property(e => e.IdPortfolio).HasColumnName("ID_Portfolio");

            entity.Property(e => e.ReBaseIndex)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("ReBase_Index");

            entity.Property(e => e.ReBaseNav)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("ReBase_NAV");

            entity.Property(e => e.ValueDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<TmpPortfolioNavvsIndex17>(entity =>
        {
            entity.HasKey(e => e.IdPortfolioPerformance);

            entity.ToTable("Tmp_Portfolio_NAVvsINDEX_17");

            entity.HasIndex(e => e.IdBenchMark, "Key_Tmp_Portfolio_NAVvsINDEX_17");

            entity.HasIndex(e => e.IdPortfolio, "Key_Tmp_Portfolio_NAVvsINDEX_17_ID_Portfolio");

            entity.Property(e => e.IdPortfolioPerformance).HasColumnName("ID_PortfolioPerformance");

            entity.Property(e => e.IdBenchMark).HasColumnName("ID_BenchMark");

            entity.Property(e => e.IdPortfolio).HasColumnName("ID_Portfolio");

            entity.Property(e => e.ReBaseIndex)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("ReBase_Index");

            entity.Property(e => e.ReBaseNav)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("ReBase_NAV");

            entity.Property(e => e.ValueDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<TmpPortfolioNavvsIndex18>(entity =>
        {
            entity.HasKey(e => e.IdPortfolioPerformance);

            entity.ToTable("Tmp_Portfolio_NAVvsINDEX_18");

            entity.HasIndex(e => e.IdBenchMark, "Key_Tmp_Portfolio_NAVvsINDEX_18");

            entity.HasIndex(e => e.IdPortfolio, "Key_Tmp_Portfolio_NAVvsINDEX_18_ID_Portfolio");

            entity.Property(e => e.IdPortfolioPerformance).HasColumnName("ID_PortfolioPerformance");

            entity.Property(e => e.IdBenchMark).HasColumnName("ID_BenchMark");

            entity.Property(e => e.IdPortfolio).HasColumnName("ID_Portfolio");

            entity.Property(e => e.ReBaseIndex)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("ReBase_Index");

            entity.Property(e => e.ReBaseNav)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("ReBase_NAV");

            entity.Property(e => e.ValueDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<TmpPortfolioNavvsIndex19>(entity =>
        {
            entity.HasKey(e => e.IdPortfolioPerformance);

            entity.ToTable("Tmp_Portfolio_NAVvsINDEX_19");

            entity.HasIndex(e => e.IdBenchMark, "Key_Tmp_Portfolio_NAVvsINDEX_19");

            entity.HasIndex(e => e.IdPortfolio, "Key_Tmp_Portfolio_NAVvsINDEX_19_ID_Portfolio");

            entity.Property(e => e.IdPortfolioPerformance).HasColumnName("ID_PortfolioPerformance");

            entity.Property(e => e.IdBenchMark).HasColumnName("ID_BenchMark");

            entity.Property(e => e.IdPortfolio).HasColumnName("ID_Portfolio");

            entity.Property(e => e.ReBaseIndex)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("ReBase_Index");

            entity.Property(e => e.ReBaseNav)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("ReBase_NAV");

            entity.Property(e => e.ValueDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<TmpPortfolioNavvsIndex2>(entity =>
        {
            entity.HasKey(e => e.IdPortfolioPerformance);

            entity.ToTable("Tmp_Portfolio_NAVvsINDEX_2");

            entity.HasIndex(e => e.IdBenchMark, "Key_Tmp_Portfolio_NAVvsINDEX_2");

            entity.HasIndex(e => e.IdPortfolio, "Key_Tmp_Portfolio_NAVvsINDEX_2_ID_Portfolio");

            entity.Property(e => e.IdPortfolioPerformance).HasColumnName("ID_PortfolioPerformance");

            entity.Property(e => e.IdBenchMark).HasColumnName("ID_BenchMark");

            entity.Property(e => e.IdPortfolio).HasColumnName("ID_Portfolio");

            entity.Property(e => e.ReBaseIndex)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("ReBase_Index");

            entity.Property(e => e.ReBaseNav)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("ReBase_NAV");

            entity.Property(e => e.ValueDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<TmpPortfolioNavvsIndex21>(entity =>
        {
            entity.HasKey(e => e.IdPortfolioPerformance);

            entity.ToTable("Tmp_Portfolio_NAVvsINDEX_21");

            entity.HasIndex(e => e.IdBenchMark, "Key_Tmp_Portfolio_NAVvsINDEX_21");

            entity.HasIndex(e => e.IdPortfolio, "Key_Tmp_Portfolio_NAVvsINDEX_21_ID_Portfolio");

            entity.Property(e => e.IdPortfolioPerformance).HasColumnName("ID_PortfolioPerformance");

            entity.Property(e => e.IdBenchMark).HasColumnName("ID_BenchMark");

            entity.Property(e => e.IdPortfolio).HasColumnName("ID_Portfolio");

            entity.Property(e => e.ReBaseIndex)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("ReBase_Index");

            entity.Property(e => e.ReBaseNav)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("ReBase_NAV");

            entity.Property(e => e.ValueDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<TmpPortfolioNavvsIndex27>(entity =>
        {
            entity.HasKey(e => e.IdPortfolioPerformance);

            entity.ToTable("Tmp_Portfolio_NAVvsINDEX_27");

            entity.HasIndex(e => e.IdBenchMark, "Key_Tmp_Portfolio_NAVvsINDEX_27");

            entity.HasIndex(e => e.IdPortfolio, "Key_Tmp_Portfolio_NAVvsINDEX_27_ID_Portfolio");

            entity.Property(e => e.IdPortfolioPerformance).HasColumnName("ID_PortfolioPerformance");

            entity.Property(e => e.IdBenchMark).HasColumnName("ID_BenchMark");

            entity.Property(e => e.IdPortfolio).HasColumnName("ID_Portfolio");

            entity.Property(e => e.ReBaseIndex)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("ReBase_Index");

            entity.Property(e => e.ReBaseNav)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("ReBase_NAV");

            entity.Property(e => e.ValueDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<TmpPortfolioNavvsIndex3>(entity =>
        {
            entity.HasKey(e => e.IdPortfolioPerformance);

            entity.ToTable("Tmp_Portfolio_NAVvsINDEX_3");

            entity.HasIndex(e => e.IdBenchMark, "Key_Tmp_Portfolio_NAVvsINDEX_3");

            entity.HasIndex(e => e.IdPortfolio, "Key_Tmp_Portfolio_NAVvsINDEX_3_ID_Portfolio");

            entity.Property(e => e.IdPortfolioPerformance).HasColumnName("ID_PortfolioPerformance");

            entity.Property(e => e.IdBenchMark).HasColumnName("ID_BenchMark");

            entity.Property(e => e.IdPortfolio).HasColumnName("ID_Portfolio");

            entity.Property(e => e.ReBaseIndex)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("ReBase_Index");

            entity.Property(e => e.ReBaseNav)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("ReBase_NAV");

            entity.Property(e => e.ValueDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<TmpPortfolioNavvsIndex30>(entity =>
        {
            entity.HasKey(e => e.IdPortfolioPerformance);

            entity.ToTable("Tmp_Portfolio_NAVvsINDEX_30");

            entity.HasIndex(e => e.IdBenchMark, "Key_Tmp_Portfolio_NAVvsINDEX_30");

            entity.HasIndex(e => e.IdPortfolio, "Key_Tmp_Portfolio_NAVvsINDEX_30_ID_Portfolio");

            entity.Property(e => e.IdPortfolioPerformance).HasColumnName("ID_PortfolioPerformance");

            entity.Property(e => e.IdBenchMark).HasColumnName("ID_BenchMark");

            entity.Property(e => e.IdPortfolio).HasColumnName("ID_Portfolio");

            entity.Property(e => e.ReBaseIndex)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("ReBase_Index");

            entity.Property(e => e.ReBaseNav)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("ReBase_NAV");

            entity.Property(e => e.ValueDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<TmpPortfolioNavvsIndex32>(entity =>
        {
            entity.HasKey(e => e.IdPortfolioPerformance);

            entity.ToTable("Tmp_Portfolio_NAVvsINDEX_32");

            entity.HasIndex(e => e.IdBenchMark, "Key_Tmp_Portfolio_NAVvsINDEX_32");

            entity.HasIndex(e => e.IdPortfolio, "Key_Tmp_Portfolio_NAVvsINDEX_32_ID_Portfolio");

            entity.Property(e => e.IdPortfolioPerformance).HasColumnName("ID_PortfolioPerformance");

            entity.Property(e => e.IdBenchMark).HasColumnName("ID_BenchMark");

            entity.Property(e => e.IdPortfolio).HasColumnName("ID_Portfolio");

            entity.Property(e => e.ReBaseIndex)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("ReBase_Index");

            entity.Property(e => e.ReBaseNav)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("ReBase_NAV");

            entity.Property(e => e.ValueDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<TmpPortfolioNavvsIndex33>(entity =>
        {
            entity.HasKey(e => e.IdPortfolioPerformance);

            entity.ToTable("Tmp_Portfolio_NAVvsINDEX_33");

            entity.HasIndex(e => e.IdBenchMark, "Key_Tmp_Portfolio_NAVvsINDEX_33");

            entity.HasIndex(e => e.IdPortfolio, "Key_Tmp_Portfolio_NAVvsINDEX_33_ID_Portfolio");

            entity.Property(e => e.IdPortfolioPerformance).HasColumnName("ID_PortfolioPerformance");

            entity.Property(e => e.IdBenchMark).HasColumnName("ID_BenchMark");

            entity.Property(e => e.IdPortfolio).HasColumnName("ID_Portfolio");

            entity.Property(e => e.ReBaseIndex)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("ReBase_Index");

            entity.Property(e => e.ReBaseNav)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("ReBase_NAV");

            entity.Property(e => e.ValueDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<TmpPortfolioNavvsIndex34>(entity =>
        {
            entity.HasKey(e => e.IdPortfolioPerformance);

            entity.ToTable("Tmp_Portfolio_NAVvsINDEX_34");

            entity.HasIndex(e => e.IdBenchMark, "Key_Tmp_Portfolio_NAVvsINDEX_34");

            entity.HasIndex(e => e.IdPortfolio, "Key_Tmp_Portfolio_NAVvsINDEX_34_ID_Portfolio");

            entity.Property(e => e.IdPortfolioPerformance).HasColumnName("ID_PortfolioPerformance");

            entity.Property(e => e.IdBenchMark).HasColumnName("ID_BenchMark");

            entity.Property(e => e.IdPortfolio).HasColumnName("ID_Portfolio");

            entity.Property(e => e.ReBaseIndex)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("ReBase_Index");

            entity.Property(e => e.ReBaseNav)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("ReBase_NAV");

            entity.Property(e => e.ValueDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<TmpPortfolioNavvsIndex36>(entity =>
        {
            entity.HasKey(e => e.IdPortfolioPerformance);

            entity.ToTable("Tmp_Portfolio_NAVvsINDEX_36");

            entity.HasIndex(e => e.IdBenchMark, "Key_Tmp_Portfolio_NAVvsINDEX_36");

            entity.HasIndex(e => e.IdPortfolio, "Key_Tmp_Portfolio_NAVvsINDEX_36_ID_Portfolio");

            entity.Property(e => e.IdPortfolioPerformance).HasColumnName("ID_PortfolioPerformance");

            entity.Property(e => e.IdBenchMark).HasColumnName("ID_BenchMark");

            entity.Property(e => e.IdPortfolio).HasColumnName("ID_Portfolio");

            entity.Property(e => e.ReBaseIndex)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("ReBase_Index");

            entity.Property(e => e.ReBaseNav)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("ReBase_NAV");

            entity.Property(e => e.ValueDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<TmpPortfolioNavvsIndex4>(entity =>
        {
            entity.HasKey(e => e.IdPortfolioPerformance);

            entity.ToTable("Tmp_Portfolio_NAVvsINDEX_4");

            entity.HasIndex(e => e.IdBenchMark, "Key_Tmp_Portfolio_NAVvsINDEX_4");

            entity.HasIndex(e => e.IdPortfolio, "Key_Tmp_Portfolio_NAVvsINDEX_4_ID_Portfolio");

            entity.Property(e => e.IdPortfolioPerformance).HasColumnName("ID_PortfolioPerformance");

            entity.Property(e => e.IdBenchMark).HasColumnName("ID_BenchMark");

            entity.Property(e => e.IdPortfolio).HasColumnName("ID_Portfolio");

            entity.Property(e => e.ReBaseIndex)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("ReBase_Index");

            entity.Property(e => e.ReBaseNav)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("ReBase_NAV");

            entity.Property(e => e.ValueDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<TmpPortfolioNavvsIndex42>(entity =>
        {
            entity.HasKey(e => e.IdPortfolioPerformance);

            entity.ToTable("Tmp_Portfolio_NAVvsINDEX_42");

            entity.HasIndex(e => e.IdBenchMark, "Key_Tmp_Portfolio_NAVvsINDEX_42");

            entity.HasIndex(e => e.IdPortfolio, "Key_Tmp_Portfolio_NAVvsINDEX_42_ID_Portfolio");

            entity.Property(e => e.IdPortfolioPerformance).HasColumnName("ID_PortfolioPerformance");

            entity.Property(e => e.IdBenchMark).HasColumnName("ID_BenchMark");

            entity.Property(e => e.IdPortfolio).HasColumnName("ID_Portfolio");

            entity.Property(e => e.ReBaseIndex)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("ReBase_Index");

            entity.Property(e => e.ReBaseNav)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("ReBase_NAV");

            entity.Property(e => e.ValueDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<TmpPortfolioNavvsIndex47>(entity =>
        {
            entity.HasKey(e => e.IdPortfolioPerformance);

            entity.ToTable("Tmp_Portfolio_NAVvsINDEX_47");

            entity.HasIndex(e => e.IdBenchMark, "Key_Tmp_Portfolio_NAVvsINDEX_47");

            entity.HasIndex(e => e.IdPortfolio, "Key_Tmp_Portfolio_NAVvsINDEX_47_ID_Portfolio");

            entity.Property(e => e.IdPortfolioPerformance).HasColumnName("ID_PortfolioPerformance");

            entity.Property(e => e.IdBenchMark).HasColumnName("ID_BenchMark");

            entity.Property(e => e.IdPortfolio).HasColumnName("ID_Portfolio");

            entity.Property(e => e.ReBaseIndex)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("ReBase_Index");

            entity.Property(e => e.ReBaseNav)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("ReBase_NAV");

            entity.Property(e => e.ValueDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<TmpPortfolioNavvsIndex5>(entity =>
        {
            entity.HasKey(e => e.IdPortfolioPerformance);

            entity.ToTable("Tmp_Portfolio_NAVvsINDEX_5");

            entity.HasIndex(e => e.IdBenchMark, "Key_Tmp_Portfolio_NAVvsINDEX_5");

            entity.HasIndex(e => e.IdPortfolio, "Key_Tmp_Portfolio_NAVvsINDEX_5_ID_Portfolio");

            entity.Property(e => e.IdPortfolioPerformance).HasColumnName("ID_PortfolioPerformance");

            entity.Property(e => e.IdBenchMark).HasColumnName("ID_BenchMark");

            entity.Property(e => e.IdPortfolio).HasColumnName("ID_Portfolio");

            entity.Property(e => e.ReBaseIndex)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("ReBase_Index");

            entity.Property(e => e.ReBaseNav)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("ReBase_NAV");

            entity.Property(e => e.ValueDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<TmpPortfolioNavvsIndex6>(entity =>
        {
            entity.HasKey(e => e.IdPortfolioPerformance);

            entity.ToTable("Tmp_Portfolio_NAVvsINDEX_6");

            entity.HasIndex(e => e.IdBenchMark, "Key_Tmp_Portfolio_NAVvsINDEX_6");

            entity.HasIndex(e => e.IdPortfolio, "Key_Tmp_Portfolio_NAVvsINDEX_6_ID_Portfolio");

            entity.Property(e => e.IdPortfolioPerformance).HasColumnName("ID_PortfolioPerformance");

            entity.Property(e => e.IdBenchMark).HasColumnName("ID_BenchMark");

            entity.Property(e => e.IdPortfolio).HasColumnName("ID_Portfolio");

            entity.Property(e => e.ReBaseIndex)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("ReBase_Index");

            entity.Property(e => e.ReBaseNav)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("ReBase_NAV");

            entity.Property(e => e.ValueDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<TmpPortfolioNavvsIndex60>(entity =>
        {
            entity.HasKey(e => e.IdPortfolioPerformance);

            entity.ToTable("Tmp_Portfolio_NAVvsINDEX_60");

            entity.HasIndex(e => e.IdBenchMark, "Key_Tmp_Portfolio_NAVvsINDEX_60");

            entity.HasIndex(e => e.IdPortfolio, "Key_Tmp_Portfolio_NAVvsINDEX_60_ID_Portfolio");

            entity.Property(e => e.IdPortfolioPerformance).HasColumnName("ID_PortfolioPerformance");

            entity.Property(e => e.IdBenchMark).HasColumnName("ID_BenchMark");

            entity.Property(e => e.IdPortfolio).HasColumnName("ID_Portfolio");

            entity.Property(e => e.ReBaseIndex)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("ReBase_Index");

            entity.Property(e => e.ReBaseNav)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("ReBase_NAV");

            entity.Property(e => e.ValueDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<TmpPortfolioNavvsIndex62>(entity =>
        {
            entity.HasKey(e => e.IdPortfolioPerformance);

            entity.ToTable("Tmp_Portfolio_NAVvsINDEX_62");

            entity.HasIndex(e => e.IdBenchMark, "Key_Tmp_Portfolio_NAVvsINDEX_62");

            entity.HasIndex(e => e.IdPortfolio, "Key_Tmp_Portfolio_NAVvsINDEX_62_ID_Portfolio");

            entity.Property(e => e.IdPortfolioPerformance).HasColumnName("ID_PortfolioPerformance");

            entity.Property(e => e.IdBenchMark).HasColumnName("ID_BenchMark");

            entity.Property(e => e.IdPortfolio).HasColumnName("ID_Portfolio");

            entity.Property(e => e.ReBaseIndex)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("ReBase_Index");

            entity.Property(e => e.ReBaseNav)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("ReBase_NAV");

            entity.Property(e => e.ValueDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<TmpPortfolioNavvsIndex63>(entity =>
        {
            entity.HasKey(e => e.IdPortfolioPerformance);

            entity.ToTable("Tmp_Portfolio_NAVvsINDEX_63");

            entity.HasIndex(e => e.IdBenchMark, "Key_Tmp_Portfolio_NAVvsINDEX_63");

            entity.HasIndex(e => e.IdPortfolio, "Key_Tmp_Portfolio_NAVvsINDEX_63_ID_Portfolio");

            entity.Property(e => e.IdPortfolioPerformance).HasColumnName("ID_PortfolioPerformance");

            entity.Property(e => e.IdBenchMark).HasColumnName("ID_BenchMark");

            entity.Property(e => e.IdPortfolio).HasColumnName("ID_Portfolio");

            entity.Property(e => e.ReBaseIndex)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("ReBase_Index");

            entity.Property(e => e.ReBaseNav)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("ReBase_NAV");

            entity.Property(e => e.ValueDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<TmpPortfolioNavvsIndex65>(entity =>
        {
            entity.HasKey(e => e.IdPortfolioPerformance);

            entity.ToTable("Tmp_Portfolio_NAVvsINDEX_65");

            entity.HasIndex(e => e.IdBenchMark, "Key_Tmp_Portfolio_NAVvsINDEX_65");

            entity.HasIndex(e => e.IdPortfolio, "Key_Tmp_Portfolio_NAVvsINDEX_65_ID_Portfolio");

            entity.Property(e => e.IdPortfolioPerformance).HasColumnName("ID_PortfolioPerformance");

            entity.Property(e => e.IdBenchMark).HasColumnName("ID_BenchMark");

            entity.Property(e => e.IdPortfolio).HasColumnName("ID_Portfolio");

            entity.Property(e => e.ReBaseIndex)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("ReBase_Index");

            entity.Property(e => e.ReBaseNav)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("ReBase_NAV");

            entity.Property(e => e.ValueDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<TmpPortfolioNavvsIndex66>(entity =>
        {
            entity.HasKey(e => e.IdPortfolioPerformance);

            entity.ToTable("Tmp_Portfolio_NAVvsINDEX_66");

            entity.HasIndex(e => e.IdBenchMark, "Key_Tmp_Portfolio_NAVvsINDEX_66");

            entity.HasIndex(e => e.IdPortfolio, "Key_Tmp_Portfolio_NAVvsINDEX_66_ID_Portfolio");

            entity.Property(e => e.IdPortfolioPerformance).HasColumnName("ID_PortfolioPerformance");

            entity.Property(e => e.IdBenchMark).HasColumnName("ID_BenchMark");

            entity.Property(e => e.IdPortfolio).HasColumnName("ID_Portfolio");

            entity.Property(e => e.ReBaseIndex)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("ReBase_Index");

            entity.Property(e => e.ReBaseNav)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("ReBase_NAV");

            entity.Property(e => e.ValueDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<TmpPortfolioNavvsIndex69>(entity =>
        {
            entity.HasKey(e => e.IdPortfolioPerformance);

            entity.ToTable("Tmp_Portfolio_NAVvsINDEX_69");

            entity.HasIndex(e => e.IdBenchMark, "Key_Tmp_Portfolio_NAVvsINDEX_69");

            entity.HasIndex(e => e.IdPortfolio, "Key_Tmp_Portfolio_NAVvsINDEX_69_ID_Portfolio");

            entity.Property(e => e.IdPortfolioPerformance).HasColumnName("ID_PortfolioPerformance");

            entity.Property(e => e.IdBenchMark).HasColumnName("ID_BenchMark");

            entity.Property(e => e.IdPortfolio).HasColumnName("ID_Portfolio");

            entity.Property(e => e.ReBaseIndex)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("ReBase_Index");

            entity.Property(e => e.ReBaseNav)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("ReBase_NAV");

            entity.Property(e => e.ValueDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<TmpPortfolioNavvsIndex7>(entity =>
        {
            entity.HasKey(e => e.IdPortfolioPerformance);

            entity.ToTable("Tmp_Portfolio_NAVvsINDEX_7");

            entity.HasIndex(e => e.IdBenchMark, "Key_Tmp_Portfolio_NAVvsINDEX_7");

            entity.HasIndex(e => e.IdPortfolio, "Key_Tmp_Portfolio_NAVvsINDEX_7_ID_Portfolio");

            entity.Property(e => e.IdPortfolioPerformance).HasColumnName("ID_PortfolioPerformance");

            entity.Property(e => e.IdBenchMark).HasColumnName("ID_BenchMark");

            entity.Property(e => e.IdPortfolio).HasColumnName("ID_Portfolio");

            entity.Property(e => e.ReBaseIndex)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("ReBase_Index");

            entity.Property(e => e.ReBaseNav)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("ReBase_NAV");

            entity.Property(e => e.ValueDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<TmpPortfolioNavvsIndex72>(entity =>
        {
            entity.HasKey(e => e.IdPortfolioPerformance);

            entity.ToTable("Tmp_Portfolio_NAVvsINDEX_72");

            entity.HasIndex(e => e.IdBenchMark, "Key_Tmp_Portfolio_NAVvsINDEX_72");

            entity.HasIndex(e => e.IdPortfolio, "Key_Tmp_Portfolio_NAVvsINDEX_72_ID_Portfolio");

            entity.Property(e => e.IdPortfolioPerformance).HasColumnName("ID_PortfolioPerformance");

            entity.Property(e => e.IdBenchMark).HasColumnName("ID_BenchMark");

            entity.Property(e => e.IdPortfolio).HasColumnName("ID_Portfolio");

            entity.Property(e => e.ReBaseIndex)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("ReBase_Index");

            entity.Property(e => e.ReBaseNav)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("ReBase_NAV");

            entity.Property(e => e.ValueDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<TmpPortfolioNavvsIndex73>(entity =>
        {
            entity.HasKey(e => e.IdPortfolioPerformance);

            entity.ToTable("Tmp_Portfolio_NAVvsINDEX_73");

            entity.HasIndex(e => e.IdBenchMark, "Key_Tmp_Portfolio_NAVvsINDEX_73");

            entity.HasIndex(e => e.IdPortfolio, "Key_Tmp_Portfolio_NAVvsINDEX_73_ID_Portfolio");

            entity.Property(e => e.IdPortfolioPerformance).HasColumnName("ID_PortfolioPerformance");

            entity.Property(e => e.IdBenchMark).HasColumnName("ID_BenchMark");

            entity.Property(e => e.IdPortfolio).HasColumnName("ID_Portfolio");

            entity.Property(e => e.ReBaseIndex)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("ReBase_Index");

            entity.Property(e => e.ReBaseNav)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("ReBase_NAV");

            entity.Property(e => e.ValueDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<TmpPortfolioNavvsIndex78>(entity =>
        {
            entity.HasKey(e => e.IdPortfolioPerformance);

            entity.ToTable("Tmp_Portfolio_NAVvsINDEX_78");

            entity.HasIndex(e => e.IdBenchMark, "Key_Tmp_Portfolio_NAVvsINDEX_78");

            entity.HasIndex(e => e.IdPortfolio, "Key_Tmp_Portfolio_NAVvsINDEX_78_ID_Portfolio");

            entity.Property(e => e.IdPortfolioPerformance).HasColumnName("ID_PortfolioPerformance");

            entity.Property(e => e.IdBenchMark).HasColumnName("ID_BenchMark");

            entity.Property(e => e.IdPortfolio).HasColumnName("ID_Portfolio");

            entity.Property(e => e.ReBaseIndex)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("ReBase_Index");

            entity.Property(e => e.ReBaseNav)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("ReBase_NAV");

            entity.Property(e => e.ValueDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<TmpPortfolioNavvsIndex79>(entity =>
        {
            entity.HasKey(e => e.IdPortfolioPerformance);

            entity.ToTable("Tmp_Portfolio_NAVvsINDEX_79");

            entity.HasIndex(e => e.IdBenchMark, "Key_Tmp_Portfolio_NAVvsINDEX_79");

            entity.HasIndex(e => e.IdPortfolio, "Key_Tmp_Portfolio_NAVvsINDEX_79_ID_Portfolio");

            entity.Property(e => e.IdPortfolioPerformance).HasColumnName("ID_PortfolioPerformance");

            entity.Property(e => e.IdBenchMark).HasColumnName("ID_BenchMark");

            entity.Property(e => e.IdPortfolio).HasColumnName("ID_Portfolio");

            entity.Property(e => e.ReBaseIndex)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("ReBase_Index");

            entity.Property(e => e.ReBaseNav)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("ReBase_NAV");

            entity.Property(e => e.ValueDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<TmpPortfolioNavvsIndex8>(entity =>
        {
            entity.HasKey(e => e.IdPortfolioPerformance);

            entity.ToTable("Tmp_Portfolio_NAVvsINDEX_8");

            entity.HasIndex(e => e.IdBenchMark, "Key_Tmp_Portfolio_NAVvsINDEX_8");

            entity.HasIndex(e => e.IdPortfolio, "Key_Tmp_Portfolio_NAVvsINDEX_8_ID_Portfolio");

            entity.Property(e => e.IdPortfolioPerformance).HasColumnName("ID_PortfolioPerformance");

            entity.Property(e => e.IdBenchMark).HasColumnName("ID_BenchMark");

            entity.Property(e => e.IdPortfolio).HasColumnName("ID_Portfolio");

            entity.Property(e => e.ReBaseIndex)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("ReBase_Index");

            entity.Property(e => e.ReBaseNav)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("ReBase_NAV");

            entity.Property(e => e.ValueDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<TmpPortfolioNavvsIndex80>(entity =>
        {
            entity.HasKey(e => e.IdPortfolioPerformance);

            entity.ToTable("Tmp_Portfolio_NAVvsINDEX_80");

            entity.HasIndex(e => e.IdBenchMark, "Key_Tmp_Portfolio_NAVvsINDEX_80");

            entity.HasIndex(e => e.IdPortfolio, "Key_Tmp_Portfolio_NAVvsINDEX_80_ID_Portfolio");

            entity.Property(e => e.IdPortfolioPerformance).HasColumnName("ID_PortfolioPerformance");

            entity.Property(e => e.IdBenchMark).HasColumnName("ID_BenchMark");

            entity.Property(e => e.IdPortfolio).HasColumnName("ID_Portfolio");

            entity.Property(e => e.ReBaseIndex)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("ReBase_Index");

            entity.Property(e => e.ReBaseNav)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("ReBase_NAV");

            entity.Property(e => e.ValueDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<TmpPortfolioNavvsIndex81>(entity =>
        {
            entity.HasKey(e => e.IdPortfolioPerformance);

            entity.ToTable("Tmp_Portfolio_NAVvsINDEX_81");

            entity.HasIndex(e => e.IdBenchMark, "Key_Tmp_Portfolio_NAVvsINDEX_81");

            entity.HasIndex(e => e.IdPortfolio, "Key_Tmp_Portfolio_NAVvsINDEX_81_ID_Portfolio");

            entity.Property(e => e.IdPortfolioPerformance).HasColumnName("ID_PortfolioPerformance");

            entity.Property(e => e.IdBenchMark).HasColumnName("ID_BenchMark");

            entity.Property(e => e.IdPortfolio).HasColumnName("ID_Portfolio");

            entity.Property(e => e.ReBaseIndex)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("ReBase_Index");

            entity.Property(e => e.ReBaseNav)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("ReBase_NAV");

            entity.Property(e => e.ValueDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<TmpPortfolioNavvsIndex82>(entity =>
        {
            entity.HasKey(e => e.IdPortfolioPerformance);

            entity.ToTable("Tmp_Portfolio_NAVvsINDEX_82");

            entity.HasIndex(e => e.IdBenchMark, "Key_Tmp_Portfolio_NAVvsINDEX_82");

            entity.HasIndex(e => e.IdPortfolio, "Key_Tmp_Portfolio_NAVvsINDEX_82_ID_Portfolio");

            entity.Property(e => e.IdPortfolioPerformance).HasColumnName("ID_PortfolioPerformance");

            entity.Property(e => e.IdBenchMark).HasColumnName("ID_BenchMark");

            entity.Property(e => e.IdPortfolio).HasColumnName("ID_Portfolio");

            entity.Property(e => e.ReBaseIndex)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("ReBase_Index");

            entity.Property(e => e.ReBaseNav)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("ReBase_NAV");

            entity.Property(e => e.ValueDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<TmpPortfolioNavvsIndex84>(entity =>
        {
            entity.HasKey(e => e.IdPortfolioPerformance);

            entity.ToTable("Tmp_Portfolio_NAVvsINDEX_84");

            entity.HasIndex(e => e.IdBenchMark, "Key_Tmp_Portfolio_NAVvsINDEX_84");

            entity.HasIndex(e => e.IdPortfolio, "Key_Tmp_Portfolio_NAVvsINDEX_84_ID_Portfolio");

            entity.Property(e => e.IdPortfolioPerformance).HasColumnName("ID_PortfolioPerformance");

            entity.Property(e => e.IdBenchMark).HasColumnName("ID_BenchMark");

            entity.Property(e => e.IdPortfolio).HasColumnName("ID_Portfolio");

            entity.Property(e => e.ReBaseIndex)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("ReBase_Index");

            entity.Property(e => e.ReBaseNav)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("ReBase_NAV");

            entity.Property(e => e.ValueDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<TmpPortfolioNavvsIndex88>(entity =>
        {
            entity.HasKey(e => e.IdPortfolioPerformance);

            entity.ToTable("Tmp_Portfolio_NAVvsINDEX_88");

            entity.HasIndex(e => e.IdBenchMark, "Key_Tmp_Portfolio_NAVvsINDEX_88");

            entity.HasIndex(e => e.IdPortfolio, "Key_Tmp_Portfolio_NAVvsINDEX_88_ID_Portfolio");

            entity.Property(e => e.IdPortfolioPerformance).HasColumnName("ID_PortfolioPerformance");

            entity.Property(e => e.IdBenchMark).HasColumnName("ID_BenchMark");

            entity.Property(e => e.IdPortfolio).HasColumnName("ID_Portfolio");

            entity.Property(e => e.ReBaseIndex)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("ReBase_Index");

            entity.Property(e => e.ReBaseNav)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("ReBase_NAV");

            entity.Property(e => e.ValueDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<TmpPortfolioNavvsIndex89>(entity =>
        {
            entity.HasKey(e => e.IdPortfolioPerformance);

            entity.ToTable("Tmp_Portfolio_NAVvsINDEX_89");

            entity.HasIndex(e => e.IdBenchMark, "Key_Tmp_Portfolio_NAVvsINDEX_89");

            entity.HasIndex(e => e.IdPortfolio, "Key_Tmp_Portfolio_NAVvsINDEX_89_ID_Portfolio");

            entity.Property(e => e.IdPortfolioPerformance).HasColumnName("ID_PortfolioPerformance");

            entity.Property(e => e.IdBenchMark).HasColumnName("ID_BenchMark");

            entity.Property(e => e.IdPortfolio).HasColumnName("ID_Portfolio");

            entity.Property(e => e.ReBaseIndex)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("ReBase_Index");

            entity.Property(e => e.ReBaseNav)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("ReBase_NAV");

            entity.Property(e => e.ValueDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<TmpPortfolioNavvsIndex9>(entity =>
        {
            entity.HasKey(e => e.IdPortfolioPerformance);

            entity.ToTable("Tmp_Portfolio_NAVvsINDEX_9");

            entity.HasIndex(e => e.IdBenchMark, "Key_Tmp_Portfolio_NAVvsINDEX_9");

            entity.HasIndex(e => e.IdPortfolio, "Key_Tmp_Portfolio_NAVvsINDEX_9_ID_Portfolio");

            entity.Property(e => e.IdPortfolioPerformance).HasColumnName("ID_PortfolioPerformance");

            entity.Property(e => e.IdBenchMark).HasColumnName("ID_BenchMark");

            entity.Property(e => e.IdPortfolio).HasColumnName("ID_Portfolio");

            entity.Property(e => e.ReBaseIndex)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("ReBase_Index");

            entity.Property(e => e.ReBaseNav)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("ReBase_NAV");

            entity.Property(e => e.ValueDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<TmpPortfolioNavvsIndex90>(entity =>
        {
            entity.HasKey(e => e.IdPortfolioPerformance);

            entity.ToTable("Tmp_Portfolio_NAVvsINDEX_90");

            entity.HasIndex(e => e.IdBenchMark, "Key_Tmp_Portfolio_NAVvsINDEX_90");

            entity.HasIndex(e => e.IdPortfolio, "Key_Tmp_Portfolio_NAVvsINDEX_90_ID_Portfolio");

            entity.Property(e => e.IdPortfolioPerformance).HasColumnName("ID_PortfolioPerformance");

            entity.Property(e => e.IdBenchMark).HasColumnName("ID_BenchMark");

            entity.Property(e => e.IdPortfolio).HasColumnName("ID_Portfolio");

            entity.Property(e => e.ReBaseIndex)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("ReBase_Index");

            entity.Property(e => e.ReBaseNav)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("ReBase_NAV");

            entity.Property(e => e.ValueDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<TmpPortfolioNavvsIndex92>(entity =>
        {
            entity.HasKey(e => e.IdPortfolioPerformance);

            entity.ToTable("Tmp_Portfolio_NAVvsINDEX_92");

            entity.HasIndex(e => e.IdBenchMark, "Key_Tmp_Portfolio_NAVvsINDEX_92");

            entity.HasIndex(e => e.IdPortfolio, "Key_Tmp_Portfolio_NAVvsINDEX_92_ID_Portfolio");

            entity.Property(e => e.IdPortfolioPerformance).HasColumnName("ID_PortfolioPerformance");

            entity.Property(e => e.IdBenchMark).HasColumnName("ID_BenchMark");

            entity.Property(e => e.IdPortfolio).HasColumnName("ID_Portfolio");

            entity.Property(e => e.ReBaseIndex)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("ReBase_Index");

            entity.Property(e => e.ReBaseNav)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("ReBase_NAV");

            entity.Property(e => e.ValueDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<TmpPortfolioNavvsIndex93>(entity =>
        {
            entity.HasKey(e => e.IdPortfolioPerformance);

            entity.ToTable("Tmp_Portfolio_NAVvsINDEX_93");

            entity.HasIndex(e => e.IdBenchMark, "Key_Tmp_Portfolio_NAVvsINDEX_93");

            entity.HasIndex(e => e.IdPortfolio, "Key_Tmp_Portfolio_NAVvsINDEX_93_ID_Portfolio");

            entity.Property(e => e.IdPortfolioPerformance).HasColumnName("ID_PortfolioPerformance");

            entity.Property(e => e.IdBenchMark).HasColumnName("ID_BenchMark");

            entity.Property(e => e.IdPortfolio).HasColumnName("ID_Portfolio");

            entity.Property(e => e.ReBaseIndex)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("ReBase_Index");

            entity.Property(e => e.ReBaseNav)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("ReBase_NAV");

            entity.Property(e => e.ValueDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<TmpPortfolioNavvsIndex94>(entity =>
        {
            entity.HasKey(e => e.IdPortfolioPerformance);

            entity.ToTable("Tmp_Portfolio_NAVvsINDEX_94");

            entity.HasIndex(e => e.IdBenchMark, "Key_Tmp_Portfolio_NAVvsINDEX_94");

            entity.HasIndex(e => e.IdPortfolio, "Key_Tmp_Portfolio_NAVvsINDEX_94_ID_Portfolio");

            entity.Property(e => e.IdPortfolioPerformance).HasColumnName("ID_PortfolioPerformance");

            entity.Property(e => e.IdBenchMark).HasColumnName("ID_BenchMark");

            entity.Property(e => e.IdPortfolio).HasColumnName("ID_Portfolio");

            entity.Property(e => e.ReBaseIndex)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("ReBase_Index");

            entity.Property(e => e.ReBaseNav)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("ReBase_NAV");

            entity.Property(e => e.ValueDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<TmpPortfolioNavvsIndex99>(entity =>
        {
            entity.HasKey(e => e.IdPortfolioPerformance);

            entity.ToTable("Tmp_Portfolio_NAVvsINDEX_99");

            entity.HasIndex(e => e.IdBenchMark, "Key_Tmp_Portfolio_NAVvsINDEX_99");

            entity.HasIndex(e => e.IdPortfolio, "Key_Tmp_Portfolio_NAVvsINDEX_99_ID_Portfolio");

            entity.Property(e => e.IdPortfolioPerformance).HasColumnName("ID_PortfolioPerformance");

            entity.Property(e => e.IdBenchMark).HasColumnName("ID_BenchMark");

            entity.Property(e => e.IdPortfolio).HasColumnName("ID_Portfolio");

            entity.Property(e => e.ReBaseIndex)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("ReBase_Index");

            entity.Property(e => e.ReBaseNav)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("ReBase_NAV");

            entity.Property(e => e.ValueDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<TmpPortfolioNavvsindex1>(entity =>
        {
            entity.HasKey(e => e.IdPortfolioPerformance)
                .HasName("PK_Tmp_Portfolio_NAVvsINDEX_1");

            entity.ToTable("tmp_portfolio_navvsindex_1");

            entity.HasIndex(e => e.IdBenchMark, "Key_tmp_portfolio_navvsindex_1");

            entity.HasIndex(e => e.IdPortfolio, "Key_tmp_portfolio_navvsindex_1_ID_Portfolio");

            entity.Property(e => e.IdPortfolioPerformance).HasColumnName("ID_PortfolioPerformance");

            entity.Property(e => e.IdBenchMark).HasColumnName("ID_BenchMark");

            entity.Property(e => e.IdPortfolio).HasColumnName("ID_Portfolio");

            entity.Property(e => e.ReBaseIndex)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("ReBase_Index");

            entity.Property(e => e.ReBaseNav)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("ReBase_NAV");

            entity.Property(e => e.ValueDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<TmpRedemptionRequest>(entity =>
        {
            entity.HasKey(e => e.RedemptionRequestId);

            entity.ToTable("Tmp_RedemptionRequest");

            entity.Property(e => e.Avcamt)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("AVCAmt");

            entity.Property(e => e.Avcunit)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("AVCUnit");

            entity.Property(e => e.CertificateNo)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.CostOfUnits).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.EmployeeAmt).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.EmployerAmt).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.IdredemptionContributorAccount).HasColumnName("IDRedemptionContributorAccount");

            entity.Property(e => e.NetSettlement).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.NoOfUnits).HasColumnType("decimal(24, 4)");

            entity.Property(e => e.OfferPrice).HasColumnType("decimal(18, 4)");

            entity.Property(e => e.PenaltyAmount).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.SalesValue).HasColumnType("decimal(18, 2)");
        });

        modelBuilder.Entity<TmpSalesAdvisorReport>(entity =>
        {
            entity.HasKey(e => e.IdEquitySalesTriger);

            entity.ToTable("Tmp_SalesAdvisor_Report");

            entity.Property(e => e.IdEquitySalesTriger).HasColumnName("ID_EquitySalesTriger");

            entity.Property(e => e.Advise)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.CostPrice).HasColumnType("decimal(18, 0)");

            entity.Property(e => e.Gain).HasColumnType("decimal(18, 0)");

            entity.Property(e => e.IdPortfolio).HasColumnName("ID_Portfolio");

            entity.Property(e => e.IdSellTriger).HasColumnName("ID_SellTriger");

            entity.Property(e => e.Loss).HasColumnType("decimal(18, 0)");

            entity.Property(e => e.LossTriger).HasColumnType("decimal(18, 0)");

            entity.Property(e => e.MarketPrice).HasColumnType("decimal(18, 0)");

            entity.Property(e => e.ProfitTriger).HasColumnType("decimal(18, 0)");

            entity.Property(e => e.PurchaseDate).HasColumnType("datetime");

            entity.Property(e => e.QtyOwned).HasColumnType("decimal(18, 0)");

            entity.Property(e => e.ShareId).HasColumnName("ShareID");

            entity.Property(e => e.Symbol)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.UniqueId).HasColumnName("UniqueID");
        });

        modelBuilder.Entity<TmpSqlTable>(entity =>
        {
            entity.HasNoKey();

            entity.ToTable("TmpSqlTable");

            entity.HasIndex(e => e.Amount, "UQ__TmpSqlTable__76F066F3")
                .IsUnique();

            entity.Property(e => e.Amount)
                .HasColumnType("decimal(31, 4)")
                .HasColumnName("AMOUNT");
        });

        modelBuilder.Entity<TmpUnBalancedPostingBizUnit>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("Tmp_UnBalancedPosting_BizUnit");

            entity.Property(e => e.Balance).HasColumnType("decimal(38, 2)");

            entity.Property(e => e.IdBranch)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("ID_Branch");

            entity.Property(e => e.PostPeriod)
                .HasMaxLength(6)
                .IsUnicode(false);

            entity.Property(e => e.VoucherNo)
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TmpValuation01>(entity =>
        {
            entity.HasKey(e => e.IdTmpValuation01);

            entity.ToTable("TmpValuation_01");

            entity.Property(e => e.IdTmpValuation01).HasColumnName("ID_TmpValuation_01");

            entity.Property(e => e.AccountNo)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.AssetClass)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.Conideration).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.Description)
                .HasMaxLength(150)
                .IsUnicode(false);

            entity.Property(e => e.EffectiveDate).HasColumnType("datetime");

            entity.Property(e => e.FaceValue)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("face_value");

            entity.Property(e => e.FaceValue1)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("FaceValue");

            entity.Property(e => e.Holding).HasColumnType("decimal(31, 8)");

            entity.Property(e => e.IdInv)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("ID_Inv");

            entity.Property(e => e.IdInvestmentType)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("ID_InvestmentType");

            entity.Property(e => e.IdPortfolio).HasColumnName("ID_Portfolio");

            entity.Property(e => e.IdTreatmentType)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("ID_TreatmentType");

            entity.Property(e => e.InterestRate)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("interest_rate");

            entity.Property(e => e.InterestToDate)
                .HasColumnType("decimal(20, 2)")
                .HasColumnName("interest_to_date");

            entity.Property(e => e.ItemId).HasColumnName("item_id");

            entity.Property(e => e.MarketPrice).HasColumnType("decimal(18, 4)");

            entity.Property(e => e.MarketValue).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.MaturityDate).HasColumnType("datetime");

            entity.Property(e => e.MaturityDate1)
                .HasColumnType("datetime")
                .HasColumnName("maturity_date");

            entity.Property(e => e.OriginalCost).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.PremDisc)
                .HasColumnType("decimal(20, 2)")
                .HasColumnName("Prem_Disc");

            entity.Property(e => e.PurchaseCost).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.PurchaseDate).HasColumnType("datetime");

            entity.Property(e => e.ShareId).HasColumnName("ShareID");

            entity.Property(e => e.SubAssetClass)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.Property(e => e.TotalCost).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.TransactionCost).HasColumnType("decimal(31, 2)");

            entity.Property(e => e.Treatment)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.Property(e => e.Unamortised).HasColumnType("decimal(20, 2)");

            entity.Property(e => e.ValueDate)
                .HasColumnType("datetime")
                .HasColumnName("value_date");
        });

        modelBuilder.Entity<TmpValuation02>(entity =>
        {
            entity.HasKey(e => e.IdTmpValuation02);

            entity.ToTable("TmpValuation_02");

            entity.Property(e => e.IdTmpValuation02).HasColumnName("ID_TmpValuation_02");

            entity.Property(e => e.Description)
                .HasMaxLength(150)
                .IsUnicode(false);

            entity.Property(e => e.PortfolioId).HasColumnName("PortfolioID");

            entity.Property(e => e.TotalCost).HasColumnType("decimal(31, 2)");
        });

        modelBuilder.Entity<TmpValuation03>(entity =>
        {
            entity.HasKey(e => e.IdTmpValuation03);

            entity.ToTable("TmpValuation_03");

            entity.Property(e => e.IdTmpValuation03)
                .ValueGeneratedNever()
                .HasColumnName("ID_TmpValuation_03");

            entity.Property(e => e.Description)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.PortfolioId).HasColumnName("PortfolioID");

            entity.Property(e => e.TotalUnits).HasColumnType("decimal(31, 4)");
        });

        modelBuilder.Entity<TmpValuation04>(entity =>
        {
            entity.HasKey(e => e.IdTmpValuation04)
                .HasName("Pk_TmpValuation_04");

            entity.ToTable("TmpValuation_04");

            entity.Property(e => e.IdTmpValuation04).HasColumnName("ID_TmpValuation04");

            entity.Property(e => e.Brokerage).HasColumnType("decimal(31, 2)");

            entity.Property(e => e.Consideration).HasColumnType("decimal(31, 2)");

            entity.Property(e => e.Cscsfees)
                .HasColumnType("decimal(31, 2)")
                .HasColumnName("CSCSFees");

            entity.Property(e => e.GrossAmount).HasColumnType("decimal(31, 2)");

            entity.Property(e => e.Nsefees)
                .HasColumnType("decimal(31, 2)")
                .HasColumnName("NSEFees");

            entity.Property(e => e.OtherFees).HasColumnType("decimal(31, 2)");

            entity.Property(e => e.PortfolioId).HasColumnName("PortfolioID");

            entity.Property(e => e.SecFees).HasColumnType("decimal(31, 2)");

            entity.Property(e => e.ShareName)
                .HasMaxLength(150)
                .IsUnicode(false);

            entity.Property(e => e.StampDuty).HasColumnType("decimal(31, 2)");

            entity.Property(e => e.TotalFees).HasColumnType("decimal(31, 2)");

            entity.Property(e => e.TransactionType)
                .HasMaxLength(10)
                .IsUnicode(false);

            entity.Property(e => e.Units).HasColumnType("decimal(31, 0)");

            entity.Property(e => e.ValueDate).HasColumnType("datetime");

            entity.Property(e => e.Vat)
                .HasColumnType("decimal(31, 2)")
                .HasColumnName("VAT");
        });

        modelBuilder.Entity<TmpValuation05>(entity =>
        {
            entity.HasKey(e => e.IdTmpValuation05);

            entity.ToTable("TmpValuation_05");

            entity.Property(e => e.IdTmpValuation05).HasColumnName("ID_TmpValuation_05");

            entity.Property(e => e.BenchRate).HasColumnType("decimal(31, 2)");

            entity.Property(e => e.Description)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.IdBenchMark).HasColumnName("ID_BenchMark");

            entity.Property(e => e.PortfolioId).HasColumnName("PortfolioID");

            entity.Property(e => e.PortfolioRate).HasColumnType("decimal(31, 2)");

            entity.Property(e => e.RepType)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.ValueDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<TmpValuation06>(entity =>
        {
            entity.HasKey(e => e.IdTmpValuation05);

            entity.ToTable("TmpValuation_06");

            entity.Property(e => e.IdTmpValuation05).HasColumnName("ID_TmpValuation_05");

            entity.Property(e => e.AmountPayable).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.AmountRecable).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.BrokerId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("BrokerID");

            entity.Property(e => e.BrokerName)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.Property(e => e.IdPortfolio).HasColumnName("ID_Portfolio");

            entity.Property(e => e.UniqueId).HasColumnName("UniqueID");
        });

        modelBuilder.Entity<TmpValuation4AssetMgr01>(entity =>
        {
            entity.HasKey(e => e.IdTmpValuation4AssetMgr01)
                .HasName("PK_TmpValuation_4_AssetMgr_01");

            entity.ToTable("TmpValuation_4_AssetMgr01");

            entity.Property(e => e.IdTmpValuation4AssetMgr01).HasColumnName("ID_TmpValuation_4_AssetMgr_01");

            entity.Property(e => e.AssetValue).HasColumnType("decimal(18, 0)");

            entity.Property(e => e.Consideration).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.Description)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.GainLoss).HasColumnType("decimal(18, 0)");

            entity.Property(e => e.Holding).HasColumnType("decimal(31, 0)");

            entity.Property(e => e.IdDealMaster).HasColumnName("ID_DealMaster");

            entity.Property(e => e.IdInvestmentType)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("ID_InvestmentType");

            entity.Property(e => e.IdPortfolio).HasColumnName("ID_Portfolio");

            entity.Property(e => e.IdSubInvestmentType)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("ID_SubInvestmentType");

            entity.Property(e => e.LastIncentiveDate).HasColumnType("datetime");

            entity.Property(e => e.LoanId).HasColumnName("LoanID");

            entity.Property(e => e.Price).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.PurchaseCost).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.PurchaseDate).HasColumnType("datetime");

            entity.Property(e => e.ShareId).HasColumnName("ShareID");

            entity.Property(e => e.TotalCost).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.TransactionCost).HasColumnType("decimal(31, 2)");
        });

        modelBuilder.Entity<TmpValuation4AssetMgr02>(entity =>
        {
            entity.HasKey(e => e.IdTmpValuation4AssetMgr02);

            entity.ToTable("TmpValuation_4_AssetMgr02");

            entity.Property(e => e.IdTmpValuation4AssetMgr02).HasColumnName("ID_TmpValuation_4_AssetMgr_02");

            entity.Property(e => e.AnnualId).HasColumnName("AnnualID");

            entity.Property(e => e.BonusFor).HasColumnName("Bonus_For");

            entity.Property(e => e.BonusRate).HasColumnName("Bonus_Rate");

            entity.Property(e => e.DeclaredDate).HasColumnType("datetime");

            entity.Property(e => e.DeclaredId).HasColumnName("DeclaredID");

            entity.Property(e => e.Description)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.DividendDue).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.DividendRate)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("Dividend_Rate");

            entity.Property(e => e.DividendReceived).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.IdPortfolio).HasColumnName("ID_Portfolio");

            entity.Property(e => e.PaymentDate).HasColumnType("datetime");

            entity.Property(e => e.ReportType)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.ShareId).HasColumnName("ShareID");
        });

        modelBuilder.Entity<TmpValuation4AssetMgr03>(entity =>
        {
            entity.HasKey(e => e.IdTmpValuation4AssetMgr03);

            entity.ToTable("TmpValuation_4_AssetMgr03");

            entity.Property(e => e.IdTmpValuation4AssetMgr03).HasColumnName("ID_TmpValuation_4_AssetMgr03");

            entity.Property(e => e.DepositAmount).HasColumnType("decimal(31, 2)");

            entity.Property(e => e.DepositId).HasColumnName("DepositID");

            entity.Property(e => e.IdPortfolio).HasColumnName("ID_Portfolio");

            entity.Property(e => e.QtyAlloted).HasColumnType("decimal(31, 4)");

            entity.Property(e => e.QtyRequested).HasColumnType("decimal(31, 4)");

            entity.Property(e => e.RefundAmount).HasColumnType("decimal(31, 2)");

            entity.Property(e => e.ShareId).HasColumnName("ShareID");

            entity.Property(e => e.UnitCost).HasColumnType("decimal(31, 2)");
        });

        modelBuilder.Entity<TmpValuationBond>(entity =>
        {
            entity.HasNoKey();

            entity.ToTable("tmpValuationBonds");

            entity.Property(e => e.AssetValue).HasColumnType("decimal(18, 0)");

            entity.Property(e => e.GainLoss).HasColumnType("decimal(18, 0)");

            entity.Property(e => e.Id2link).HasColumnName("ID2Link");

            entity.Property(e => e.IdPortfolio).HasColumnName("ID_Portfolio");

            entity.Property(e => e.IdValBond)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID_ValBond");

            entity.Property(e => e.Narration)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.Property(e => e.PurchaseDate).HasColumnType("datetime");

            entity.Property(e => e.Qty).HasColumnType("decimal(18, 0)");

            entity.Property(e => e.SecurityName)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.TotalCost).HasColumnType("decimal(18, 0)");

            entity.Property(e => e.TransDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<TmpValuationCash>(entity =>
        {
            entity.HasNoKey();

            entity.ToTable("tmpValuationCash");

            entity.Property(e => e.AmountCf)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("AmountCF");

            entity.Property(e => e.AmountCr).HasColumnType("decimal(18, 0)");

            entity.Property(e => e.AmountDb).HasColumnType("decimal(18, 0)");

            entity.Property(e => e.IdPortfolio).HasColumnName("ID_Portfolio");

            entity.Property(e => e.IdValCash)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID_ValCash");

            entity.Property(e => e.Narration)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.Property(e => e.TransDate).HasColumnType("datetime");

            entity.Property(e => e.ValueDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<TmpValuationEquity>(entity =>
        {
            entity.HasNoKey();

            entity.ToTable("tmpValuationEquity");

            entity.Property(e => e.AssetValue).HasColumnType("decimal(18, 0)");

            entity.Property(e => e.CurMrkPrice).HasColumnType("decimal(18, 0)");

            entity.Property(e => e.DividendExpctd).HasColumnType("decimal(18, 0)");

            entity.Property(e => e.GainLoss).HasColumnType("decimal(18, 0)");

            entity.Property(e => e.Id2link).HasColumnName("ID2Link");

            entity.Property(e => e.IdPortfolio).HasColumnName("ID_Portfolio");

            entity.Property(e => e.IdValEquity)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID_ValEquity");

            entity.Property(e => e.MarketValue).HasColumnType("decimal(18, 0)");

            entity.Property(e => e.PercGrowth).HasColumnType("decimal(18, 0)");

            entity.Property(e => e.PercOfTotal).HasColumnType("decimal(18, 0)");

            entity.Property(e => e.Qty).HasColumnType("decimal(18, 0)");

            entity.Property(e => e.SecurityName)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TmpValuationMoneyMkt>(entity =>
        {
            entity.HasNoKey();

            entity.ToTable("tmpValuationMoneyMkt");

            entity.Property(e => e.AssetValue).HasColumnType("decimal(18, 0)");

            entity.Property(e => e.GainLoss).HasColumnType("decimal(18, 0)");

            entity.Property(e => e.Id2link).HasColumnName("ID2Link");

            entity.Property(e => e.IdPortfolio).HasColumnName("ID_Portfolio");

            entity.Property(e => e.IdValMoneyMkt)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID_ValMoneyMkt");

            entity.Property(e => e.Narration)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.Property(e => e.PurchaseDate).HasColumnType("datetime");

            entity.Property(e => e.Qty).HasColumnType("decimal(18, 0)");

            entity.Property(e => e.SecurityName)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.TotalCost).HasColumnType("decimal(18, 0)");

            entity.Property(e => e.TransDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<TmpValuationSummary>(entity =>
        {
            entity.HasNoKey();

            entity.ToTable("tmpValuationSummary");

            entity.Property(e => e.AssetValue).HasColumnType("decimal(18, 0)");

            entity.Property(e => e.IdInvstModule).HasColumnName("ID_InvstModule");

            entity.Property(e => e.IdPortfolio).HasColumnName("ID_Portfolio");

            entity.Property(e => e.IdTmpValSummary)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID_tmpValSummary");

            entity.Property(e => e.InvstDescription)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TopManagement>(entity =>
        {
            entity.HasKey(e => e.Sncode);

            entity.ToTable("topManagement");

            entity.Property(e => e.Sncode).HasColumnName("SNCode");

            entity.Property(e => e.Address)
                .HasMaxLength(30)
                .IsUnicode(false);

            entity.Property(e => e.Email)
                .HasMaxLength(30)
                .IsUnicode(false);

            entity.Property(e => e.FullName)
                .HasMaxLength(30)
                .IsUnicode(false);

            
                
                

            entity.Property(e => e.PfaCode)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("PFA_Code");

            entity.Property(e => e.PfaName)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("PFA_Name");

            entity.Property(e => e.Position)
                .HasMaxLength(30)
                .IsUnicode(false);

            entity.Property(e => e.Telephone)
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TrailBalance>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("TrailBalance");

            entity.Property(e => e.AccountNo)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.Amount).HasColumnType("decimal(38, 2)");

            entity.Property(e => e.CrAmount).HasColumnType("decimal(38, 2)");

            entity.Property(e => e.DrAmount).HasColumnType("decimal(38, 2)");

            entity.Property(e => e.PostPeriod)
                .HasMaxLength(6)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TransMarket>(entity =>
        {
            entity.HasKey(e => e.IdTransMarket);

            entity.ToTable("TransMarket");

            entity.HasIndex(e => e.TransMarket1, "Key_TransMarket_TransMarket")
                .IsUnique();

            entity.Property(e => e.IdTransMarket).HasColumnName("ID_TransMarket");

            entity.Property(e => e.MarketShortName)
                .HasMaxLength(10)
                .IsUnicode(false);

            entity.Property(e => e.TransMarket1)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("TransMarket");
        });

        modelBuilder.Entity<TransactionTrail>(entity =>
        {
            entity.HasKey(e => e.IdTransactionTrail);

            entity.ToTable("Transaction_Trail");

            entity.Property(e => e.IdTransactionTrail).HasColumnName("ID_TransactionTrail");

            entity.Property(e => e.AmortiseAmount).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.AmortiseDaily).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.CouponDifference).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.Description)
                .HasMaxLength(200)
                .IsUnicode(false);

            entity.Property(e => e.DisposalDate).HasColumnType("datetime");

            entity.Property(e => e.FaceValue).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.Id2link).HasColumnName("ID2Link");

            entity.Property(e => e.IdInv)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("ID_Inv");

            entity.Property(e => e.IdInvestmentTypeName)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("ID_InvestmentTypeName");

            entity.Property(e => e.IdPortfolio).HasColumnName("ID_Portfolio");

            entity.Property(e => e.IntBeginDate).HasColumnType("datetime");

            entity.Property(e => e.InterestIncome).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.InterestRate).HasColumnType("decimal(18, 8)");

            entity.Property(e => e.InvestmentModule)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.Property(e => e.MarketValue).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.MaturityDate).HasColumnType("datetime");

            entity.Property(e => e.PremiumDiscount).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.Principal).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.QtyUnits).HasColumnType("decimal(18, 4)");

            entity.Property(e => e.RealiseGainLoss).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.TotalCost).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.TotalIncome).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.ValueDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<UnPostedCashBook>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("UnPosted_CashBook");

            entity.Property(e => e.IdPortfolioAccount)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID_PortfolioAccount");
        });

        modelBuilder.Entity<UpdateClientId>(entity =>
        {
            entity.HasNoKey();

            entity.ToTable("UpdateClientID");

            entity.Property(e => e.NewId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NewID");

            entity.Property(e => e.OldId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("oldID");

            entity.Property(e => e.Ucid)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("UCID");
        });

        modelBuilder.Entity<ValuationCheck>(entity =>
        {
            entity.HasKey(e => e.IdValuationCheck);

            entity.ToTable("ValuationCheck");

            entity.Property(e => e.IdValuationCheck).HasColumnName("ID_ValuationCheck");

            entity.Property(e => e.Id2link).HasColumnName("ID2Link");

            entity.Property(e => e.IdPortfolio).HasColumnName("ID_Portfolio");

            entity.Property(e => e.IgnoredBy)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.Module)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.Narration)
                .HasMaxLength(150)
                .IsUnicode(false);

            entity.Property(e => e.TableName)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.Property(e => e.ValuationDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<ValuationHistory>(entity =>
        {
            entity.HasKey(e => e.IdValuation)
                .IsClustered(false);

            entity.ToTable("ValuationHistory");

            entity.HasIndex(e => new { e.IdPortfolio, e.Id2link, e.IdInvestmentType, e.ValuationDate, e.InvestmentModule }, "Key_ValuationHistory_Unique")
                .IsUnique();

            entity.HasIndex(e => new { e.IdPortfolio, e.InvestmentModule }, "Key_Valuation_Speed_10");

            entity.HasIndex(e => new { e.IdPortfolio, e.IdInvestmentType, e.InvestmentModule }, "Key_Valuation_Speed_11");

            entity.HasIndex(e => new { e.ValuationDate, e.InvestmentModule }, "Key_Valuation_Speed_12");

            entity.HasIndex(e => new { e.IdInvestmentType, e.ValuationDate }, "Key_Valuation_history_Speedup_05");

            entity.HasIndex(e => new { e.IdInvestmentType, e.ValuationDate }, "ValuationHistory_Speedup_02");

            entity.HasIndex(e => new { e.ValuationDate, e.IdCustomer }, "Valuation_history_Speedup");

            entity.HasIndex(e => new { e.IdPortfolio, e.ValuationDate, e.InvestmentModule }, "Valuation_history_Speedup_03");

            entity.HasIndex(e => new { e.IdPortfolio, e.ValuationDate, e.InvestmentModule, e.IdCustomer }, "Valuation_history_Speedup_04");

            entity.HasIndex(e => new { e.ValuationDate, e.IdInvestmentType, e.IdPortfolio }, "_dta_index_ValuationHistory_12_642817352__K5_K3_K2");

            entity.Property(e => e.IdValuation).HasColumnName("ID_Valuation");

            entity.Property(e => e.AssetValue).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.Commission).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.CostOfAsset).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.CurMrkPrice).HasColumnType("decimal(18, 8)");

            entity.Property(e => e.DayExchangeGainLoss).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.DayInterest).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.DayPremiumDiscount).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.DayUnrealiseGainLoss).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.ExRate).HasColumnType("decimal(18, 4)");

            entity.Property(e => e.ExpectedBonus).HasColumnType("decimal(24, 4)");

            entity.Property(e => e.ExpectedDividend).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.GainLoss).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.Id2link).HasColumnName("ID2Link");

            entity.Property(e => e.IdCurrency)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("ID_Currency");

            entity.Property(e => e.IdCustomer).HasColumnName("ID_Customer");

            entity.Property(e => e.IdInv)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("ID_Inv");

            entity.Property(e => e.IdInvestmentType)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("ID_InvestmentType");

            entity.Property(e => e.IdPortfolio).HasColumnName("ID_Portfolio");

            entity.Property(e => e.Interest2Date).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.InvestmentModule)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.LocalAssetValue).HasColumnType("decimal(18, 2)");

            
                
                

            entity.Property(e => e.MtmGainLoss)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("MTM_GainLoss");

            entity.Property(e => e.MtmValue)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("MTM_Value");

            entity.Property(e => e.NseCscsfees)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("NseCSCSFees");

            entity.Property(e => e.OtherFees).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.PremiumDiscount2Date).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.Qty).HasColumnType("decimal(24, 4)");

            entity.Property(e => e.SecFees).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.StampDuty).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.TransactionCost).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.ValuationDate).HasColumnType("datetime");

            entity.Property(e => e.Vat)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VAT");

            entity.Property(e => e.VoucherNo)
                .HasMaxLength(10)
                .IsUnicode(false);

            entity.Property(e => e.WithholdingTax).HasColumnType("decimal(18, 2)");

            entity.HasOne(d => d.IdInvestmentTypeNavigation)
                .WithMany(p => p.ValuationHistories)
                .HasForeignKey(d => d.IdInvestmentType)
                .HasConstraintName("FK_ValuationHistory_InvestmentType");

            entity.HasOne(d => d.IdPortfolioNavigation)
                .WithMany(p => p.ValuationHistories)
                .HasForeignKey(d => d.IdPortfolio)
                .HasConstraintName("FK_ValuationHistory_Portfolio");
        });

        modelBuilder.Entity<ValuationHistorySave>(entity =>
        {
            entity.HasKey(e => e.IdValuation);

            entity.ToTable("ValuationHistory_SAVE");

            entity.Property(e => e.IdValuation)
                .ValueGeneratedNever()
                .HasColumnName("ID_Valuation");

            entity.Property(e => e.AssetValue).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.Commission).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.CostOfAsset).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.CurMrkPrice).HasColumnType("decimal(18, 8)");

            entity.Property(e => e.DayExchangeGainLoss).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.DayInterest).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.DayPremiumDiscount).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.DayUnrealiseGainLoss).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.ExpectedBonus).HasColumnType("decimal(24, 4)");

            entity.Property(e => e.ExpectedDividend).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.GainLoss).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.Id2link).HasColumnName("ID2Link");

            entity.Property(e => e.IdCustomer).HasColumnName("ID_Customer");

            entity.Property(e => e.IdInv)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("ID_Inv");

            entity.Property(e => e.IdInvestmentType)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("ID_InvestmentType");

            entity.Property(e => e.IdPortfolio).HasColumnName("ID_Portfolio");

            entity.Property(e => e.Interest2Date).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.InvestmentModule)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.MtmGainLoss)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("MTM_GainLoss");

            entity.Property(e => e.MtmValue)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("MTM_Value");

            entity.Property(e => e.NseCscsfees)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("NseCSCSFees");

            entity.Property(e => e.OtherFees).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.PremiumDiscount2Date).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.Qty).HasColumnType("decimal(24, 4)");

            entity.Property(e => e.SecFees).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.StampDuty).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.TransactionCost).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.ValuationDate).HasColumnType("datetime");

            entity.Property(e => e.Vat)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VAT");

            entity.Property(e => e.VoucherNo)
                .HasMaxLength(10)
                .IsUnicode(false);

            entity.Property(e => e.WithholdingTax).HasColumnType("decimal(18, 2)");
        });

        modelBuilder.Entity<VariableAssetClass>(entity =>
        {
            entity.HasKey(e => e.IdVariableAssetClass);

            entity.ToTable("VariableAssetClass");

            entity.HasIndex(e => e.VariableAssetClass1, "Key_VariableAssetClass_VariableAssetClass")
                .IsUnique();

            entity.Property(e => e.IdVariableAssetClass)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("ID_VariableAssetClass");

            entity.Property(e => e.IdInvestmentType)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("ID_InvestmentType");

            entity.Property(e => e.VariableAssetClass1)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("VariableAssetClass");
        });

        modelBuilder.Entity<VariableAssetClassMapping>(entity =>
        {
            entity.HasKey(e => e.IdVariableAssetClassMapping);

            entity.ToTable("VariableAssetClassMapping");

            entity.HasIndex(e => new { e.IdInvestmentType, e.IdVariableAssetClass }, "Key_VariableAssetClassMapping_Unique");

            entity.Property(e => e.IdVariableAssetClassMapping).HasColumnName("ID_VariableAssetClassMapping");

            entity.Property(e => e.IdInvestmentType)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("ID_InvestmentType");

            entity.Property(e => e.IdVariableAssetClass)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("ID_VariableAssetClass");
        });

        modelBuilder.Entity<ViewAiicoX>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("VIEW_AIICO_X");

            entity.Property(e => e.BidPrice).HasColumnType("decimal(18, 4)");

            entity.Property(e => e.DayNav)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("DayNAV");

            entity.Property(e => e.DayNetIncome).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.DayWam)
                .HasColumnType("decimal(18, 8)")
                .HasColumnName("DayWAM");

            entity.Property(e => e.DayYield).HasColumnType("decimal(18, 8)");

            entity.Property(e => e.IdPortfolio).HasColumnName("ID_Portfolio");

            entity.Property(e => e.IdPortfolioValuationHistory)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID_PortfolioValuationHistory");

            entity.Property(e => e.MgtFeesBf)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("MgtFees_bf");

            ;

            entity.Property(e => e.MtmnetAssetValue)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("MTMNetAssetValue");

            entity.Property(e => e.NetAssetVaule).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.OfferPrice).HasColumnType("decimal(18, 4)");

            entity.Property(e => e.TotalUnits).HasColumnType("decimal(31, 4)");

            entity.Property(e => e.UnitValue).HasColumnType("decimal(18, 4)");

            entity.Property(e => e.ValuationDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<ViewBankBalance>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("View_BankBalances");

            entity.Property(e => e.AccountName)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.ClearedBalance).HasColumnType("decimal(38, 2)");

            entity.Property(e => e.IdBankAccount)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("ID_BankAccount");

            entity.Property(e => e.PostdatedPayments).HasColumnType("decimal(38, 2)");

            entity.Property(e => e.UnClrEffectsPayments)
                .HasColumnType("decimal(38, 2)")
                .HasColumnName("UnClrEffects_Payments");

            entity.Property(e => e.UnClrEffectsReceipts)
                .HasColumnType("decimal(38, 2)")
                .HasColumnName("UnClrEffects_Receipts");
        });

        modelBuilder.Entity<ViewFixedIncomeReminder>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("View_FixedIncomeReminder");

            entity.Property(e => e.Amount).HasColumnType("decimal(19, 2)");

            entity.Property(e => e.ExpectedDate).HasColumnType("datetime");

            entity.Property(e => e.Id)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("ID");

            entity.Property(e => e.LoanId).HasColumnName("LoanID");

            entity.Property(e => e.PaymentType)
                .HasMaxLength(9)
                .IsUnicode(false);
        });

        modelBuilder.Entity<ViewInvestmentSummary4Grapgh>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("View_InvestmentSummary4Grapgh");

            entity.Property(e => e.Amount).HasColumnType("decimal(38, 10)");

            entity.Property(e => e.IdInvestmentType)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("ID_InvestmentType");

            entity.Property(e => e.IdPortfolio).HasColumnName("ID_Portfolio");
        });

        modelBuilder.Entity<ViewPortfolioPerformance>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("View_PortfolioPerformance");

            entity.Property(e => e.IdPortfolio).HasColumnName("ID_Portfolio");

            entity.Property(e => e.IdPortfolioValuationHistory)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID_PortfolioValuationHistory");

            entity.Property(e => e.NetAssetVaule).HasColumnType("decimal(26, 10)");

            entity.Property(e => e.Principal).HasColumnType("decimal(38, 6)");

            entity.Property(e => e.TotalUnits).HasColumnType("decimal(31, 4)");

            entity.Property(e => e.UnitValue).HasColumnType("decimal(18, 4)");

            entity.Property(e => e.ValuationDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<VofPropertyDetail>(entity =>
        {
            entity.HasKey(e => e.IdPropertyDetail);

            entity.ToTable("VOF_PropertyDetail");

            entity.Property(e => e.IdPropertyDetail).HasColumnName("ID_PropertyDetail");

            entity.Property(e => e.IdPropertyMaster).HasColumnName("ID_PropertyMaster");

            entity.Property(e => e.IdRealEstateGlextract).HasColumnName("ID_RealEstateGLExtract");
        });

        modelBuilder.Entity<VofPropertyMaster>(entity =>
        {
            entity.HasKey(e => e.IdPropertyMaster);

            entity.ToTable("VOF_PropertyMaster");

            entity.Property(e => e.IdPropertyMaster).HasColumnName("ID_PropertyMaster");

            entity.Property(e => e.PropertyName)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.Property(e => e.VofType)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<Vw104ValuationSummary>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("Vw_104_ValuationSummary");

            entity.Property(e => e.AssetValue).HasColumnType("decimal(38, 2)");

            entity.Property(e => e.CostOfAsset).HasColumnType("decimal(38, 2)");

            entity.Property(e => e.IdInvestmentType)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("ID_InvestmentType");

            entity.Property(e => e.IdPortfolio).HasColumnName("ID_Portfolio");

            entity.Property(e => e.IdValuationSumary).HasColumnName("ID_ValuationSumary");

            entity.Property(e => e.ValuationDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<Vw105ValuationSummary>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("Vw_105_ValuationSummary");

            entity.Property(e => e.AssetValue).HasColumnType("decimal(38, 2)");

            entity.Property(e => e.CostOfAsset).HasColumnType("decimal(38, 2)");

            entity.Property(e => e.IdInvestmentType)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("ID_InvestmentType");

            entity.Property(e => e.IdPortfolio).HasColumnName("ID_Portfolio");

            entity.Property(e => e.IdValuationSumary).HasColumnName("ID_ValuationSumary");

            entity.Property(e => e.ValuationDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<Vw106ValuationSummary>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("Vw_106_ValuationSummary");

            entity.Property(e => e.AssetValue).HasColumnType("decimal(38, 2)");

            entity.Property(e => e.CostOfAsset).HasColumnType("decimal(38, 2)");

            entity.Property(e => e.IdInvestmentType)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("ID_InvestmentType");

            entity.Property(e => e.IdPortfolio).HasColumnName("ID_Portfolio");

            entity.Property(e => e.IdValuationSumary).HasColumnName("ID_ValuationSumary");

            entity.Property(e => e.ValuationDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<Vw107ValuationSummary>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("Vw_107_ValuationSummary");

            entity.Property(e => e.AssetValue).HasColumnType("decimal(38, 2)");

            entity.Property(e => e.CostOfAsset).HasColumnType("decimal(38, 2)");

            entity.Property(e => e.IdInvestmentType)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("ID_InvestmentType");

            entity.Property(e => e.IdPortfolio).HasColumnName("ID_Portfolio");

            entity.Property(e => e.IdValuationSumary).HasColumnName("ID_ValuationSumary");

            entity.Property(e => e.ValuationDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<Vw10ValuationSummary>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("Vw_10_ValuationSummary");

            entity.Property(e => e.AssetValue).HasColumnType("decimal(38, 2)");

            entity.Property(e => e.CostOfAsset).HasColumnType("decimal(38, 2)");

            entity.Property(e => e.IdInvestmentType)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("ID_InvestmentType");

            entity.Property(e => e.IdPortfolio).HasColumnName("ID_Portfolio");

            entity.Property(e => e.IdValuationSumary).HasColumnName("ID_ValuationSumary");

            entity.Property(e => e.ValuationDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<Vw120ValuationSummary>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("Vw_120_ValuationSummary");

            entity.Property(e => e.AssetValue).HasColumnType("decimal(38, 2)");

            entity.Property(e => e.CostOfAsset).HasColumnType("decimal(38, 2)");

            entity.Property(e => e.IdInvestmentType)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("ID_InvestmentType");

            entity.Property(e => e.IdPortfolio).HasColumnName("ID_Portfolio");

            entity.Property(e => e.IdValuationSumary).HasColumnName("ID_ValuationSumary");

            entity.Property(e => e.ValuationDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<Vw12ValuationSummary>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("Vw_12_ValuationSummary");

            entity.Property(e => e.AssetValue).HasColumnType("decimal(38, 2)");

            entity.Property(e => e.CostOfAsset).HasColumnType("decimal(38, 2)");

            entity.Property(e => e.IdInvestmentType)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("ID_InvestmentType");

            entity.Property(e => e.IdPortfolio).HasColumnName("ID_Portfolio");

            entity.Property(e => e.IdValuationSumary).HasColumnName("ID_ValuationSumary");

            entity.Property(e => e.ValuationDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<Vw16ValuationSummary>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("Vw_16_ValuationSummary");

            entity.Property(e => e.AssetValue).HasColumnType("decimal(38, 2)");

            entity.Property(e => e.CostOfAsset).HasColumnType("decimal(38, 2)");

            entity.Property(e => e.IdInvestmentType)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("ID_InvestmentType");

            entity.Property(e => e.IdPortfolio).HasColumnName("ID_Portfolio");

            entity.Property(e => e.IdValuationSumary).HasColumnName("ID_ValuationSumary");

            entity.Property(e => e.ValuationDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<Vw17ValuationSummary>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("Vw_17_ValuationSummary");

            entity.Property(e => e.AssetValue).HasColumnType("decimal(38, 2)");

            entity.Property(e => e.CostOfAsset).HasColumnType("decimal(38, 2)");

            entity.Property(e => e.IdInvestmentType)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("ID_InvestmentType");

            entity.Property(e => e.IdPortfolio).HasColumnName("ID_Portfolio");

            entity.Property(e => e.IdValuationSumary).HasColumnName("ID_ValuationSumary");

            entity.Property(e => e.ValuationDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<Vw18ValuationSummary>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("Vw_18_ValuationSummary");

            entity.Property(e => e.AssetValue).HasColumnType("decimal(38, 2)");

            entity.Property(e => e.CostOfAsset).HasColumnType("decimal(38, 2)");

            entity.Property(e => e.IdInvestmentType)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("ID_InvestmentType");

            entity.Property(e => e.IdPortfolio).HasColumnName("ID_Portfolio");

            entity.Property(e => e.IdValuationSumary).HasColumnName("ID_ValuationSumary");

            entity.Property(e => e.ValuationDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<Vw19ValuationSummary>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("Vw_19_ValuationSummary");

            entity.Property(e => e.AssetValue).HasColumnType("decimal(38, 2)");

            entity.Property(e => e.CostOfAsset).HasColumnType("decimal(38, 2)");

            entity.Property(e => e.IdInvestmentType)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("ID_InvestmentType");

            entity.Property(e => e.IdPortfolio).HasColumnName("ID_Portfolio");

            entity.Property(e => e.IdValuationSumary).HasColumnName("ID_ValuationSumary");

            entity.Property(e => e.ValuationDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<Vw1ValuationSummary>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("Vw_1_ValuationSummary");

            entity.Property(e => e.AssetValue).HasColumnType("decimal(38, 2)");

            entity.Property(e => e.CostOfAsset).HasColumnType("decimal(38, 2)");

            entity.Property(e => e.IdInvestmentType)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("ID_InvestmentType");

            entity.Property(e => e.IdPortfolio).HasColumnName("ID_Portfolio");

            entity.Property(e => e.IdValuationSumary).HasColumnName("ID_ValuationSumary");

            entity.Property(e => e.ValuationDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<Vw21ValuationSummary>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("Vw_21_ValuationSummary");

            entity.Property(e => e.AssetValue).HasColumnType("decimal(38, 2)");

            entity.Property(e => e.CostOfAsset).HasColumnType("decimal(38, 2)");

            entity.Property(e => e.IdInvestmentType)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("ID_InvestmentType");

            entity.Property(e => e.IdPortfolio).HasColumnName("ID_Portfolio");

            entity.Property(e => e.IdValuationSumary).HasColumnName("ID_ValuationSumary");

            entity.Property(e => e.ValuationDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<Vw27ValuationSummary>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("Vw_27_ValuationSummary");

            entity.Property(e => e.AssetValue).HasColumnType("decimal(38, 2)");

            entity.Property(e => e.CostOfAsset).HasColumnType("decimal(38, 2)");

            entity.Property(e => e.IdInvestmentType)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("ID_InvestmentType");

            entity.Property(e => e.IdPortfolio).HasColumnName("ID_Portfolio");

            entity.Property(e => e.IdValuationSumary).HasColumnName("ID_ValuationSumary");

            entity.Property(e => e.ValuationDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<Vw2ValuationSummary>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("Vw_2_ValuationSummary");

            entity.Property(e => e.AssetValue).HasColumnType("decimal(38, 2)");

            entity.Property(e => e.CostOfAsset).HasColumnType("decimal(38, 2)");

            entity.Property(e => e.IdInvestmentType)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("ID_InvestmentType");

            entity.Property(e => e.IdPortfolio).HasColumnName("ID_Portfolio");

            entity.Property(e => e.IdValuationSumary).HasColumnName("ID_ValuationSumary");

            entity.Property(e => e.ValuationDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<Vw30ValuationSummary>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("Vw_30_ValuationSummary");

            entity.Property(e => e.AssetValue).HasColumnType("decimal(38, 2)");

            entity.Property(e => e.CostOfAsset).HasColumnType("decimal(38, 2)");

            entity.Property(e => e.IdInvestmentType)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("ID_InvestmentType");

            entity.Property(e => e.IdPortfolio).HasColumnName("ID_Portfolio");

            entity.Property(e => e.IdValuationSumary).HasColumnName("ID_ValuationSumary");

            entity.Property(e => e.ValuationDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<Vw32ValuationSummary>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("Vw_32_ValuationSummary");

            entity.Property(e => e.AssetValue).HasColumnType("decimal(38, 2)");

            entity.Property(e => e.CostOfAsset).HasColumnType("decimal(38, 2)");

            entity.Property(e => e.IdInvestmentType)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("ID_InvestmentType");

            entity.Property(e => e.IdPortfolio).HasColumnName("ID_Portfolio");

            entity.Property(e => e.IdValuationSumary).HasColumnName("ID_ValuationSumary");

            entity.Property(e => e.ValuationDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<Vw33ValuationSummary>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("Vw_33_ValuationSummary");

            entity.Property(e => e.AssetValue).HasColumnType("decimal(38, 2)");

            entity.Property(e => e.CostOfAsset).HasColumnType("decimal(38, 2)");

            entity.Property(e => e.IdInvestmentType)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("ID_InvestmentType");

            entity.Property(e => e.IdPortfolio).HasColumnName("ID_Portfolio");

            entity.Property(e => e.IdValuationSumary).HasColumnName("ID_ValuationSumary");

            entity.Property(e => e.ValuationDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<Vw34ValuationSummary>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("Vw_34_ValuationSummary");

            entity.Property(e => e.AssetValue).HasColumnType("decimal(38, 2)");

            entity.Property(e => e.CostOfAsset).HasColumnType("decimal(38, 2)");

            entity.Property(e => e.IdInvestmentType)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("ID_InvestmentType");

            entity.Property(e => e.IdPortfolio).HasColumnName("ID_Portfolio");

            entity.Property(e => e.IdValuationSumary).HasColumnName("ID_ValuationSumary");

            entity.Property(e => e.ValuationDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<Vw36ValuationSummary>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("Vw_36_ValuationSummary");

            entity.Property(e => e.AssetValue).HasColumnType("decimal(38, 2)");

            entity.Property(e => e.CostOfAsset).HasColumnType("decimal(38, 2)");

            entity.Property(e => e.IdInvestmentType)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("ID_InvestmentType");

            entity.Property(e => e.IdPortfolio).HasColumnName("ID_Portfolio");

            entity.Property(e => e.IdValuationSumary).HasColumnName("ID_ValuationSumary");

            entity.Property(e => e.ValuationDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<Vw3ValuationSummary>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("Vw_3_ValuationSummary");

            entity.Property(e => e.AssetValue).HasColumnType("decimal(38, 2)");

            entity.Property(e => e.CostOfAsset).HasColumnType("decimal(38, 2)");

            entity.Property(e => e.IdInvestmentType)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("ID_InvestmentType");

            entity.Property(e => e.IdPortfolio).HasColumnName("ID_Portfolio");

            entity.Property(e => e.IdValuationSumary).HasColumnName("ID_ValuationSumary");

            entity.Property(e => e.ValuationDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<Vw42ValuationSummary>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("Vw_42_ValuationSummary");

            entity.Property(e => e.AssetValue).HasColumnType("decimal(38, 2)");

            entity.Property(e => e.CostOfAsset).HasColumnType("decimal(38, 2)");

            entity.Property(e => e.IdInvestmentType)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("ID_InvestmentType");

            entity.Property(e => e.IdPortfolio).HasColumnName("ID_Portfolio");

            entity.Property(e => e.IdValuationSumary).HasColumnName("ID_ValuationSumary");

            entity.Property(e => e.ValuationDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<Vw47ValuationSummary>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("Vw_47_ValuationSummary");

            entity.Property(e => e.AssetValue).HasColumnType("decimal(38, 2)");

            entity.Property(e => e.CostOfAsset).HasColumnType("decimal(38, 2)");

            entity.Property(e => e.IdInvestmentType)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("ID_InvestmentType");

            entity.Property(e => e.IdPortfolio).HasColumnName("ID_Portfolio");

            entity.Property(e => e.IdValuationSumary).HasColumnName("ID_ValuationSumary");

            entity.Property(e => e.ValuationDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<Vw4ValuationSummary>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("Vw_4_ValuationSummary");

            entity.Property(e => e.AssetValue).HasColumnType("decimal(38, 2)");

            entity.Property(e => e.CostOfAsset).HasColumnType("decimal(38, 2)");

            entity.Property(e => e.IdInvestmentType)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("ID_InvestmentType");

            entity.Property(e => e.IdPortfolio).HasColumnName("ID_Portfolio");

            entity.Property(e => e.IdValuationSumary).HasColumnName("ID_ValuationSumary");

            entity.Property(e => e.ValuationDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<Vw5ValuationSummary>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("Vw_5_ValuationSummary");

            entity.Property(e => e.AssetValue).HasColumnType("decimal(38, 2)");

            entity.Property(e => e.CostOfAsset).HasColumnType("decimal(38, 2)");

            entity.Property(e => e.IdInvestmentType)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("ID_InvestmentType");

            entity.Property(e => e.IdPortfolio).HasColumnName("ID_Portfolio");

            entity.Property(e => e.IdValuationSumary).HasColumnName("ID_ValuationSumary");

            entity.Property(e => e.ValuationDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<Vw60ValuationSummary>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("Vw_60_ValuationSummary");

            entity.Property(e => e.AssetValue).HasColumnType("decimal(38, 2)");

            entity.Property(e => e.CostOfAsset).HasColumnType("decimal(38, 2)");

            entity.Property(e => e.IdInvestmentType)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("ID_InvestmentType");

            entity.Property(e => e.IdPortfolio).HasColumnName("ID_Portfolio");

            entity.Property(e => e.IdValuationSumary).HasColumnName("ID_ValuationSumary");

            entity.Property(e => e.ValuationDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<Vw62ValuationSummary>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("Vw_62_ValuationSummary");

            entity.Property(e => e.AssetValue).HasColumnType("decimal(38, 2)");

            entity.Property(e => e.CostOfAsset).HasColumnType("decimal(38, 2)");

            entity.Property(e => e.IdInvestmentType)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("ID_InvestmentType");

            entity.Property(e => e.IdPortfolio).HasColumnName("ID_Portfolio");

            entity.Property(e => e.IdValuationSumary).HasColumnName("ID_ValuationSumary");

            entity.Property(e => e.ValuationDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<Vw63ValuationSummary>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("Vw_63_ValuationSummary");

            entity.Property(e => e.AssetValue).HasColumnType("decimal(38, 2)");

            entity.Property(e => e.CostOfAsset).HasColumnType("decimal(38, 2)");

            entity.Property(e => e.IdInvestmentType)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("ID_InvestmentType");

            entity.Property(e => e.IdPortfolio).HasColumnName("ID_Portfolio");

            entity.Property(e => e.IdValuationSumary).HasColumnName("ID_ValuationSumary");

            entity.Property(e => e.ValuationDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<Vw65ValuationSummary>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("Vw_65_ValuationSummary");

            entity.Property(e => e.AssetValue).HasColumnType("decimal(38, 2)");

            entity.Property(e => e.CostOfAsset).HasColumnType("decimal(38, 2)");

            entity.Property(e => e.IdInvestmentType)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("ID_InvestmentType");

            entity.Property(e => e.IdPortfolio).HasColumnName("ID_Portfolio");

            entity.Property(e => e.IdValuationSumary).HasColumnName("ID_ValuationSumary");

            entity.Property(e => e.ValuationDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<Vw66ValuationSummary>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("Vw_66_ValuationSummary");

            entity.Property(e => e.AssetValue).HasColumnType("decimal(38, 2)");

            entity.Property(e => e.CostOfAsset).HasColumnType("decimal(38, 2)");

            entity.Property(e => e.IdInvestmentType)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("ID_InvestmentType");

            entity.Property(e => e.IdPortfolio).HasColumnName("ID_Portfolio");

            entity.Property(e => e.IdValuationSumary).HasColumnName("ID_ValuationSumary");

            entity.Property(e => e.ValuationDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<Vw69ValuationSummary>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("Vw_69_ValuationSummary");

            entity.Property(e => e.AssetValue).HasColumnType("decimal(38, 2)");

            entity.Property(e => e.CostOfAsset).HasColumnType("decimal(38, 2)");

            entity.Property(e => e.IdInvestmentType)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("ID_InvestmentType");

            entity.Property(e => e.IdPortfolio).HasColumnName("ID_Portfolio");

            entity.Property(e => e.IdValuationSumary).HasColumnName("ID_ValuationSumary");

            entity.Property(e => e.ValuationDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<Vw6ValuationSummary>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("Vw_6_ValuationSummary");

            entity.Property(e => e.AssetValue).HasColumnType("decimal(38, 2)");

            entity.Property(e => e.CostOfAsset).HasColumnType("decimal(38, 2)");

            entity.Property(e => e.IdInvestmentType)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("ID_InvestmentType");

            entity.Property(e => e.IdPortfolio).HasColumnName("ID_Portfolio");

            entity.Property(e => e.IdValuationSumary).HasColumnName("ID_ValuationSumary");

            entity.Property(e => e.ValuationDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<Vw72ValuationSummary>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("Vw_72_ValuationSummary");

            entity.Property(e => e.AssetValue).HasColumnType("decimal(38, 2)");

            entity.Property(e => e.CostOfAsset).HasColumnType("decimal(38, 2)");

            entity.Property(e => e.IdInvestmentType)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("ID_InvestmentType");

            entity.Property(e => e.IdPortfolio).HasColumnName("ID_Portfolio");

            entity.Property(e => e.IdValuationSumary).HasColumnName("ID_ValuationSumary");

            entity.Property(e => e.ValuationDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<Vw73ValuationSummary>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("Vw_73_ValuationSummary");

            entity.Property(e => e.AssetValue).HasColumnType("decimal(38, 2)");

            entity.Property(e => e.CostOfAsset).HasColumnType("decimal(38, 2)");

            entity.Property(e => e.IdInvestmentType)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("ID_InvestmentType");

            entity.Property(e => e.IdPortfolio).HasColumnName("ID_Portfolio");

            entity.Property(e => e.IdValuationSumary).HasColumnName("ID_ValuationSumary");

            entity.Property(e => e.ValuationDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<Vw78ValuationSummary>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("Vw_78_ValuationSummary");

            entity.Property(e => e.AssetValue).HasColumnType("decimal(38, 2)");

            entity.Property(e => e.CostOfAsset).HasColumnType("decimal(38, 2)");

            entity.Property(e => e.IdInvestmentType)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("ID_InvestmentType");

            entity.Property(e => e.IdPortfolio).HasColumnName("ID_Portfolio");

            entity.Property(e => e.IdValuationSumary).HasColumnName("ID_ValuationSumary");

            entity.Property(e => e.ValuationDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<Vw79ValuationSummary>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("Vw_79_ValuationSummary");

            entity.Property(e => e.AssetValue).HasColumnType("decimal(38, 2)");

            entity.Property(e => e.CostOfAsset).HasColumnType("decimal(38, 2)");

            entity.Property(e => e.IdInvestmentType)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("ID_InvestmentType");

            entity.Property(e => e.IdPortfolio).HasColumnName("ID_Portfolio");

            entity.Property(e => e.IdValuationSumary).HasColumnName("ID_ValuationSumary");

            entity.Property(e => e.ValuationDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<Vw7ValuationSummary>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("Vw_7_ValuationSummary");

            entity.Property(e => e.AssetValue).HasColumnType("decimal(38, 2)");

            entity.Property(e => e.CostOfAsset).HasColumnType("decimal(38, 2)");

            entity.Property(e => e.IdInvestmentType)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("ID_InvestmentType");

            entity.Property(e => e.IdPortfolio).HasColumnName("ID_Portfolio");

            entity.Property(e => e.IdValuationSumary).HasColumnName("ID_ValuationSumary");

            entity.Property(e => e.ValuationDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<Vw80ValuationSummary>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("Vw_80_ValuationSummary");

            entity.Property(e => e.AssetValue).HasColumnType("decimal(38, 2)");

            entity.Property(e => e.CostOfAsset).HasColumnType("decimal(38, 2)");

            entity.Property(e => e.IdInvestmentType)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("ID_InvestmentType");

            entity.Property(e => e.IdPortfolio).HasColumnName("ID_Portfolio");

            entity.Property(e => e.IdValuationSumary).HasColumnName("ID_ValuationSumary");

            entity.Property(e => e.ValuationDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<Vw81ValuationSummary>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("Vw_81_ValuationSummary");

            entity.Property(e => e.AssetValue).HasColumnType("decimal(38, 2)");

            entity.Property(e => e.CostOfAsset).HasColumnType("decimal(38, 2)");

            entity.Property(e => e.IdInvestmentType)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("ID_InvestmentType");

            entity.Property(e => e.IdPortfolio).HasColumnName("ID_Portfolio");

            entity.Property(e => e.IdValuationSumary).HasColumnName("ID_ValuationSumary");

            entity.Property(e => e.ValuationDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<Vw82ValuationSummary>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("Vw_82_ValuationSummary");

            entity.Property(e => e.AssetValue).HasColumnType("decimal(38, 2)");

            entity.Property(e => e.CostOfAsset).HasColumnType("decimal(38, 2)");

            entity.Property(e => e.IdInvestmentType)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("ID_InvestmentType");

            entity.Property(e => e.IdPortfolio).HasColumnName("ID_Portfolio");

            entity.Property(e => e.IdValuationSumary).HasColumnName("ID_ValuationSumary");

            entity.Property(e => e.ValuationDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<Vw84ValuationSummary>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("Vw_84_ValuationSummary");

            entity.Property(e => e.AssetValue).HasColumnType("decimal(38, 2)");

            entity.Property(e => e.CostOfAsset).HasColumnType("decimal(38, 2)");

            entity.Property(e => e.IdInvestmentType)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("ID_InvestmentType");

            entity.Property(e => e.IdPortfolio).HasColumnName("ID_Portfolio");

            entity.Property(e => e.IdValuationSumary).HasColumnName("ID_ValuationSumary");

            entity.Property(e => e.ValuationDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<Vw88ValuationSummary>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("Vw_88_ValuationSummary");

            entity.Property(e => e.AssetValue).HasColumnType("decimal(38, 2)");

            entity.Property(e => e.CostOfAsset).HasColumnType("decimal(38, 2)");

            entity.Property(e => e.IdInvestmentType)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("ID_InvestmentType");

            entity.Property(e => e.IdPortfolio).HasColumnName("ID_Portfolio");

            entity.Property(e => e.IdValuationSumary).HasColumnName("ID_ValuationSumary");

            entity.Property(e => e.ValuationDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<Vw89ValuationSummary>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("Vw_89_ValuationSummary");

            entity.Property(e => e.AssetValue).HasColumnType("decimal(38, 2)");

            entity.Property(e => e.CostOfAsset).HasColumnType("decimal(38, 2)");

            entity.Property(e => e.IdInvestmentType)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("ID_InvestmentType");

            entity.Property(e => e.IdPortfolio).HasColumnName("ID_Portfolio");

            entity.Property(e => e.IdValuationSumary).HasColumnName("ID_ValuationSumary");

            entity.Property(e => e.ValuationDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<Vw8ValuationSummary>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("Vw_8_ValuationSummary");

            entity.Property(e => e.AssetValue).HasColumnType("decimal(38, 2)");

            entity.Property(e => e.CostOfAsset).HasColumnType("decimal(38, 2)");

            entity.Property(e => e.IdInvestmentType)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("ID_InvestmentType");

            entity.Property(e => e.IdPortfolio).HasColumnName("ID_Portfolio");

            entity.Property(e => e.IdValuationSumary).HasColumnName("ID_ValuationSumary");

            entity.Property(e => e.ValuationDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<Vw90ValuationSummary>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("Vw_90_ValuationSummary");

            entity.Property(e => e.AssetValue).HasColumnType("decimal(38, 2)");

            entity.Property(e => e.CostOfAsset).HasColumnType("decimal(38, 2)");

            entity.Property(e => e.IdInvestmentType)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("ID_InvestmentType");

            entity.Property(e => e.IdPortfolio).HasColumnName("ID_Portfolio");

            entity.Property(e => e.IdValuationSumary).HasColumnName("ID_ValuationSumary");

            entity.Property(e => e.ValuationDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<Vw92ValuationSummary>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("Vw_92_ValuationSummary");

            entity.Property(e => e.AssetValue).HasColumnType("decimal(38, 2)");

            entity.Property(e => e.CostOfAsset).HasColumnType("decimal(38, 2)");

            entity.Property(e => e.IdInvestmentType)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("ID_InvestmentType");

            entity.Property(e => e.IdPortfolio).HasColumnName("ID_Portfolio");

            entity.Property(e => e.IdValuationSumary).HasColumnName("ID_ValuationSumary");

            entity.Property(e => e.ValuationDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<Vw93ValuationSummary>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("Vw_93_ValuationSummary");

            entity.Property(e => e.AssetValue).HasColumnType("decimal(38, 2)");

            entity.Property(e => e.CostOfAsset).HasColumnType("decimal(38, 2)");

            entity.Property(e => e.IdInvestmentType)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("ID_InvestmentType");

            entity.Property(e => e.IdPortfolio).HasColumnName("ID_Portfolio");

            entity.Property(e => e.IdValuationSumary).HasColumnName("ID_ValuationSumary");

            entity.Property(e => e.ValuationDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<Vw94ValuationSummary>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("Vw_94_ValuationSummary");

            entity.Property(e => e.AssetValue).HasColumnType("decimal(38, 2)");

            entity.Property(e => e.CostOfAsset).HasColumnType("decimal(38, 2)");

            entity.Property(e => e.IdInvestmentType)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("ID_InvestmentType");

            entity.Property(e => e.IdPortfolio).HasColumnName("ID_Portfolio");

            entity.Property(e => e.IdValuationSumary).HasColumnName("ID_ValuationSumary");

            entity.Property(e => e.ValuationDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<Vw99ValuationSummary>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("Vw_99_ValuationSummary");

            entity.Property(e => e.AssetValue).HasColumnType("decimal(38, 2)");

            entity.Property(e => e.CostOfAsset).HasColumnType("decimal(38, 2)");

            entity.Property(e => e.IdInvestmentType)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("ID_InvestmentType");

            entity.Property(e => e.IdPortfolio).HasColumnName("ID_Portfolio");

            entity.Property(e => e.IdValuationSumary).HasColumnName("ID_ValuationSumary");

            entity.Property(e => e.ValuationDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<Vw9ValuationSummary>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("Vw_9_ValuationSummary");

            entity.Property(e => e.AssetValue).HasColumnType("decimal(38, 2)");

            entity.Property(e => e.CostOfAsset).HasColumnType("decimal(38, 2)");

            entity.Property(e => e.IdInvestmentType)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("ID_InvestmentType");

            entity.Property(e => e.IdPortfolio).HasColumnName("ID_Portfolio");

            entity.Property(e => e.IdValuationSumary).HasColumnName("ID_ValuationSumary");

            entity.Property(e => e.ValuationDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<VwBizUnitTrialBalance>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("vw_BizUnitTrialBalance");

            entity.Property(e => e.AccountNo)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.Amount).HasColumnType("decimal(38, 2)");

            entity.Property(e => e.CrAmount).HasColumnType("decimal(38, 2)");

            entity.Property(e => e.DrAmount).HasColumnType("decimal(38, 2)");

            entity.Property(e => e.IdBranch)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("ID_Branch");

            entity.Property(e => e.PostPeriod)
                .HasMaxLength(6)
                .IsUnicode(false);
        });

        modelBuilder.Entity<VwBondPortfolio>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("vw_BondPortfolio");

            entity.Property(e => e.BondType)
                .HasMaxLength(3)
                .IsUnicode(false);

            entity.Property(e => e.PortfolioId).HasColumnName("PortfolioID");

            entity.Property(e => e.QtyBalance).HasColumnType("decimal(38, 4)");

            entity.Property(e => e.QtySold).HasColumnType("decimal(38, 4)");

            entity.Property(e => e.QtyUnit).HasColumnType("decimal(24, 4)");

            entity.Property(e => e.Symbol)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<VwBrokerBalance>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("vw_BrokerBalances");

            entity.Property(e => e.Balance).HasColumnType("decimal(38, 2)");

            entity.Property(e => e.BrokerId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("BrokerID");

            entity.Property(e => e.IdCurrency)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("ID_Currency");

            entity.Property(e => e.IdPortfolio).HasColumnName("ID_portfolio");
        });

        modelBuilder.Entity<VwPreference>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("Vw_Preferences");

            entity.Property(e => e.IdApplication)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("ID_Application");

            entity.Property(e => e.IdPreferences)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID_Preferences");

            entity.Property(e => e.MoneyBookDatabaseName)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.Post2Gl).HasColumnName("Post2GL");
        });

        modelBuilder.Entity<VwTmpvaluation01>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("vw_tmpvaluation_01");

            entity.Property(e => e.AccountNo)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.AssetClass)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.Conideration).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.Description)
                .HasMaxLength(150)
                .IsUnicode(false);

            entity.Property(e => e.EffectiveDate).HasColumnType("datetime");

            entity.Property(e => e.FaceValue)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("face_value");

            entity.Property(e => e.FaceValue1)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("FaceValue");

            entity.Property(e => e.Holding).HasColumnType("decimal(31, 8)");

            entity.Property(e => e.IdInv)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("ID_Inv");

            entity.Property(e => e.IdInvestmentType)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("ID_InvestmentType");

            entity.Property(e => e.IdPortfolio).HasColumnName("ID_Portfolio");

            entity.Property(e => e.IdTmpValuation01)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID_TmpValuation_01");

            entity.Property(e => e.IdTreatmentType)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("ID_TreatmentType");

            entity.Property(e => e.InterestRate)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("interest_rate");

            entity.Property(e => e.InterestToDate)
                .HasColumnType("decimal(20, 2)")
                .HasColumnName("interest_to_date");

            entity.Property(e => e.ItemId).HasColumnName("item_id");

            entity.Property(e => e.MarketPrice).HasColumnType("decimal(18, 4)");

            entity.Property(e => e.MarketValue).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.MaturityDate).HasColumnType("datetime");

            entity.Property(e => e.MaturityDate1)
                .HasColumnType("datetime")
                .HasColumnName("maturity_date");

            entity.Property(e => e.OriginalCost).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.PremDisc)
                .HasColumnType("decimal(20, 2)")
                .HasColumnName("Prem_Disc");

            entity.Property(e => e.PurchaseCost).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.PurchaseDate).HasColumnType("datetime");

            entity.Property(e => e.ShareId).HasColumnName("ShareID");

            entity.Property(e => e.SubAssetClass)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.Property(e => e.TotalCost).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.TransactionCost).HasColumnType("decimal(31, 2)");

            entity.Property(e => e.Treatment)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.Property(e => e.Unamortised).HasColumnType("decimal(20, 2)");

            entity.Property(e => e.ValueDate)
                .HasColumnType("datetime")
                .HasColumnName("value_date");
        });

        modelBuilder.Entity<VwValuationSummary>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("vwValuationSummary");

            entity.Property(e => e.AssetValue).HasColumnType("decimal(38, 2)");

            entity.Property(e => e.CostOfAsset).HasColumnType("decimal(38, 2)");

            entity.Property(e => e.IdInvestmentType)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("ID_InvestmentType");

            entity.Property(e => e.IdPortfolio).HasColumnName("ID_Portfolio");

            entity.Property(e => e.IdValuationSumary).HasColumnName("ID_ValuationSumary");

            entity.Property(e => e.ValuationDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<WebFeedBack>(entity =>
        {
            entity.ToTable("WebFeedBack");

            entity.Property(e => e.Id).HasColumnName("ID");

            entity.Property(e => e.Comment)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.Property(e => e.Name)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.Property(e => e.Status)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.Title)
                .HasMaxLength(40)
                .IsUnicode(false);
        });

        modelBuilder.Entity<WebFeedBackType>(entity =>
        {
            entity.HasKey(e => e.IdFeedBack);

            entity.ToTable("WebFeedBackType");

            entity.HasIndex(e => e.IdFeedBack, "pk_Table1")
                .IsUnique();

            entity.Property(e => e.IdFeedBack).HasColumnName("ID_FeedBack");

            entity.Property(e => e.Title)
                .HasMaxLength(100)
                .IsUnicode(false);
        });

        modelBuilder.Entity<WebPortfolioContributorAccount>(entity =>
        {
            entity.HasNoKey();

            entity.ToTable("WebPortfolioContributorAccount");

            entity.Property(e => e.Amount).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.CapturedBy)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.CertficateStatus)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.CertificateNo)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.CertificateUnits).HasColumnType("decimal(24, 4)");

            entity.Property(e => e.ChequeNo)
                .HasMaxLength(10)
                .IsUnicode(false);

            entity.Property(e => e.Comments).HasColumnType("text");

            entity.Property(e => e.GlPostPeriod)
                .HasMaxLength(6)
                .IsUnicode(false);

            entity.Property(e => e.GlpostDate)
                .HasColumnType("datetime")
                .HasColumnName("GLPostDate");

            entity.Property(e => e.IdBank)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("ID_Bank");

            entity.Property(e => e.IdBankAccount)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("ID_BankAccount");

            entity.Property(e => e.IdCurrency)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("ID_Currency");

            entity.Property(e => e.IdImpPrtContributoAccount).HasColumnName("ID_ImpPrtContributoAccount");

            entity.Property(e => e.IdPortfolio).HasColumnName("ID_Portfolio");

            entity.Property(e => e.IdPortfolioContributor).HasColumnName("ID_PortfolioContributor");

            entity.Property(e => e.IdPortfolioContributorAccount)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID_PortfolioContributorAccount");

            entity.Property(e => e.IdPortfolioContributorBulkAccount).HasColumnName("ID_PortfolioContributorBulkAccount");

            entity.Property(e => e.Narration)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.NoOfUnits).HasColumnType("decimal(24, 4)");

            entity.Property(e => e.PaymentType)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.PenaltyCharge).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.ReceiptDate).HasColumnType("datetime");

            entity.Property(e => e.ReversalId).HasColumnName("ReversalID");

            entity.Property(e => e.Status)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.TransactionDate).HasColumnType("datetime");

            entity.Property(e => e.TransactionType)
                .HasMaxLength(1)
                .IsUnicode(false);

            entity.Property(e => e.UnitValue).HasColumnType("decimal(18, 4)");

            entity.Property(e => e.UnitsSold).HasColumnType("decimal(24, 4)");

            entity.Property(e => e.ValueDate).HasColumnType("datetime");

            entity.Property(e => e.VoucherNo)
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<WebPortfolioContributorRedemption>(entity =>
        {
            entity.HasNoKey();

            entity.ToTable("WebPortfolioContributorRedemption");

            entity.Property(e => e.CertificateNo)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.IdPorfolioContributor).HasColumnName("ID_PorfolioContributor");

            entity.Property(e => e.IdPortfolioContributorAccount).HasColumnName("ID_PortfolioContributorAccount");

            entity.Property(e => e.IdPortfolioContributorRedemption)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID_PortfolioContributorRedemption");

            entity.Property(e => e.IdRedemptionContributorAccount).HasColumnName("ID_RedemptionContributorAccount");

            entity.Property(e => e.NetSettlement).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.NoOfUnits).HasColumnType("decimal(24, 4)");

            entity.Property(e => e.OfferPrice).HasColumnType("decimal(18, 4)");

            entity.Property(e => e.PenaltyAmount).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.SalesValue).HasColumnType("decimal(18, 2)");
        });

        modelBuilder.Entity<WebRca>(entity =>
        {
            entity.HasNoKey();

            entity.ToTable("Web_RCA");

            entity.Property(e => e.CertificateNo)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.Property(e => e.IdPortfolio).HasColumnName("ID_Portfolio");

            entity.Property(e => e.IdPortfolioContributor).HasColumnName("ID_PortfolioContributor");

            entity.Property(e => e.IdPortfolioContributorAccount).HasColumnName("ID_PortfolioContributorAccount");

            entity.Property(e => e.IdPortfolioContributorRedemption)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID_PortfolioContributorRedemption");

            entity.Property(e => e.IdRedemptionContributorAccount).HasColumnName("ID_RedemptionContributorAccount");

            entity.Property(e => e.NetSettlement).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.NoOfUnits).HasColumnType("decimal(24, 4)");

            entity.Property(e => e.OfferPrice).HasColumnType("decimal(18, 4)");

            entity.Property(e => e.PenaltyAmount).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.SalesValue).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.Status)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<WithholdingTax4Aiico>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("WithholdingTax4Aiico");

            entity.Property(e => e.DealType)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.Description)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.Property(e => e.EffectiveDate).HasColumnType("datetime");

            entity.Property(e => e.FaceAmount).HasColumnType("decimal(18, 2)");

            entity.Property(e => e.IdDealMaster).HasColumnName("ID_DealMaster");

            entity.Property(e => e.IdDealType)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("ID_DealType");

            entity.Property(e => e.IdPortfolio).HasColumnName("ID_Portfolio");

            entity.Property(e => e.MaturityDate).HasColumnType("datetime");

            entity.Property(e => e.Portfolio)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.WithHoldTax).HasColumnType("decimal(38, 2)");
        });



        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}
